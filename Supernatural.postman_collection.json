{
	"info": {
		"_postman_id": "1b7e7a83-94f7-4ffa-ac44-2ba592807b2a",
		"name": "Supernatural",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "21377628",
		"_collection_link": "https://supernatural-4534.postman.co/workspace/Supernatural---Academy~6152fdb5-f789-49b2-ad5f-1eae2dd82929/collection/21377628-1b7e7a83-94f7-4ffa-ac44-2ba592807b2a?action=share&source=collection_link&creator=21377628"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Validar Token",
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{tokenAdmin}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api-supernatural.qacoders.dev.br/api/validateToken",
							"protocol": "https",
							"host": [
								"api-supernatural",
								"qacoders",
								"dev",
								"br"
							],
							"path": [
								"api",
								"validateToken"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.globals.set(\"tokenAdmin\", pm.response.json().token)\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify token is valid\", function (){\r",
									"    pm.expect(pm.response.json().token).to.exist;\r",
									"});\r",
									"\r",
									"pm.test(\"Welcome Message\", function () {\r",
									"    pm.environment.set(\"msgAdmin\", pm.response.json().msg);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify ID Admin\", function (){\r",
									"    pm.environment.set(\"IDAdmin\", pm.response.json().user._id);\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"mail\": \"{{mailAdmin}}\",\r\n    \"password\": \"{{passAdmin}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/login/",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"login",
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Users",
			"item": [
				{
					"name": "Register New User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function (){\r",
									"    pm.response.to.have.status(201);\r",
									"});\r",
									"\r",
									"pm.test(\"Verify the message of register\", function (){\r",
									"    pm.environment.set(\"Message\", `Olá ${pm.environment.get(\"FullName\")}, cadastro realizado com sucesso.`)\r",
									"});\r",
									"\r",
									"pm.test(\"Use ID\", function (){\r",
									"    pm.expect(pm.environment.set(\"IDUser\", pm.response.json().user._id))\r",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"function firstname() {\r",
									"    const names = ['Cloe', 'Joaquim', 'Bernardo', 'Aquiles', 'Milene', 'Estela', 'Alana', 'Paloma', 'Santiago', 'Fernanda', 'Manuela', 'António', 'Samuel', 'Tomás', 'Jessica', 'Rafaela', 'Helena', 'Isa', 'Heloísa'];\r",
									"    const randomName = names[Math.floor(Math.random() * names.length)]\r",
									"\r",
									"    return randomName;\r",
									"}\r",
									"\r",
									"pm.environment.set(\"FirstName\", firstname());\r",
									"\r",
									"function lastname() {\r",
									"    const lastnames = ['Verret', 'Agrizi', 'Vargas', 'Grillo', 'Orletti', 'Resolen', 'Aveleda', 'Freitas', 'Angelo', 'Contarini', 'Isgária', 'Rui', 'Demoni', 'Parente', 'Nassar', 'Bernardes', 'Brodeur', 'Carriço', 'Dutra'];\r",
									"    const randomLastName = lastnames[Math.floor(Math.random() * lastnames.length)]\r",
									"\r",
									"    return randomLastName;\r",
									"}\r",
									"\r",
									"pm.environment.set(\"LastName\", lastname())\r",
									"\r",
									"pm.environment.set(\"FullName\", pm.environment.get(\"FirstName\") + \" \" + pm.environment.get(\"LastName\"))\r",
									"\r",
									"function generatePassword() {\r",
									"  const chars = \r",
									"    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@#$%*\";\r",
									"  \r",
									"  const comprimentoMinimo = 8;\r",
									"  const comprimentoMaximo = 12;\r",
									"  let senhaArray = [];\r",
									"\r",
									"  senhaArray.push(chars[Math.floor(Math.random() * 26)]);\r",
									"  senhaArray.push(chars[26 + Math.floor(Math.random() * 26)]);\r",
									"  senhaArray.push(chars[52 + Math.floor(Math.random() * 10)]);\r",
									"  senhaArray.push(chars[62 + Math.floor(Math.random() * 4)]);\r",
									"\r",
									"  const comprimentoRestante = Math.max(comprimentoMinimo - senhaArray.length, comprimentoMaximo - senhaArray.length);\r",
									"\r",
									"  for (let i = 0; i < comprimentoRestante; i++) {\r",
									"    senhaArray.push(chars[Math.floor(Math.random() * chars.length)]);\r",
									"  }\r",
									"\r",
									"  return shuffleString(senhaArray.join(\"\"));\r",
									"}\r",
									"\r",
									"function shuffleString(string) {\r",
									"  return string.split(\"\").sort(() => Math.random() - 0.5).join(\"\");\r",
									"}\r",
									"\r",
									"pm.environment.set(\"passUser\", generatePassword());\r",
									"\r",
									"\r",
									"\r",
									"pm.environment.set(\"Mail\", pm.environment.get(\"FullName\")\r",
									"  .toLowerCase().replace(/\\s/g, \"\").normalize(\"NFD\")\r",
									"  .replace(/[\\u0300-\\u036f]/g, \"\") + \"@qacoders.com.br\");\r",
									"\r",
									"\r",
									"function randomCpf() {\r",
									"    let randomCpf = '';\r",
									"\r",
									"    for (let i = 0; i < 11; i++) {\r",
									"        randomCpf += Math.floor(Math.random() * 10).toString();\r",
									"    }\r",
									"    return randomCpf;\r",
									"}\r",
									"\r",
									"pm.environment.set(\"CPF\", randomCpf());"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n  \"fullName\": \"{{FullName}}\",\r\n  \"mail\": \"{{Mail}}\",\r\n  \"accessProfile\": \"ADMIN\",\r\n  \"cpf\": \"{{CPF}}\",\r\n  \"password\": \"{{passUser}}\",\r\n  \"confirmPassword\": \"{{passUser}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{url}}/api/user",
							"host": [
								"{{url}}"
							],
							"path": [
								"api",
								"user"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login User",
					"request": {
						"method": "POST",
						"header": []
					},
					"response": []
				}
			]
		},
		{
			"name": "Company",
			"item": [
				{
					"name": "Card: 23303 - Cadastrar Empresa",
					"item": [
						{
							"name": "Massa de Dados",
							"item": [
								{
									"name": "Cadastro de massa de dados",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"\r",
													"pm.test(\"Status code is 201 Created\", function() {\r",
													"    pm.response.to.have.status(201);\r",
													"}); \r",
													"pm.test(\"Mensagem de sucesso de cadastro\", function() {\r",
													"    pm.expect(pm.response.json().msg).to.be.a('string').and.to.include(\"cadastrada com sucesso.\");\r",
													"});\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Array com valores diferentes para \"Razão Social\"\r",
													"const corporateNames = [\"Camily Santos company\", \"TechNova Ltda\", \"Alfa Beta Corp\", \"Zeta Solutions\", \"InovaServiços\", \"Empresa Exemplo 001\", \"Startup do Bem\", \"GlobalTrade BR\", \"Serviços Rápidos\", \"MaxTI Soluções\", \"Empresa do Norte\", \"Consultoria XP\", \"AutoMarket Brasil\", \"CloudX Serviços\", \"FutureWave Ltda\", \"Rede Smart Business\", \"DevGroup Solutions\", \"HighData Inc\", \"Infinity Tech BR\"];\r",
													"\r",
													"// Seleciona um nome aleatório\r",
													"const selectedCorporateName = corporateNames[Math.floor(Math.random() * corporateNames.length)];\r",
													"\r",
													"// Define como variável para reutilizar\r",
													"pm.variables.set(\"corporateName\", selectedCorporateName);\r",
													"\r",
													"// Array com CNPJs fictícios válidos (sem máscara, como esperado no backend)\r",
													"const registerCompanies = [\r",
													"  \"12345678000195\", \"98765432000109\", \"11222333000181\", \"99887766000144\",\r",
													"  \"55667788000122\", \"33445566000177\", \"10203040000166\", \"11223344000100\",\r",
													"  \"66778899000188\", \"12312312300012\", \"44112233000155\", \"55443322000133\",\r",
													"  \"77665544000177\", \"88990011000100\", \"10111213000122\", \"15161718000190\",\r",
													"  \"19202122000101\", \"24252627000144\", \"28293031000188\"\r",
													"];\r",
													"\r",
													"// Seleciona um CNPJ aleatório\r",
													"const selectedCNPJ = registerCompanies[Math.floor(Math.random() * registerCompanies.length)];\r",
													"\r",
													"// Define como variável reutilizável\r",
													"pm.variables.set(\"registerCompany\", selectedCNPJ);\r",
													"\r",
													"\r",
													"// Array com e-mails válidos e variados\r",
													"const companyMails = [\r",
													"  \"empresa01@empresa.com.br\", \"contato@techsolucoes.com\", \"suporte@alfa.com.br\", \"info@betacorp.io\",\r",
													"  \"vendas@exemplo.org\", \"atendimento@cloudx.com\", \"diretoria@startupltda.com\", \"camila.santos@empresa.com\",\r",
													"  \"admin@inovabr.com\", \"noreply@negocios.com\", \"helpdesk@redesmart.com\", \"contato@consultoriaxp.com\",\r",
													"  \"rh@futurewave.com.br\", \"sac@automarket.com\", \"financeiro@globaltrade.com.br\", \"ti@highdata.org\",\r",
													"  \"comercial@maxsolucoes.com\", \"equipe@servicosbr.net\", \"gerencia@empresaxpto.com\"\r",
													"];\r",
													"\r",
													"// Seleciona um e-mail aleatório\r",
													"const selectedMail = companyMails[Math.floor(Math.random() * companyMails.length)];\r",
													"\r",
													"// Define como variável reutilizável\r",
													"pm.variables.set(\"mail\", selectedMail);\r",
													"\r",
													"// nomes fantasia diferentes (matriz)\r",
													"const matrizNames = [\r",
													"  \"Nuvem Computing\", \"Alpha Sistemas\", \"BetaTech\", \"ZetaCorp\", \"Smart Solutions\",\r",
													"  \"InovaTech\", \"TI Pro Business\", \"CloudWave\", \"MaxData\", \"DataSafe\",\r",
													"  \"NextGen Tech\", \"ServTI Brasil\", \"Grupo Digital\", \"NeoInfra\", \"SoftMind\",\r",
													"  \"Connect Plus\", \"FusionTI\", \"GlobalNet\", \"CyberWave\"\r",
													"];\r",
													"\r",
													"// descrições de serviços/negócio\r",
													"const serviceDescriptions = [\r",
													"  \"Desenvolvimento Personalizado\", \"Consultoria em TI\", \"Soluções em Nuvem\", \"Infraestrutura de Redes\",\r",
													"  \"Automação Comercial\", \"Plataformas Digitais\", \"Serviços de Hosting\", \"Suporte Técnico Especializado\",\r",
													"  \"Análise de Dados\", \"Desenvolvimento Web\", \"Sistemas Empresariais\", \"Segurança da Informação\",\r",
													"  \"Treinamento Corporativo\", \"Integração de Sistemas\", \"Consultoria Ágil\", \"Migração para Nuvem\",\r",
													"  \"Gestão de TI\", \"Gerenciamento de Servidores\", \"Tecnologia Educacional\"\r",
													"];\r",
													"\r",
													"// Seleção aleatória\r",
													"const selectedMatrizName = matrizNames[Math.floor(Math.random() * matrizNames.length)];\r",
													"const selectedServiceDesc = serviceDescriptions[Math.floor(Math.random() * serviceDescriptions.length)];\r",
													"\r",
													"// Armazenar como variáveis para uso no body\r",
													"pm.variables.set(\"matriz\", selectedMatrizName);\r",
													"pm.variables.set(\"serviceDescription\", selectedServiceDesc);\r",
													"\r",
													"// nomes compostos (apenas letras, com ao menos duas palavras)\r",
													"const responsibleContacts = [\r",
													"  \"Camila Santos\", \"João Pedro\", \"Ana Beatriz\", \"Carlos Eduardo\", \"Fernanda Lima\",\r",
													"  \"Rafael Borges\", \"Juliana Costa\", \"Marcelo Henrique\", \"Bruna Silva\", \"Felipe Oliveira\",\r",
													"  \"Daniela Marques\", \"Luana Ferreira\", \"Ricardo Matos\", \"Patrícia Andrade\", \"Gabriel Souza\",\r",
													"  \"Larissa Cunha\", \"Renato Castro\", \"Amanda Prado\", \"Lucas Almeida\"\r",
													"];\r",
													"\r",
													"// telefones brasileiros com máscara (máx. 15 caracteres)\r",
													"const telephones = [\r",
													"  \"11981123456789\", \"21982234567890\", \"31983345678901\", \"41984456789012\", \"51985567890123\", \"61986678901234\", \"71987789012345\", \"81988890123456\", \"91989901234567\", \"31997345671234\", \"51991567896789\", \"11992112234455\", \"21994556678899\", \"61995667789900\", \"71996778890011\", \"41998889901122\", \"81999990012233\", \"91980101123344\", \"11987111223333\"\r",
													"];\r",
													"\r",
													"// Seleção aleatória\r",
													"const selectedContact = responsibleContacts[Math.floor(Math.random() * responsibleContacts.length)];\r",
													"const selectedPhone = telephones[Math.floor(Math.random() * telephones.length)];\r",
													"\r",
													"// Setar variáveis\r",
													"pm.variables.set(\"responsibleContact\", selectedContact);\r",
													"pm.variables.set(\"telephone\", selectedPhone);\r",
													"\r",
													"// logradouros (alfanuméricos, até 50 caracteres, com caracteres especiais permitidos)\r",
													"const streets = [\r",
													"  \"Rua das Palmeiras\", \"Av. Brasil\", \"Rua 1ª de Maio\", \"Travessa do Comércio\", \"Alameda das Águias\",\r",
													"  \"Rua São João\", \"Av. Getúlio Vargas\", \"Rua dos Lírios\", \"Rua Coronel 2º Batista\", \"Rua Alfredo 'Silva'\",\r",
													"  \"Estrada do Sol\", \"Rua João 1º Neto\", \"Rua Principal - Leste\", \"Rua Vitória-Régia\", \"Alameda 5ª Norte\",\r",
													"  \"Praça Central\", \"Rua Júlio de Castro\", \"Rua Dr. Carlos 1º Martins\", \"Rua Dom Pedro II\"\r",
													"];\r",
													"\r",
													"// números (apenas dígitos, até 10 caracteres)\r",
													"const numbers = [\r",
													"  \"1010000000\", \"2020000000\", \"3030000000\", \"4040000000\", \"5050000000\", \"6060000000\", \"7070000000\", \"8080000000\", \"9090000000\", \"1001000000\",\r",
													"  \"1102000000\", \"1203000000\", \"1304000000\", \"1405000000\", \"1506000000\", \"1607000000\", \"1708000000\", \"1809000000\", \"1900000000\"\r",
													"];\r",
													"\r",
													"// complementos (alfanuméricos, com especiais permitidos, até 80 caracteres)\r",
													"const complements = [\r",
													"  \"Fundos\", \"Casa 1\", \"Apto 202\", \"Bloco B\", \"Sala 3\", \"Cobertura\", \"Térreo\", \"Galpão 2\", \"Loja 'A'\", \"Anexo 1\",\r",
													"  \"Ed. Central\", \"Torre Sul\", \"Prédio 1º\", \"Sobreloja\", \"Loja B\", \"Sala Comercial 7\", \"2º Andar\", \"Área 3\", \"Estacionamento\"\r",
													"];\r",
													"\r",
													"// bairros (alfanuméricos com especiais permitidos, até 50 caracteres)\r",
													"const districts = [\r",
													"  \"Centro\", \"Jardim das Flores\", \"Vila Nova\", \"Parque 1ª Esperança\", \"Bairro Alto\",\r",
													"  \"Residencial Alfa\", \"Jardim São João\", \"Nova 'Vida'\", \"Lagoa Azul\", \"Industrial Oeste\",\r",
													"  \"Bairro Santo André\", \"Vila Mariana\", \"Parque das Árvores\", \"Santa Luzia\", \"Água Verde\",\r",
													"  \"Vila Operária\", \"Jardim Central\", \"Colinas do Sol\", \"Residencial Leste\"\r",
													"];\r",
													"\r",
													"// Seleciona valores aleatórios\r",
													"const selectedStreet = streets[Math.floor(Math.random() * streets.length)];\r",
													"const selectedNumber = numbers[Math.floor(Math.random() * numbers.length)];\r",
													"const selectedComplement = complements[Math.floor(Math.random() * complements.length)];\r",
													"const selectedDistrict = districts[Math.floor(Math.random() * districts.length)];\r",
													"\r",
													"pm.variables.set(\"street\", selectedStreet);\r",
													"pm.variables.set(\"number\", selectedNumber);\r",
													"pm.variables.set(\"complement\", selectedComplement);\r",
													"pm.variables.set(\"district\", selectedDistrict);\r",
													"\r",
													"// cidades (somente letras, com caracteres especiais permitidos, até 50 caracteres)\r",
													"const cities = [\r",
													"  \"São Paulo\", \"Rio de Janeiro\", \"Belo Horizonte\", \"Curitiba\", \"Salvador\",\r",
													"  \"Fortaleza\", \"Brasília\", \"Porto Alegre\", \"Florianópolis\", \"Goiânia\",\r",
													"  \"Campinas\", \"Natal\", \"Recife\", \"Manaus\", \"Belém\",\r",
													"  \"São Luís\", \"Campo Grande\", \"Vitória\", \"Maceió\"\r",
													"];\r",
													"\r",
													"// estados (apenas letras, com 2 caracteres obrigatórios - sigla)\r",
													"const states = [\r",
													"  \"SP\", \"RJ\", \"MG\", \"PR\", \"BA\", \"CE\", \"DF\", \"RS\", \"SC\", \"GO\",\r",
													"  \"PA\", \"PE\", \"AM\", \"MA\", \"RN\", \"AL\", \"MS\", \"ES\", \"PB\"\r",
													"];\r",
													"\r",
													"// países (somente letras, até 50 caracteres)\r",
													"const countries = [\r",
													"  \"Brasil\", \"Argentina\", \"Portugal\", \"México\", \"Espanha\",\r",
													"  \"Chile\", \"Uruguai\", \"Peru\", \"Colômbia\", \"Canadá\",\r",
													"  \"França\", \"Itália\", \"Alemanha\", \"Suíça\", \"Japão\",\r",
													"  \"Coreia\", \"Austrália\", \"Noruega\", \"Dinamarca\"\r",
													"];\r",
													"\r",
													"// CEPs válidos com máscara (somente números, no formato #####-###)\r",
													"const postalCodes = [\r",
													"  \"01001000\", \"20010001\", \"30110012\", \"80020000\", \"40010903\", \"60110000\", \"70040010\", \"90010000\", \"88010200\", \"74000001\",\r",
													"  \"13010000\", \"59010000\", \"50010902\", \"69010020\", \"66010080\", \"65010100\", \"79002123\", \"29010200\", \"57010000\"\r",
													"];\r",
													"\r",
													"const selectedCity = cities[Math.floor(Math.random() * cities.length)];\r",
													"const selectedState = states[Math.floor(Math.random() * states.length)];\r",
													"const selectedCountry = countries[Math.floor(Math.random() * countries.length)];\r",
													"const selectedPostalCode = postalCodes[Math.floor(Math.random() * postalCodes.length)];\r",
													"\r",
													"pm.variables.set(\"city\", selectedCity);\r",
													"pm.variables.set(\"state\", selectedState);\r",
													"pm.variables.set(\"country\", selectedCountry);\r",
													"pm.variables.set(\"postalCode\", selectedPostalCode);\r",
													"\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{registerCompany}}\",\r\n  \"mail\": \"{{mail}}\",\r\n  \"matriz\": \"{{matriz}}\",\r\n  \"responsibleContact\": \"{{responsibleContact}}\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{postalCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"Jardim Satelite\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"{{country}}\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/company",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"company"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Bairro",
							"item": [
								{
									"name": "Bairro com caracteres inválidos",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Array com valores diferentes para \"Razão Social\"\r",
													"const corporateNames = [\"Camila Santos company\", \"TechNova Ltda\", \"Alfa Beta Corp\", \"Zeta Solutions\", \"InovaServiços\", \"Empresa Exemplo 001\", \"Startup do Bem\", \"GlobalTrade BR\", \"Serviços Rápidos\", \"MaxTI Soluções\", \"Empresa do Norte\", \"Consultoria XP\", \"AutoMarket Brasil\", \"CloudX Serviços\", \"FutureWave Ltda\", \"Rede Smart Business\", \"DevGroup Solutions\", \"HighData Inc\", \"Infinity Tech BR\"];\r",
													"\r",
													"// Seleciona um nome aleatório\r",
													"const selectedCorporateName = corporateNames[Math.floor(Math.random() * corporateNames.length)];\r",
													"\r",
													"// Define como variável para reutilizar\r",
													"pm.variables.set(\"corporateName\", selectedCorporateName);\r",
													"\r",
													"// Array com CNPJs fictícios válidos (sem máscara, como esperado no backend)\r",
													"const registerCompanies = [\r",
													"  \"12345678000195\", \"98765432000109\", \"11222333000181\", \"99887766000144\",\r",
													"  \"55667788000122\", \"33445566000177\", \"10203040000166\", \"11223344000100\",\r",
													"  \"66778899000188\", \"12312312300012\", \"44112233000155\", \"55443322000133\",\r",
													"  \"77665544000177\", \"88990011000100\", \"10111213000122\", \"15161718000190\",\r",
													"  \"19202122000101\", \"24252627000144\", \"28293031000188\"\r",
													"];\r",
													"\r",
													"// Seleciona um CNPJ aleatório\r",
													"const selectedCNPJ = registerCompanies[Math.floor(Math.random() * registerCompanies.length)];\r",
													"\r",
													"// Define como variável reutilizável\r",
													"pm.variables.set(\"registerCompany\", selectedCNPJ);\r",
													"\r",
													"\r",
													"// Array com e-mails válidos e variados\r",
													"const companyMails = [\r",
													"  \"empresa01@empresa.com.br\", \"contato@techsolucoes.com\", \"suporte@alfa.com.br\", \"info@betacorp.io\",\r",
													"  \"vendas@exemplo.org\", \"atendimento@cloudx.com\", \"diretoria@startupltda.com\", \"camila.santos@empresa.com\",\r",
													"  \"admin@inovabr.com\", \"noreply@negocios.com\", \"helpdesk@redesmart.com\", \"contato@consultoriaxp.com\",\r",
													"  \"rh@futurewave.com.br\", \"sac@automarket.com\", \"financeiro@globaltrade.com.br\", \"ti@highdata.org\",\r",
													"  \"comercial@maxsolucoes.com\", \"equipe@servicosbr.net\", \"gerencia@empresaxpto.com\"\r",
													"];\r",
													"\r",
													"// Seleciona um e-mail aleatório\r",
													"const selectedMail = companyMails[Math.floor(Math.random() * companyMails.length)];\r",
													"\r",
													"// Define como variável reutilizável\r",
													"pm.variables.set(\"mail\", selectedMail);\r",
													"\r",
													"// nomes fantasia diferentes (matriz)\r",
													"const matrizNames = [\r",
													"  \"Nuvem Computing\", \"Alpha Sistemas\", \"BetaTech\", \"ZetaCorp\", \"Smart Solutions\",\r",
													"  \"InovaTech\", \"TI Pro Business\", \"CloudWave\", \"MaxData\", \"DataSafe\",\r",
													"  \"NextGen Tech\", \"ServTI Brasil\", \"Grupo Digital\", \"NeoInfra\", \"SoftMind\",\r",
													"  \"Connect Plus\", \"FusionTI\", \"GlobalNet\", \"CyberWave\"\r",
													"];\r",
													"\r",
													"// descrições de serviços/negócio\r",
													"const serviceDescriptions = [\r",
													"  \"Desenvolvimento Personalizado\", \"Consultoria em TI\", \"Soluções em Nuvem\", \"Infraestrutura de Redes\",\r",
													"  \"Automação Comercial\", \"Plataformas Digitais\", \"Serviços de Hosting\", \"Suporte Técnico Especializado\",\r",
													"  \"Análise de Dados\", \"Desenvolvimento Web\", \"Sistemas Empresariais\", \"Segurança da Informação\",\r",
													"  \"Treinamento Corporativo\", \"Integração de Sistemas\", \"Consultoria Ágil\", \"Migração para Nuvem\",\r",
													"  \"Gestão de TI\", \"Gerenciamento de Servidores\", \"Tecnologia Educacional\"\r",
													"];\r",
													"\r",
													"// Seleção aleatória\r",
													"const selectedMatrizName = matrizNames[Math.floor(Math.random() * matrizNames.length)];\r",
													"const selectedServiceDesc = serviceDescriptions[Math.floor(Math.random() * serviceDescriptions.length)];\r",
													"\r",
													"// Armazenar como variáveis para uso no body\r",
													"pm.variables.set(\"matriz\", selectedMatrizName);\r",
													"pm.variables.set(\"serviceDescription\", selectedServiceDesc);\r",
													"\r",
													"// nomes compostos (apenas letras, com ao menos duas palavras)\r",
													"const responsibleContacts = [\r",
													"  \"Camila Santos\", \"João Pedro\", \"Ana Beatriz\", \"Carlos Eduardo\", \"Fernanda Lima\",\r",
													"  \"Rafael Borges\", \"Juliana Costa\", \"Marcelo Henrique\", \"Bruna Silva\", \"Felipe Oliveira\",\r",
													"  \"Daniela Marques\", \"Luana Ferreira\", \"Ricardo Matos\", \"Patrícia Andrade\", \"Gabriel Souza\",\r",
													"  \"Larissa Cunha\", \"Renato Castro\", \"Amanda Prado\", \"Lucas Almeida\"\r",
													"];\r",
													"\r",
													"// telefones brasileiros com máscara (máx. 15 caracteres)\r",
													"const telephones = [\r",
													"  \"11981123456789\", \"21982234567890\", \"31983345678901\", \"41984456789012\", \"51985567890123\", \"61986678901234\", \"71987789012345\", \"81988890123456\", \"91989901234567\", \"31997345671234\", \"51991567896789\", \"11992112234455\", \"21994556678899\", \"61995667789900\", \"71996778890011\", \"41998889901122\", \"81999990012233\", \"91980101123344\", \"11987111223333\"\r",
													"];\r",
													"\r",
													"// Seleção aleatória\r",
													"const selectedContact = responsibleContacts[Math.floor(Math.random() * responsibleContacts.length)];\r",
													"const selectedPhone = telephones[Math.floor(Math.random() * telephones.length)];\r",
													"\r",
													"// Setar variáveis\r",
													"pm.variables.set(\"responsibleContact\", selectedContact);\r",
													"pm.variables.set(\"telephone\", selectedPhone);\r",
													"\r",
													"// logradouros (alfanuméricos, até 50 caracteres, com caracteres especiais permitidos)\r",
													"const streets = [\r",
													"  \"Rua das Palmeiras\", \"Av. Brasil\", \"Rua 1ª de Maio\", \"Travessa do Comércio\", \"Alameda das Águias\",\r",
													"  \"Rua São João\", \"Av. Getúlio Vargas\", \"Rua dos Lírios\", \"Rua Coronel 2º Batista\", \"Rua Alfredo 'Silva'\",\r",
													"  \"Estrada do Sol\", \"Rua João 1º Neto\", \"Rua Principal - Leste\", \"Rua Vitória-Régia\", \"Alameda 5ª Norte\",\r",
													"  \"Praça Central\", \"Rua Júlio de Castro\", \"Rua Dr. Carlos 1º Martins\", \"Rua Dom Pedro II\"\r",
													"];\r",
													"\r",
													"// números (apenas dígitos, até 10 caracteres)\r",
													"const numbers = [\r",
													"  \"1010000000\", \"2020000000\", \"3030000000\", \"4040000000\", \"5050000000\", \"6060000000\", \"7070000000\", \"8080000000\", \"9090000000\", \"1001000000\",\r",
													"  \"1102000000\", \"1203000000\", \"1304000000\", \"1405000000\", \"1506000000\", \"1607000000\", \"1708000000\", \"1809000000\", \"1900000000\"\r",
													"];\r",
													"\r",
													"// complementos (alfanuméricos, com especiais permitidos, até 80 caracteres)\r",
													"const complements = [\r",
													"  \"Fundos\", \"Casa 1\", \"Apto 202\", \"Bloco B\", \"Sala 3\", \"Cobertura\", \"Térreo\", \"Galpão 2\", \"Loja 'A'\", \"Anexo 1\",\r",
													"  \"Ed. Central\", \"Torre Sul\", \"Prédio 1º\", \"Sobreloja\", \"Loja B\", \"Sala Comercial 7\", \"2º Andar\", \"Área 3\", \"Estacionamento\"\r",
													"];\r",
													"\r",
													"// bairros (alfanuméricos com especiais permitidos, até 50 caracteres)\r",
													"const districts = [\r",
													"  \"Centro\", \"Jardim das Flores\", \"Vila Nova\", \"Parque 1ª Esperança\", \"Bairro Alto\",\r",
													"  \"Residencial Alfa\", \"Jardim São João\", \"Nova 'Vida'\", \"Lagoa Azul\", \"Industrial Oeste\",\r",
													"  \"Bairro Santo André\", \"Vila Mariana\", \"Parque das Árvores\", \"Santa Luzia\", \"Água Verde\",\r",
													"  \"Vila Operária\", \"Jardim Central\", \"Colinas do Sol\", \"Residencial Leste\"\r",
													"];\r",
													"\r",
													"// Seleciona valores aleatórios\r",
													"const selectedStreet = streets[Math.floor(Math.random() * streets.length)];\r",
													"const selectedNumber = numbers[Math.floor(Math.random() * numbers.length)];\r",
													"const selectedComplement = complements[Math.floor(Math.random() * complements.length)];\r",
													"const selectedDistrict = districts[Math.floor(Math.random() * districts.length)];\r",
													"\r",
													"pm.variables.set(\"street\", selectedStreet);\r",
													"pm.variables.set(\"number\", selectedNumber);\r",
													"pm.variables.set(\"complement\", selectedComplement);\r",
													"pm.variables.set(\"district\", selectedDistrict);\r",
													"\r",
													"// cidades (somente letras, com caracteres especiais permitidos, até 50 caracteres)\r",
													"const cities = [\r",
													"  \"São Paulo\", \"Rio de Janeiro\", \"Belo Horizonte\", \"Curitiba\", \"Salvador\",\r",
													"  \"Fortaleza\", \"Brasília\", \"Porto Alegre\", \"Florianópolis\", \"Goiânia\",\r",
													"  \"Campinas\", \"Natal\", \"Recife\", \"Manaus\", \"Belém\",\r",
													"  \"São Luís\", \"Campo Grande\", \"Vitória\", \"Maceió\"\r",
													"];\r",
													"\r",
													"// estados (apenas letras, com 2 caracteres obrigatórios - sigla)\r",
													"const states = [\r",
													"  \"SP\", \"RJ\", \"MG\", \"PR\", \"BA\", \"CE\", \"DF\", \"RS\", \"SC\", \"GO\",\r",
													"  \"PA\", \"PE\", \"AM\", \"MA\", \"RN\", \"AL\", \"MS\", \"ES\", \"PB\"\r",
													"];\r",
													"\r",
													"// países (somente letras, até 50 caracteres)\r",
													"const countries = [\r",
													"  \"Brasil\", \"Argentina\", \"Portugal\", \"México\", \"Espanha\",\r",
													"  \"Chile\", \"Uruguai\", \"Peru\", \"Colômbia\", \"Canadá\",\r",
													"  \"França\", \"Itália\", \"Alemanha\", \"Suíça\", \"Japão\",\r",
													"  \"Coreia\", \"Austrália\", \"Noruega\", \"Dinamarca\"\r",
													"];\r",
													"\r",
													"// CEPs válidos com máscara (somente números, no formato #####-###)\r",
													"const postalCodes = [\r",
													"  \"01001000\", \"20010001\", \"30110012\", \"80020000\", \"40010903\", \"60110000\", \"70040010\", \"90010000\", \"88010200\", \"74000001\",\r",
													"  \"13010000\", \"59010000\", \"50010902\", \"69010020\", \"66010080\", \"65010100\", \"79002123\", \"29010200\", \"57010000\"\r",
													"];\r",
													"\r",
													"const selectedCity = cities[Math.floor(Math.random() * cities.length)];\r",
													"const selectedState = states[Math.floor(Math.random() * states.length)];\r",
													"const selectedCountry = countries[Math.floor(Math.random() * countries.length)];\r",
													"const selectedPostalCode = postalCodes[Math.floor(Math.random() * postalCodes.length)];\r",
													"\r",
													"pm.variables.set(\"city\", selectedCity);\r",
													"pm.variables.set(\"state\", selectedState);\r",
													"pm.variables.set(\"country\", selectedCountry);\r",
													"pm.variables.set(\"postalCode\", selectedPostalCode);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code é 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													" \r",
													"pm.test(\"Erro de validação\", () => {\r",
													"       pm.expect(pm.response.json().error).to.be.an('array');\r",
													"    pm.expect(pm.response.json().error).to.include(\"O campo 'bairro' só pode conter letras, números e os caracteres especiais 'ª', 'º', '‘' e '-'\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"corporateName\": \"{{corporateName}}\",\r\n  \"registerCompany\": \"{{registerCompany}}\",\r\n  \"mail\": \"{{mail}}\",\r\n  \"matriz\": \"{{matriz}}\",\r\n  \"responsibleContact\": \"{{responsibleContact}}\",\r\n  \"telephone\": \"{{telephone}}\",\r\n  \"serviceDescription\": \"{{serviceDescription}}\",\r\n  \"address\": [\r\n    {\r\n      \"zipCode\": \"{{postalCode}}\",\r\n      \"city\": \"{{city}}\",\r\n      \"state\": \"{{state}}\",\r\n      \"district\": \"Centro@123\",\r\n      \"street\": \"{{street}}\",\r\n      \"number\": \"{{number}}\",\r\n      \"complement\": \"{{complement}}\",\r\n      \"country\": \"{{country}}\"\r\n    }\r\n  ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/company",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"company"
											]
										}
									},
									"response": []
								},
								{
									"name": "Campo Bairro em branco",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Array com valores diferentes para \"Razão Social\"\r",
													"const corporateNames = [\"Camila Santos company\", \"TechNova Ltda\", \"Alfa Beta Corp\", \"Zeta Solutions\", \"InovaServiços\", \"Empresa Exemplo 001\", \"Startup do Bem\", \"GlobalTrade BR\", \"Serviços Rápidos\", \"MaxTI Soluções\", \"Empresa do Norte\", \"Consultoria XP\", \"AutoMarket Brasil\", \"CloudX Serviços\", \"FutureWave Ltda\", \"Rede Smart Business\", \"DevGroup Solutions\", \"HighData Inc\", \"Infinity Tech BR\"];\r",
													"\r",
													"// Seleciona um nome aleatório\r",
													"const selectedCorporateName = corporateNames[Math.floor(Math.random() * corporateNames.length)];\r",
													"\r",
													"// Define como variável para reutilizar\r",
													"pm.variables.set(\"corporateName\", selectedCorporateName);\r",
													"\r",
													"// Array com CNPJs fictícios válidos (sem máscara, como esperado no backend)\r",
													"const registerCompanies = [\r",
													"  \"12345678000195\", \"98765432000109\", \"11222333000181\", \"99887766000144\",\r",
													"  \"55667788000122\", \"33445566000177\", \"10203040000166\", \"11223344000100\",\r",
													"  \"66778899000188\", \"12312312300012\", \"44112233000155\", \"55443322000133\",\r",
													"  \"77665544000177\", \"88990011000100\", \"10111213000122\", \"15161718000190\",\r",
													"  \"19202122000101\", \"24252627000144\", \"28293031000188\"\r",
													"];\r",
													"\r",
													"// Seleciona um CNPJ aleatório\r",
													"const selectedCNPJ = registerCompanies[Math.floor(Math.random() * registerCompanies.length)];\r",
													"\r",
													"// Define como variável reutilizável\r",
													"pm.variables.set(\"registerCompany\", selectedCNPJ);\r",
													"\r",
													"\r",
													"// Array com e-mails válidos e variados\r",
													"const companyMails = [\r",
													"  \"empresa01@empresa.com.br\", \"contato@techsolucoes.com\", \"suporte@alfa.com.br\", \"info@betacorp.io\",\r",
													"  \"vendas@exemplo.org\", \"atendimento@cloudx.com\", \"diretoria@startupltda.com\", \"camila.santos@empresa.com\",\r",
													"  \"admin@inovabr.com\", \"noreply@negocios.com\", \"helpdesk@redesmart.com\", \"contato@consultoriaxp.com\",\r",
													"  \"rh@futurewave.com.br\", \"sac@automarket.com\", \"financeiro@globaltrade.com.br\", \"ti@highdata.org\",\r",
													"  \"comercial@maxsolucoes.com\", \"equipe@servicosbr.net\", \"gerencia@empresaxpto.com\"\r",
													"];\r",
													"\r",
													"// Seleciona um e-mail aleatório\r",
													"const selectedMail = companyMails[Math.floor(Math.random() * companyMails.length)];\r",
													"\r",
													"// Define como variável reutilizável\r",
													"pm.variables.set(\"mail\", selectedMail);\r",
													"\r",
													"// nomes fantasia diferentes (matriz)\r",
													"const matrizNames = [\r",
													"  \"Nuvem Computing\", \"Alpha Sistemas\", \"BetaTech\", \"ZetaCorp\", \"Smart Solutions\",\r",
													"  \"InovaTech\", \"TI Pro Business\", \"CloudWave\", \"MaxData\", \"DataSafe\",\r",
													"  \"NextGen Tech\", \"ServTI Brasil\", \"Grupo Digital\", \"NeoInfra\", \"SoftMind\",\r",
													"  \"Connect Plus\", \"FusionTI\", \"GlobalNet\", \"CyberWave\"\r",
													"];\r",
													"\r",
													"// descrições de serviços/negócio\r",
													"const serviceDescriptions = [\r",
													"  \"Desenvolvimento Personalizado\", \"Consultoria em TI\", \"Soluções em Nuvem\", \"Infraestrutura de Redes\",\r",
													"  \"Automação Comercial\", \"Plataformas Digitais\", \"Serviços de Hosting\", \"Suporte Técnico Especializado\",\r",
													"  \"Análise de Dados\", \"Desenvolvimento Web\", \"Sistemas Empresariais\", \"Segurança da Informação\",\r",
													"  \"Treinamento Corporativo\", \"Integração de Sistemas\", \"Consultoria Ágil\", \"Migração para Nuvem\",\r",
													"  \"Gestão de TI\", \"Gerenciamento de Servidores\", \"Tecnologia Educacional\"\r",
													"];\r",
													"\r",
													"// Seleção aleatória\r",
													"const selectedMatrizName = matrizNames[Math.floor(Math.random() * matrizNames.length)];\r",
													"const selectedServiceDesc = serviceDescriptions[Math.floor(Math.random() * serviceDescriptions.length)];\r",
													"\r",
													"// Armazenar como variáveis para uso no body\r",
													"pm.variables.set(\"matriz\", selectedMatrizName);\r",
													"pm.variables.set(\"serviceDescription\", selectedServiceDesc);\r",
													"\r",
													"// nomes compostos (apenas letras, com ao menos duas palavras)\r",
													"const responsibleContacts = [\r",
													"  \"Camila Santos\", \"João Pedro\", \"Ana Beatriz\", \"Carlos Eduardo\", \"Fernanda Lima\",\r",
													"  \"Rafael Borges\", \"Juliana Costa\", \"Marcelo Henrique\", \"Bruna Silva\", \"Felipe Oliveira\",\r",
													"  \"Daniela Marques\", \"Luana Ferreira\", \"Ricardo Matos\", \"Patrícia Andrade\", \"Gabriel Souza\",\r",
													"  \"Larissa Cunha\", \"Renato Castro\", \"Amanda Prado\", \"Lucas Almeida\"\r",
													"];\r",
													"\r",
													"// telefones brasileiros com máscara (máx. 15 caracteres)\r",
													"const telephones = [\r",
													"  \"11981123456789\", \"21982234567890\", \"31983345678901\", \"41984456789012\", \"51985567890123\", \"61986678901234\", \"71987789012345\", \"81988890123456\", \"91989901234567\", \"31997345671234\", \"51991567896789\", \"11992112234455\", \"21994556678899\", \"61995667789900\", \"71996778890011\", \"41998889901122\", \"81999990012233\", \"91980101123344\", \"11987111223333\"\r",
													"];\r",
													"\r",
													"// Seleção aleatória\r",
													"const selectedContact = responsibleContacts[Math.floor(Math.random() * responsibleContacts.length)];\r",
													"const selectedPhone = telephones[Math.floor(Math.random() * telephones.length)];\r",
													"\r",
													"// Setar variáveis\r",
													"pm.variables.set(\"responsibleContact\", selectedContact);\r",
													"pm.variables.set(\"telephone\", selectedPhone);\r",
													"\r",
													"// logradouros (alfanuméricos, até 50 caracteres, com caracteres especiais permitidos)\r",
													"const streets = [\r",
													"  \"Rua das Palmeiras\", \"Av. Brasil\", \"Rua 1ª de Maio\", \"Travessa do Comércio\", \"Alameda das Águias\",\r",
													"  \"Rua São João\", \"Av. Getúlio Vargas\", \"Rua dos Lírios\", \"Rua Coronel 2º Batista\", \"Rua Alfredo 'Silva'\",\r",
													"  \"Estrada do Sol\", \"Rua João 1º Neto\", \"Rua Principal - Leste\", \"Rua Vitória-Régia\", \"Alameda 5ª Norte\",\r",
													"  \"Praça Central\", \"Rua Júlio de Castro\", \"Rua Dr. Carlos 1º Martins\", \"Rua Dom Pedro II\"\r",
													"];\r",
													"\r",
													"// números (apenas dígitos, até 10 caracteres)\r",
													"const numbers = [\r",
													"  \"1010000000\", \"2020000000\", \"3030000000\", \"4040000000\", \"5050000000\", \"6060000000\", \"7070000000\", \"8080000000\", \"9090000000\", \"1001000000\",\r",
													"  \"1102000000\", \"1203000000\", \"1304000000\", \"1405000000\", \"1506000000\", \"1607000000\", \"1708000000\", \"1809000000\", \"1900000000\"\r",
													"];\r",
													"\r",
													"// complementos (alfanuméricos, com especiais permitidos, até 80 caracteres)\r",
													"const complements = [\r",
													"  \"Fundos\", \"Casa 1\", \"Apto 202\", \"Bloco B\", \"Sala 3\", \"Cobertura\", \"Térreo\", \"Galpão 2\", \"Loja 'A'\", \"Anexo 1\",\r",
													"  \"Ed. Central\", \"Torre Sul\", \"Prédio 1º\", \"Sobreloja\", \"Loja B\", \"Sala Comercial 7\", \"2º Andar\", \"Área 3\", \"Estacionamento\"\r",
													"];\r",
													"\r",
													"// bairros (alfanuméricos com especiais permitidos, até 50 caracteres)\r",
													"const districts = [\r",
													"  \"Centro\", \"Jardim das Flores\", \"Vila Nova\", \"Parque 1ª Esperança\", \"Bairro Alto\",\r",
													"  \"Residencial Alfa\", \"Jardim São João\", \"Nova 'Vida'\", \"Lagoa Azul\", \"Industrial Oeste\",\r",
													"  \"Bairro Santo André\", \"Vila Mariana\", \"Parque das Árvores\", \"Santa Luzia\", \"Água Verde\",\r",
													"  \"Vila Operária\", \"Jardim Central\", \"Colinas do Sol\", \"Residencial Leste\"\r",
													"];\r",
													"\r",
													"// Seleciona valores aleatórios\r",
													"const selectedStreet = streets[Math.floor(Math.random() * streets.length)];\r",
													"const selectedNumber = numbers[Math.floor(Math.random() * numbers.length)];\r",
													"const selectedComplement = complements[Math.floor(Math.random() * complements.length)];\r",
													"const selectedDistrict = districts[Math.floor(Math.random() * districts.length)];\r",
													"\r",
													"pm.variables.set(\"street\", selectedStreet);\r",
													"pm.variables.set(\"number\", selectedNumber);\r",
													"pm.variables.set(\"complement\", selectedComplement);\r",
													"pm.variables.set(\"district\", selectedDistrict);\r",
													"\r",
													"// cidades (somente letras, com caracteres especiais permitidos, até 50 caracteres)\r",
													"const cities = [\r",
													"  \"São Paulo\", \"Rio de Janeiro\", \"Belo Horizonte\", \"Curitiba\", \"Salvador\",\r",
													"  \"Fortaleza\", \"Brasília\", \"Porto Alegre\", \"Florianópolis\", \"Goiânia\",\r",
													"  \"Campinas\", \"Natal\", \"Recife\", \"Manaus\", \"Belém\",\r",
													"  \"São Luís\", \"Campo Grande\", \"Vitória\", \"Maceió\"\r",
													"];\r",
													"\r",
													"// estados (apenas letras, com 2 caracteres obrigatórios - sigla)\r",
													"const states = [\r",
													"  \"SP\", \"RJ\", \"MG\", \"PR\", \"BA\", \"CE\", \"DF\", \"RS\", \"SC\", \"GO\",\r",
													"  \"PA\", \"PE\", \"AM\", \"MA\", \"RN\", \"AL\", \"MS\", \"ES\", \"PB\"\r",
													"];\r",
													"\r",
													"// países (somente letras, até 50 caracteres)\r",
													"const countries = [\r",
													"  \"Brasil\", \"Argentina\", \"Portugal\", \"México\", \"Espanha\",\r",
													"  \"Chile\", \"Uruguai\", \"Peru\", \"Colômbia\", \"Canadá\",\r",
													"  \"França\", \"Itália\", \"Alemanha\", \"Suíça\", \"Japão\",\r",
													"  \"Coreia\", \"Austrália\", \"Noruega\", \"Dinamarca\"\r",
													"];\r",
													"\r",
													"// CEPs válidos com máscara (somente números, no formato #####-###)\r",
													"const postalCodes = [\r",
													"  \"01001000\", \"20010001\", \"30110012\", \"80020000\", \"40010903\", \"60110000\", \"70040010\", \"90010000\", \"88010200\", \"74000001\",\r",
													"  \"13010000\", \"59010000\", \"50010902\", \"69010020\", \"66010080\", \"65010100\", \"79002123\", \"29010200\", \"57010000\"\r",
													"];\r",
													"\r",
													"const selectedCity = cities[Math.floor(Math.random() * cities.length)];\r",
													"const selectedState = states[Math.floor(Math.random() * states.length)];\r",
													"const selectedCountry = countries[Math.floor(Math.random() * countries.length)];\r",
													"const selectedPostalCode = postalCodes[Math.floor(Math.random() * postalCodes.length)];\r",
													"\r",
													"pm.variables.set(\"city\", selectedCity);\r",
													"pm.variables.set(\"state\", selectedState);\r",
													"pm.variables.set(\"country\", selectedCountry);\r",
													"pm.variables.set(\"postalCode\", selectedPostalCode);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code é 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													" \r",
													"pm.test(\"Erro de validação\", () => {\r",
													"       pm.expect(pm.response.json().error).to.be.an('array');\r",
													"    pm.expect(pm.response.json().error).to.include(\"O campo 'bairro' só pode conter letras, números e os caracteres especiais 'ª', 'º', '‘' e '-'\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"corporateName\": \"{{corporateName}}\",\r\n    \"registerCompany\": \"{{registerCompany}}\",\r\n    \"mail\": \"{{mail}}\",\r\n    \"matriz\": \"{{matriz}}\",\r\n    \"responsibleContact\": \"{{responsibleContact}}\",\r\n    \"telephone\": \"{{telephone}}\",\r\n    \"serviceDescription\": \"{{serviceDescription}}\",\r\n    \"address\": [\r\n        {\r\n            \"zipCode\": \"{{postalCode}}\",\r\n            \"city\": \"{{city}}\",\r\n            \"state\": \"{{state}}\",\r\n            \"district\": \"\",\r\n            \"street\": \"{{street}}\",\r\n            \"number\": \"{{number}}\",\r\n            \"complement\": \"{{complement}}\",\r\n            \"country\": \"{{country}}\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/company",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"company"
											]
										}
									},
									"response": []
								},
								{
									"name": "Bairro com mais de 50 caracteres",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Array com valores diferentes para \"Razão Social\"\r",
													"const corporateNames = [\"Camila Santos company\", \"TechNova Ltda\", \"Alfa Beta Corp\", \"Zeta Solutions\", \"InovaServiços\", \"Empresa Exemplo 001\", \"Startup do Bem\", \"GlobalTrade BR\", \"Serviços Rápidos\", \"MaxTI Soluções\", \"Empresa do Norte\", \"Consultoria XP\", \"AutoMarket Brasil\", \"CloudX Serviços\", \"FutureWave Ltda\", \"Rede Smart Business\", \"DevGroup Solutions\", \"HighData Inc\", \"Infinity Tech BR\"];\r",
													"\r",
													"// Seleciona um nome aleatório\r",
													"const selectedCorporateName = corporateNames[Math.floor(Math.random() * corporateNames.length)];\r",
													"\r",
													"// Define como variável para reutilizar\r",
													"pm.variables.set(\"corporateName\", selectedCorporateName);\r",
													"\r",
													"// Array com CNPJs fictícios válidos (sem máscara, como esperado no backend)\r",
													"const registerCompanies = [\r",
													"  \"12345678000195\", \"98765432000109\", \"11222333000181\", \"99887766000144\",\r",
													"  \"55667788000122\", \"33445566000177\", \"10203040000166\", \"11223344000100\",\r",
													"  \"66778899000188\", \"12312312300012\", \"44112233000155\", \"55443322000133\",\r",
													"  \"77665544000177\", \"88990011000100\", \"10111213000122\", \"15161718000190\",\r",
													"  \"19202122000101\", \"24252627000144\", \"28293031000188\"\r",
													"];\r",
													"\r",
													"// Seleciona um CNPJ aleatório\r",
													"const selectedCNPJ = registerCompanies[Math.floor(Math.random() * registerCompanies.length)];\r",
													"\r",
													"// Define como variável reutilizável\r",
													"pm.variables.set(\"registerCompany\", selectedCNPJ);\r",
													"\r",
													"\r",
													"// Array com e-mails válidos e variados\r",
													"const companyMails = [\r",
													"  \"empresa01@empresa.com.br\", \"contato@techsolucoes.com\", \"suporte@alfa.com.br\", \"info@betacorp.io\",\r",
													"  \"vendas@exemplo.org\", \"atendimento@cloudx.com\", \"diretoria@startupltda.com\", \"camila.santos@empresa.com\",\r",
													"  \"admin@inovabr.com\", \"noreply@negocios.com\", \"helpdesk@redesmart.com\", \"contato@consultoriaxp.com\",\r",
													"  \"rh@futurewave.com.br\", \"sac@automarket.com\", \"financeiro@globaltrade.com.br\", \"ti@highdata.org\",\r",
													"  \"comercial@maxsolucoes.com\", \"equipe@servicosbr.net\", \"gerencia@empresaxpto.com\"\r",
													"];\r",
													"\r",
													"// Seleciona um e-mail aleatório\r",
													"const selectedMail = companyMails[Math.floor(Math.random() * companyMails.length)];\r",
													"\r",
													"// Define como variável reutilizável\r",
													"pm.variables.set(\"mail\", selectedMail);\r",
													"\r",
													"// nomes fantasia diferentes (matriz)\r",
													"const matrizNames = [\r",
													"  \"Nuvem Computing\", \"Alpha Sistemas\", \"BetaTech\", \"ZetaCorp\", \"Smart Solutions\",\r",
													"  \"InovaTech\", \"TI Pro Business\", \"CloudWave\", \"MaxData\", \"DataSafe\",\r",
													"  \"NextGen Tech\", \"ServTI Brasil\", \"Grupo Digital\", \"NeoInfra\", \"SoftMind\",\r",
													"  \"Connect Plus\", \"FusionTI\", \"GlobalNet\", \"CyberWave\"\r",
													"];\r",
													"\r",
													"// descrições de serviços/negócio\r",
													"const serviceDescriptions = [\r",
													"  \"Desenvolvimento Personalizado\", \"Consultoria em TI\", \"Soluções em Nuvem\", \"Infraestrutura de Redes\",\r",
													"  \"Automação Comercial\", \"Plataformas Digitais\", \"Serviços de Hosting\", \"Suporte Técnico Especializado\",\r",
													"  \"Análise de Dados\", \"Desenvolvimento Web\", \"Sistemas Empresariais\", \"Segurança da Informação\",\r",
													"  \"Treinamento Corporativo\", \"Integração de Sistemas\", \"Consultoria Ágil\", \"Migração para Nuvem\",\r",
													"  \"Gestão de TI\", \"Gerenciamento de Servidores\", \"Tecnologia Educacional\"\r",
													"];\r",
													"\r",
													"// Seleção aleatória\r",
													"const selectedMatrizName = matrizNames[Math.floor(Math.random() * matrizNames.length)];\r",
													"const selectedServiceDesc = serviceDescriptions[Math.floor(Math.random() * serviceDescriptions.length)];\r",
													"\r",
													"// Armazenar como variáveis para uso no body\r",
													"pm.variables.set(\"matriz\", selectedMatrizName);\r",
													"pm.variables.set(\"serviceDescription\", selectedServiceDesc);\r",
													"\r",
													"// nomes compostos (apenas letras, com ao menos duas palavras)\r",
													"const responsibleContacts = [\r",
													"  \"Camila Santos\", \"João Pedro\", \"Ana Beatriz\", \"Carlos Eduardo\", \"Fernanda Lima\",\r",
													"  \"Rafael Borges\", \"Juliana Costa\", \"Marcelo Henrique\", \"Bruna Silva\", \"Felipe Oliveira\",\r",
													"  \"Daniela Marques\", \"Luana Ferreira\", \"Ricardo Matos\", \"Patrícia Andrade\", \"Gabriel Souza\",\r",
													"  \"Larissa Cunha\", \"Renato Castro\", \"Amanda Prado\", \"Lucas Almeida\"\r",
													"];\r",
													"\r",
													"// telefones brasileiros com máscara (máx. 15 caracteres)\r",
													"const telephones = [\r",
													"  \"11981123456789\", \"21982234567890\", \"31983345678901\", \"41984456789012\", \"51985567890123\", \"61986678901234\", \"71987789012345\", \"81988890123456\", \"91989901234567\", \"31997345671234\", \"51991567896789\", \"11992112234455\", \"21994556678899\", \"61995667789900\", \"71996778890011\", \"41998889901122\", \"81999990012233\", \"91980101123344\", \"11987111223333\"\r",
													"];\r",
													"\r",
													"// Seleção aleatória\r",
													"const selectedContact = responsibleContacts[Math.floor(Math.random() * responsibleContacts.length)];\r",
													"const selectedPhone = telephones[Math.floor(Math.random() * telephones.length)];\r",
													"\r",
													"// Setar variáveis\r",
													"pm.variables.set(\"responsibleContact\", selectedContact);\r",
													"pm.variables.set(\"telephone\", selectedPhone);\r",
													"\r",
													"// logradouros (alfanuméricos, até 50 caracteres, com caracteres especiais permitidos)\r",
													"const streets = [\r",
													"  \"Rua das Palmeiras\", \"Av. Brasil\", \"Rua 1ª de Maio\", \"Travessa do Comércio\", \"Alameda das Águias\",\r",
													"  \"Rua São João\", \"Av. Getúlio Vargas\", \"Rua dos Lírios\", \"Rua Coronel 2º Batista\", \"Rua Alfredo 'Silva'\",\r",
													"  \"Estrada do Sol\", \"Rua João 1º Neto\", \"Rua Principal - Leste\", \"Rua Vitória-Régia\", \"Alameda 5ª Norte\",\r",
													"  \"Praça Central\", \"Rua Júlio de Castro\", \"Rua Dr. Carlos 1º Martins\", \"Rua Dom Pedro II\"\r",
													"];\r",
													"\r",
													"// números (apenas dígitos, até 10 caracteres)\r",
													"const numbers = [\r",
													"  \"1010000000\", \"2020000000\", \"3030000000\", \"4040000000\", \"5050000000\", \"6060000000\", \"7070000000\", \"8080000000\", \"9090000000\", \"1001000000\",\r",
													"  \"1102000000\", \"1203000000\", \"1304000000\", \"1405000000\", \"1506000000\", \"1607000000\", \"1708000000\", \"1809000000\", \"1900000000\"\r",
													"];\r",
													"\r",
													"// complementos (alfanuméricos, com especiais permitidos, até 80 caracteres)\r",
													"const complements = [\r",
													"  \"Fundos\", \"Casa 1\", \"Apto 202\", \"Bloco B\", \"Sala 3\", \"Cobertura\", \"Térreo\", \"Galpão 2\", \"Loja 'A'\", \"Anexo 1\",\r",
													"  \"Ed. Central\", \"Torre Sul\", \"Prédio 1º\", \"Sobreloja\", \"Loja B\", \"Sala Comercial 7\", \"2º Andar\", \"Área 3\", \"Estacionamento\"\r",
													"];\r",
													"\r",
													"// bairros (alfanuméricos com especiais permitidos, até 50 caracteres)\r",
													"const districts = [\r",
													"  \"Centro\", \"Jardim das Flores\", \"Vila Nova\", \"Parque 1ª Esperança\", \"Bairro Alto\",\r",
													"  \"Residencial Alfa\", \"Jardim São João\", \"Nova 'Vida'\", \"Lagoa Azul\", \"Industrial Oeste\",\r",
													"  \"Bairro Santo André\", \"Vila Mariana\", \"Parque das Árvores\", \"Santa Luzia\", \"Água Verde\",\r",
													"  \"Vila Operária\", \"Jardim Central\", \"Colinas do Sol\", \"Residencial Leste\"\r",
													"];\r",
													"\r",
													"// Seleciona valores aleatórios\r",
													"const selectedStreet = streets[Math.floor(Math.random() * streets.length)];\r",
													"const selectedNumber = numbers[Math.floor(Math.random() * numbers.length)];\r",
													"const selectedComplement = complements[Math.floor(Math.random() * complements.length)];\r",
													"const selectedDistrict = districts[Math.floor(Math.random() * districts.length)];\r",
													"\r",
													"pm.variables.set(\"street\", selectedStreet);\r",
													"pm.variables.set(\"number\", selectedNumber);\r",
													"pm.variables.set(\"complement\", selectedComplement);\r",
													"pm.variables.set(\"district\", selectedDistrict);\r",
													"\r",
													"// cidades (somente letras, com caracteres especiais permitidos, até 50 caracteres)\r",
													"const cities = [\r",
													"  \"São Paulo\", \"Rio de Janeiro\", \"Belo Horizonte\", \"Curitiba\", \"Salvador\",\r",
													"  \"Fortaleza\", \"Brasília\", \"Porto Alegre\", \"Florianópolis\", \"Goiânia\",\r",
													"  \"Campinas\", \"Natal\", \"Recife\", \"Manaus\", \"Belém\",\r",
													"  \"São Luís\", \"Campo Grande\", \"Vitória\", \"Maceió\"\r",
													"];\r",
													"\r",
													"// estados (apenas letras, com 2 caracteres obrigatórios - sigla)\r",
													"const states = [\r",
													"  \"SP\", \"RJ\", \"MG\", \"PR\", \"BA\", \"CE\", \"DF\", \"RS\", \"SC\", \"GO\",\r",
													"  \"PA\", \"PE\", \"AM\", \"MA\", \"RN\", \"AL\", \"MS\", \"ES\", \"PB\"\r",
													"];\r",
													"\r",
													"// países (somente letras, até 50 caracteres)\r",
													"const countries = [\r",
													"  \"Brasil\", \"Argentina\", \"Portugal\", \"México\", \"Espanha\",\r",
													"  \"Chile\", \"Uruguai\", \"Peru\", \"Colômbia\", \"Canadá\",\r",
													"  \"França\", \"Itália\", \"Alemanha\", \"Suíça\", \"Japão\",\r",
													"  \"Coreia\", \"Austrália\", \"Noruega\", \"Dinamarca\"\r",
													"];\r",
													"\r",
													"// CEPs válidos com máscara (somente números, no formato #####-###)\r",
													"const postalCodes = [\r",
													"  \"01001000\", \"20010001\", \"30110012\", \"80020000\", \"40010903\", \"60110000\", \"70040010\", \"90010000\", \"88010200\", \"74000001\",\r",
													"  \"13010000\", \"59010000\", \"50010902\", \"69010020\", \"66010080\", \"65010100\", \"79002123\", \"29010200\", \"57010000\"\r",
													"];\r",
													"\r",
													"const selectedCity = cities[Math.floor(Math.random() * cities.length)];\r",
													"const selectedState = states[Math.floor(Math.random() * states.length)];\r",
													"const selectedCountry = countries[Math.floor(Math.random() * countries.length)];\r",
													"const selectedPostalCode = postalCodes[Math.floor(Math.random() * postalCodes.length)];\r",
													"\r",
													"pm.variables.set(\"city\", selectedCity);\r",
													"pm.variables.set(\"state\", selectedState);\r",
													"pm.variables.set(\"country\", selectedCountry);\r",
													"pm.variables.set(\"postalCode\", selectedPostalCode);"
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code é 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													" \r",
													"pm.test(\"Erro de validação\", () => {\r",
													"       pm.expect(pm.response.json().error).to.be.an('array');\r",
													"    pm.expect(pm.response.json().error).to.include(\"O campo 'bairro' deve possuir no máximo 50 caracteres.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"corporateName\": \"{{corporateName}}\",\r\n    \"registerCompany\": \"{{registerCompany}}\",\r\n    \"mail\": \"{{mail}}\",\r\n    \"matriz\": \"{{matriz}}\",\r\n    \"responsibleContact\": \"{{responsibleContact}}\",\r\n    \"telephone\": \"{{telephone}}\",\r\n    \"serviceDescription\": \"{{serviceDescription}}\",\r\n    \"address\": [\r\n        {\r\n            \"zipCode\": \"{{postalCode}}\",\r\n            \"city\": \"{{city}}\",\r\n            \"state\": \"{{state}}\",\r\n            \"district\": \"qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbn\",\r\n            \"street\": \"{{street}}\",\r\n            \"number\": \"{{number}}\",\r\n            \"complement\": \"{{complement}}\",\r\n            \"country\": \"{{country}}\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/company",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"company"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Cidade",
							"item": [
								{
									"name": "Campo Cidade vazio",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Array com valores diferentes para \"Razão Social\"\r",
													"const corporateNames = [\"Camila Santos company\", \"TechNova Ltda\", \"Alfa Beta Corp\", \"Zeta Solutions\", \"InovaServiços\", \"Empresa Exemplo 001\", \"Startup do Bem\", \"GlobalTrade BR\", \"Serviços Rápidos\", \"MaxTI Soluções\", \"Empresa do Norte\", \"Consultoria XP\", \"AutoMarket Brasil\", \"CloudX Serviços\", \"FutureWave Ltda\", \"Rede Smart Business\", \"DevGroup Solutions\", \"HighData Inc\", \"Infinity Tech BR\"];\r",
													"\r",
													"// Seleciona um nome aleatório\r",
													"const selectedCorporateName = corporateNames[Math.floor(Math.random() * corporateNames.length)];\r",
													"\r",
													"// Define como variável para reutilizar\r",
													"pm.variables.set(\"corporateName\", selectedCorporateName);\r",
													"\r",
													"// Array com CNPJs fictícios válidos (sem máscara, como esperado no backend)\r",
													"const registerCompanies = [\r",
													"  \"12345678000195\", \"98765432000109\", \"11222333000181\", \"99887766000144\",\r",
													"  \"55667788000122\", \"33445566000177\", \"10203040000166\", \"11223344000100\",\r",
													"  \"66778899000188\", \"12312312300012\", \"44112233000155\", \"55443322000133\",\r",
													"  \"77665544000177\", \"88990011000100\", \"10111213000122\", \"15161718000190\",\r",
													"  \"19202122000101\", \"24252627000144\", \"28293031000188\"\r",
													"];\r",
													"\r",
													"// Seleciona um CNPJ aleatório\r",
													"const selectedCNPJ = registerCompanies[Math.floor(Math.random() * registerCompanies.length)];\r",
													"\r",
													"// Define como variável reutilizável\r",
													"pm.variables.set(\"registerCompany\", selectedCNPJ);\r",
													"\r",
													"\r",
													"// Array com e-mails válidos e variados\r",
													"const companyMails = [\r",
													"  \"empresa01@empresa.com.br\", \"contato@techsolucoes.com\", \"suporte@alfa.com.br\", \"info@betacorp.io\",\r",
													"  \"vendas@exemplo.org\", \"atendimento@cloudx.com\", \"diretoria@startupltda.com\", \"camila.santos@empresa.com\",\r",
													"  \"admin@inovabr.com\", \"noreply@negocios.com\", \"helpdesk@redesmart.com\", \"contato@consultoriaxp.com\",\r",
													"  \"rh@futurewave.com.br\", \"sac@automarket.com\", \"financeiro@globaltrade.com.br\", \"ti@highdata.org\",\r",
													"  \"comercial@maxsolucoes.com\", \"equipe@servicosbr.net\", \"gerencia@empresaxpto.com\"\r",
													"];\r",
													"\r",
													"// Seleciona um e-mail aleatório\r",
													"const selectedMail = companyMails[Math.floor(Math.random() * companyMails.length)];\r",
													"\r",
													"// Define como variável reutilizável\r",
													"pm.variables.set(\"mail\", selectedMail);\r",
													"\r",
													"// nomes fantasia diferentes (matriz)\r",
													"const matrizNames = [\r",
													"  \"Nuvem Computing\", \"Alpha Sistemas\", \"BetaTech\", \"ZetaCorp\", \"Smart Solutions\",\r",
													"  \"InovaTech\", \"TI Pro Business\", \"CloudWave\", \"MaxData\", \"DataSafe\",\r",
													"  \"NextGen Tech\", \"ServTI Brasil\", \"Grupo Digital\", \"NeoInfra\", \"SoftMind\",\r",
													"  \"Connect Plus\", \"FusionTI\", \"GlobalNet\", \"CyberWave\"\r",
													"];\r",
													"\r",
													"// descrições de serviços/negócio\r",
													"const serviceDescriptions = [\r",
													"  \"Desenvolvimento Personalizado\", \"Consultoria em TI\", \"Soluções em Nuvem\", \"Infraestrutura de Redes\",\r",
													"  \"Automação Comercial\", \"Plataformas Digitais\", \"Serviços de Hosting\", \"Suporte Técnico Especializado\",\r",
													"  \"Análise de Dados\", \"Desenvolvimento Web\", \"Sistemas Empresariais\", \"Segurança da Informação\",\r",
													"  \"Treinamento Corporativo\", \"Integração de Sistemas\", \"Consultoria Ágil\", \"Migração para Nuvem\",\r",
													"  \"Gestão de TI\", \"Gerenciamento de Servidores\", \"Tecnologia Educacional\"\r",
													"];\r",
													"\r",
													"// Seleção aleatória\r",
													"const selectedMatrizName = matrizNames[Math.floor(Math.random() * matrizNames.length)];\r",
													"const selectedServiceDesc = serviceDescriptions[Math.floor(Math.random() * serviceDescriptions.length)];\r",
													"\r",
													"// Armazenar como variáveis para uso no body\r",
													"pm.variables.set(\"matriz\", selectedMatrizName);\r",
													"pm.variables.set(\"serviceDescription\", selectedServiceDesc);\r",
													"\r",
													"// nomes compostos (apenas letras, com ao menos duas palavras)\r",
													"const responsibleContacts = [\r",
													"  \"Camila Santos\", \"João Pedro\", \"Ana Beatriz\", \"Carlos Eduardo\", \"Fernanda Lima\",\r",
													"  \"Rafael Borges\", \"Juliana Costa\", \"Marcelo Henrique\", \"Bruna Silva\", \"Felipe Oliveira\",\r",
													"  \"Daniela Marques\", \"Luana Ferreira\", \"Ricardo Matos\", \"Patrícia Andrade\", \"Gabriel Souza\",\r",
													"  \"Larissa Cunha\", \"Renato Castro\", \"Amanda Prado\", \"Lucas Almeida\"\r",
													"];\r",
													"\r",
													"// telefones brasileiros com máscara (máx. 15 caracteres)\r",
													"const telephones = [\r",
													"  \"11981123456789\", \"21982234567890\", \"31983345678901\", \"41984456789012\", \"51985567890123\", \"61986678901234\", \"71987789012345\", \"81988890123456\", \"91989901234567\", \"31997345671234\", \"51991567896789\", \"11992112234455\", \"21994556678899\", \"61995667789900\", \"71996778890011\", \"41998889901122\", \"81999990012233\", \"91980101123344\", \"11987111223333\"\r",
													"];\r",
													"\r",
													"// Seleção aleatória\r",
													"const selectedContact = responsibleContacts[Math.floor(Math.random() * responsibleContacts.length)];\r",
													"const selectedPhone = telephones[Math.floor(Math.random() * telephones.length)];\r",
													"\r",
													"// Setar variáveis\r",
													"pm.variables.set(\"responsibleContact\", selectedContact);\r",
													"pm.variables.set(\"telephone\", selectedPhone);\r",
													"\r",
													"// logradouros (alfanuméricos, até 50 caracteres, com caracteres especiais permitidos)\r",
													"const streets = [\r",
													"  \"Rua das Palmeiras\", \"Av. Brasil\", \"Rua 1ª de Maio\", \"Travessa do Comércio\", \"Alameda das Águias\",\r",
													"  \"Rua São João\", \"Av. Getúlio Vargas\", \"Rua dos Lírios\", \"Rua Coronel 2º Batista\", \"Rua Alfredo 'Silva'\",\r",
													"  \"Estrada do Sol\", \"Rua João 1º Neto\", \"Rua Principal - Leste\", \"Rua Vitória-Régia\", \"Alameda 5ª Norte\",\r",
													"  \"Praça Central\", \"Rua Júlio de Castro\", \"Rua Dr. Carlos 1º Martins\", \"Rua Dom Pedro II\"\r",
													"];\r",
													"\r",
													"// números (apenas dígitos, até 10 caracteres)\r",
													"const numbers = [\r",
													"  \"1010000000\", \"2020000000\", \"3030000000\", \"4040000000\", \"5050000000\", \"6060000000\", \"7070000000\", \"8080000000\", \"9090000000\", \"1001000000\",\r",
													"  \"1102000000\", \"1203000000\", \"1304000000\", \"1405000000\", \"1506000000\", \"1607000000\", \"1708000000\", \"1809000000\", \"1900000000\"\r",
													"];\r",
													"\r",
													"// complementos (alfanuméricos, com especiais permitidos, até 80 caracteres)\r",
													"const complements = [\r",
													"  \"Fundos\", \"Casa 1\", \"Apto 202\", \"Bloco B\", \"Sala 3\", \"Cobertura\", \"Térreo\", \"Galpão 2\", \"Loja 'A'\", \"Anexo 1\",\r",
													"  \"Ed. Central\", \"Torre Sul\", \"Prédio 1º\", \"Sobreloja\", \"Loja B\", \"Sala Comercial 7\", \"2º Andar\", \"Área 3\", \"Estacionamento\"\r",
													"];\r",
													"\r",
													"// bairros (alfanuméricos com especiais permitidos, até 50 caracteres)\r",
													"const districts = [\r",
													"  \"Centro\", \"Jardim das Flores\", \"Vila Nova\", \"Parque 1ª Esperança\", \"Bairro Alto\",\r",
													"  \"Residencial Alfa\", \"Jardim São João\", \"Nova 'Vida'\", \"Lagoa Azul\", \"Industrial Oeste\",\r",
													"  \"Bairro Santo André\", \"Vila Mariana\", \"Parque das Árvores\", \"Santa Luzia\", \"Água Verde\",\r",
													"  \"Vila Operária\", \"Jardim Central\", \"Colinas do Sol\", \"Residencial Leste\"\r",
													"];\r",
													"\r",
													"// Seleciona valores aleatórios\r",
													"const selectedStreet = streets[Math.floor(Math.random() * streets.length)];\r",
													"const selectedNumber = numbers[Math.floor(Math.random() * numbers.length)];\r",
													"const selectedComplement = complements[Math.floor(Math.random() * complements.length)];\r",
													"const selectedDistrict = districts[Math.floor(Math.random() * districts.length)];\r",
													"\r",
													"pm.variables.set(\"street\", selectedStreet);\r",
													"pm.variables.set(\"number\", selectedNumber);\r",
													"pm.variables.set(\"complement\", selectedComplement);\r",
													"pm.variables.set(\"district\", selectedDistrict);\r",
													"\r",
													"// cidades (somente letras, com caracteres especiais permitidos, até 50 caracteres)\r",
													"const cities = [\r",
													"  \"São Paulo\", \"Rio de Janeiro\", \"Belo Horizonte\", \"Curitiba\", \"Salvador\",\r",
													"  \"Fortaleza\", \"Brasília\", \"Porto Alegre\", \"Florianópolis\", \"Goiânia\",\r",
													"  \"Campinas\", \"Natal\", \"Recife\", \"Manaus\", \"Belém\",\r",
													"  \"São Luís\", \"Campo Grande\", \"Vitória\", \"Maceió\"\r",
													"];\r",
													"\r",
													"// estados (apenas letras, com 2 caracteres obrigatórios - sigla)\r",
													"const states = [\r",
													"  \"SP\", \"RJ\", \"MG\", \"PR\", \"BA\", \"CE\", \"DF\", \"RS\", \"SC\", \"GO\",\r",
													"  \"PA\", \"PE\", \"AM\", \"MA\", \"RN\", \"AL\", \"MS\", \"ES\", \"PB\"\r",
													"];\r",
													"\r",
													"// países (somente letras, até 50 caracteres)\r",
													"const countries = [\r",
													"  \"Brasil\", \"Argentina\", \"Portugal\", \"México\", \"Espanha\",\r",
													"  \"Chile\", \"Uruguai\", \"Peru\", \"Colômbia\", \"Canadá\",\r",
													"  \"França\", \"Itália\", \"Alemanha\", \"Suíça\", \"Japão\",\r",
													"  \"Coreia\", \"Austrália\", \"Noruega\", \"Dinamarca\"\r",
													"];\r",
													"\r",
													"// CEPs válidos com máscara (somente números, no formato #####-###)\r",
													"const postalCodes = [\r",
													"  \"01001000\", \"20010001\", \"30110012\", \"80020000\", \"40010903\", \"60110000\", \"70040010\", \"90010000\", \"88010200\", \"74000001\",\r",
													"  \"13010000\", \"59010000\", \"50010902\", \"69010020\", \"66010080\", \"65010100\", \"79002123\", \"29010200\", \"57010000\"\r",
													"];\r",
													"\r",
													"const selectedCity = cities[Math.floor(Math.random() * cities.length)];\r",
													"const selectedState = states[Math.floor(Math.random() * states.length)];\r",
													"const selectedCountry = countries[Math.floor(Math.random() * countries.length)];\r",
													"const selectedPostalCode = postalCodes[Math.floor(Math.random() * postalCodes.length)];\r",
													"\r",
													"pm.variables.set(\"city\", selectedCity);\r",
													"pm.variables.set(\"state\", selectedState);\r",
													"pm.variables.set(\"country\", selectedCountry);\r",
													"pm.variables.set(\"postalCode\", selectedPostalCode);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code é 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													" \r",
													"pm.test(\"Erro de validação\", () => {\r",
													"       pm.expect(pm.response.json().error).to.be.an('array');\r",
													"    pm.expect(pm.response.json().error).to.include(\"O campo 'cidade' é obrigatório.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"corporateName\": \"{{corporateName}}\",\r\n    \"registerCompany\": \"{{registerCompany}}\",\r\n    \"mail\": \"{{mail}}\",\r\n    \"matriz\": \"{{matriz}}\",\r\n    \"responsibleContact\": \"{{responsibleContact}}\",\r\n    \"telephone\": \"{{telephone}}\",\r\n    \"serviceDescription\": \"{{serviceDescription}}\",\r\n    \"address\": [\r\n        {\r\n            \"zipCode\": \"{{postalCode}}\",\r\n            \"city\": \"\",\r\n            \"state\": \"{{state}}\",\r\n            \"district\": \"{{district}}\",\r\n            \"street\": \"{{street}}\",\r\n            \"number\": \"{{number}}\",\r\n            \"complement\": \"{{complement}}\",\r\n            \"country\": \"{{country}}\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/company",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"company"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cidade com números",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Array com valores diferentes para \"Razão Social\"\r",
													"const corporateNames = [\"Camila Santos company\", \"TechNova Ltda\", \"Alfa Beta Corp\", \"Zeta Solutions\", \"InovaServiços\", \"Empresa Exemplo 001\", \"Startup do Bem\", \"GlobalTrade BR\", \"Serviços Rápidos\", \"MaxTI Soluções\", \"Empresa do Norte\", \"Consultoria XP\", \"AutoMarket Brasil\", \"CloudX Serviços\", \"FutureWave Ltda\", \"Rede Smart Business\", \"DevGroup Solutions\", \"HighData Inc\", \"Infinity Tech BR\"];\r",
													"\r",
													"// Seleciona um nome aleatório\r",
													"const selectedCorporateName = corporateNames[Math.floor(Math.random() * corporateNames.length)];\r",
													"\r",
													"// Define como variável para reutilizar\r",
													"pm.variables.set(\"corporateName\", selectedCorporateName);\r",
													"\r",
													"// Array com CNPJs fictícios válidos (sem máscara, como esperado no backend)\r",
													"const registerCompanies = [\r",
													"  \"12345678000195\", \"98765432000109\", \"11222333000181\", \"99887766000144\",\r",
													"  \"55667788000122\", \"33445566000177\", \"10203040000166\", \"11223344000100\",\r",
													"  \"66778899000188\", \"12312312300012\", \"44112233000155\", \"55443322000133\",\r",
													"  \"77665544000177\", \"88990011000100\", \"10111213000122\", \"15161718000190\",\r",
													"  \"19202122000101\", \"24252627000144\", \"28293031000188\"\r",
													"];\r",
													"\r",
													"// Seleciona um CNPJ aleatório\r",
													"const selectedCNPJ = registerCompanies[Math.floor(Math.random() * registerCompanies.length)];\r",
													"\r",
													"// Define como variável reutilizável\r",
													"pm.variables.set(\"registerCompany\", selectedCNPJ);\r",
													"\r",
													"\r",
													"// Array com e-mails válidos e variados\r",
													"const companyMails = [\r",
													"  \"empresa01@empresa.com.br\", \"contato@techsolucoes.com\", \"suporte@alfa.com.br\", \"info@betacorp.io\",\r",
													"  \"vendas@exemplo.org\", \"atendimento@cloudx.com\", \"diretoria@startupltda.com\", \"camila.santos@empresa.com\",\r",
													"  \"admin@inovabr.com\", \"noreply@negocios.com\", \"helpdesk@redesmart.com\", \"contato@consultoriaxp.com\",\r",
													"  \"rh@futurewave.com.br\", \"sac@automarket.com\", \"financeiro@globaltrade.com.br\", \"ti@highdata.org\",\r",
													"  \"comercial@maxsolucoes.com\", \"equipe@servicosbr.net\", \"gerencia@empresaxpto.com\"\r",
													"];\r",
													"\r",
													"// Seleciona um e-mail aleatório\r",
													"const selectedMail = companyMails[Math.floor(Math.random() * companyMails.length)];\r",
													"\r",
													"// Define como variável reutilizável\r",
													"pm.variables.set(\"mail\", selectedMail);\r",
													"\r",
													"// nomes fantasia diferentes (matriz)\r",
													"const matrizNames = [\r",
													"  \"Nuvem Computing\", \"Alpha Sistemas\", \"BetaTech\", \"ZetaCorp\", \"Smart Solutions\",\r",
													"  \"InovaTech\", \"TI Pro Business\", \"CloudWave\", \"MaxData\", \"DataSafe\",\r",
													"  \"NextGen Tech\", \"ServTI Brasil\", \"Grupo Digital\", \"NeoInfra\", \"SoftMind\",\r",
													"  \"Connect Plus\", \"FusionTI\", \"GlobalNet\", \"CyberWave\"\r",
													"];\r",
													"\r",
													"// descrições de serviços/negócio\r",
													"const serviceDescriptions = [\r",
													"  \"Desenvolvimento Personalizado\", \"Consultoria em TI\", \"Soluções em Nuvem\", \"Infraestrutura de Redes\",\r",
													"  \"Automação Comercial\", \"Plataformas Digitais\", \"Serviços de Hosting\", \"Suporte Técnico Especializado\",\r",
													"  \"Análise de Dados\", \"Desenvolvimento Web\", \"Sistemas Empresariais\", \"Segurança da Informação\",\r",
													"  \"Treinamento Corporativo\", \"Integração de Sistemas\", \"Consultoria Ágil\", \"Migração para Nuvem\",\r",
													"  \"Gestão de TI\", \"Gerenciamento de Servidores\", \"Tecnologia Educacional\"\r",
													"];\r",
													"\r",
													"// Seleção aleatória\r",
													"const selectedMatrizName = matrizNames[Math.floor(Math.random() * matrizNames.length)];\r",
													"const selectedServiceDesc = serviceDescriptions[Math.floor(Math.random() * serviceDescriptions.length)];\r",
													"\r",
													"// Armazenar como variáveis para uso no body\r",
													"pm.variables.set(\"matriz\", selectedMatrizName);\r",
													"pm.variables.set(\"serviceDescription\", selectedServiceDesc);\r",
													"\r",
													"// nomes compostos (apenas letras, com ao menos duas palavras)\r",
													"const responsibleContacts = [\r",
													"  \"Camila Santos\", \"João Pedro\", \"Ana Beatriz\", \"Carlos Eduardo\", \"Fernanda Lima\",\r",
													"  \"Rafael Borges\", \"Juliana Costa\", \"Marcelo Henrique\", \"Bruna Silva\", \"Felipe Oliveira\",\r",
													"  \"Daniela Marques\", \"Luana Ferreira\", \"Ricardo Matos\", \"Patrícia Andrade\", \"Gabriel Souza\",\r",
													"  \"Larissa Cunha\", \"Renato Castro\", \"Amanda Prado\", \"Lucas Almeida\"\r",
													"];\r",
													"\r",
													"// telefones brasileiros com máscara (máx. 15 caracteres)\r",
													"const telephones = [\r",
													"  \"11981123456789\", \"21982234567890\", \"31983345678901\", \"41984456789012\", \"51985567890123\", \"61986678901234\", \"71987789012345\", \"81988890123456\", \"91989901234567\", \"31997345671234\", \"51991567896789\", \"11992112234455\", \"21994556678899\", \"61995667789900\", \"71996778890011\", \"41998889901122\", \"81999990012233\", \"91980101123344\", \"11987111223333\"\r",
													"];\r",
													"\r",
													"// Seleção aleatória\r",
													"const selectedContact = responsibleContacts[Math.floor(Math.random() * responsibleContacts.length)];\r",
													"const selectedPhone = telephones[Math.floor(Math.random() * telephones.length)];\r",
													"\r",
													"// Setar variáveis\r",
													"pm.variables.set(\"responsibleContact\", selectedContact);\r",
													"pm.variables.set(\"telephone\", selectedPhone);\r",
													"\r",
													"// logradouros (alfanuméricos, até 50 caracteres, com caracteres especiais permitidos)\r",
													"const streets = [\r",
													"  \"Rua das Palmeiras\", \"Av. Brasil\", \"Rua 1ª de Maio\", \"Travessa do Comércio\", \"Alameda das Águias\",\r",
													"  \"Rua São João\", \"Av. Getúlio Vargas\", \"Rua dos Lírios\", \"Rua Coronel 2º Batista\", \"Rua Alfredo 'Silva'\",\r",
													"  \"Estrada do Sol\", \"Rua João 1º Neto\", \"Rua Principal - Leste\", \"Rua Vitória-Régia\", \"Alameda 5ª Norte\",\r",
													"  \"Praça Central\", \"Rua Júlio de Castro\", \"Rua Dr. Carlos 1º Martins\", \"Rua Dom Pedro II\"\r",
													"];\r",
													"\r",
													"// números (apenas dígitos, até 10 caracteres)\r",
													"const numbers = [\r",
													"  \"1010000000\", \"2020000000\", \"3030000000\", \"4040000000\", \"5050000000\", \"6060000000\", \"7070000000\", \"8080000000\", \"9090000000\", \"1001000000\",\r",
													"  \"1102000000\", \"1203000000\", \"1304000000\", \"1405000000\", \"1506000000\", \"1607000000\", \"1708000000\", \"1809000000\", \"1900000000\"\r",
													"];\r",
													"\r",
													"// complementos (alfanuméricos, com especiais permitidos, até 80 caracteres)\r",
													"const complements = [\r",
													"  \"Fundos\", \"Casa 1\", \"Apto 202\", \"Bloco B\", \"Sala 3\", \"Cobertura\", \"Térreo\", \"Galpão 2\", \"Loja 'A'\", \"Anexo 1\",\r",
													"  \"Ed. Central\", \"Torre Sul\", \"Prédio 1º\", \"Sobreloja\", \"Loja B\", \"Sala Comercial 7\", \"2º Andar\", \"Área 3\", \"Estacionamento\"\r",
													"];\r",
													"\r",
													"// bairros (alfanuméricos com especiais permitidos, até 50 caracteres)\r",
													"const districts = [\r",
													"  \"Centro\", \"Jardim das Flores\", \"Vila Nova\", \"Parque 1ª Esperança\", \"Bairro Alto\",\r",
													"  \"Residencial Alfa\", \"Jardim São João\", \"Nova 'Vida'\", \"Lagoa Azul\", \"Industrial Oeste\",\r",
													"  \"Bairro Santo André\", \"Vila Mariana\", \"Parque das Árvores\", \"Santa Luzia\", \"Água Verde\",\r",
													"  \"Vila Operária\", \"Jardim Central\", \"Colinas do Sol\", \"Residencial Leste\"\r",
													"];\r",
													"\r",
													"// Seleciona valores aleatórios\r",
													"const selectedStreet = streets[Math.floor(Math.random() * streets.length)];\r",
													"const selectedNumber = numbers[Math.floor(Math.random() * numbers.length)];\r",
													"const selectedComplement = complements[Math.floor(Math.random() * complements.length)];\r",
													"const selectedDistrict = districts[Math.floor(Math.random() * districts.length)];\r",
													"\r",
													"pm.variables.set(\"street\", selectedStreet);\r",
													"pm.variables.set(\"number\", selectedNumber);\r",
													"pm.variables.set(\"complement\", selectedComplement);\r",
													"pm.variables.set(\"district\", selectedDistrict);\r",
													"\r",
													"// cidades (somente letras, com caracteres especiais permitidos, até 50 caracteres)\r",
													"const cities = [\r",
													"  \"São Paulo\", \"Rio de Janeiro\", \"Belo Horizonte\", \"Curitiba\", \"Salvador\",\r",
													"  \"Fortaleza\", \"Brasília\", \"Porto Alegre\", \"Florianópolis\", \"Goiânia\",\r",
													"  \"Campinas\", \"Natal\", \"Recife\", \"Manaus\", \"Belém\",\r",
													"  \"São Luís\", \"Campo Grande\", \"Vitória\", \"Maceió\"\r",
													"];\r",
													"\r",
													"// estados (apenas letras, com 2 caracteres obrigatórios - sigla)\r",
													"const states = [\r",
													"  \"SP\", \"RJ\", \"MG\", \"PR\", \"BA\", \"CE\", \"DF\", \"RS\", \"SC\", \"GO\",\r",
													"  \"PA\", \"PE\", \"AM\", \"MA\", \"RN\", \"AL\", \"MS\", \"ES\", \"PB\"\r",
													"];\r",
													"\r",
													"// países (somente letras, até 50 caracteres)\r",
													"const countries = [\r",
													"  \"Brasil\", \"Argentina\", \"Portugal\", \"México\", \"Espanha\",\r",
													"  \"Chile\", \"Uruguai\", \"Peru\", \"Colômbia\", \"Canadá\",\r",
													"  \"França\", \"Itália\", \"Alemanha\", \"Suíça\", \"Japão\",\r",
													"  \"Coreia\", \"Austrália\", \"Noruega\", \"Dinamarca\"\r",
													"];\r",
													"\r",
													"// CEPs válidos com máscara (somente números, no formato #####-###)\r",
													"const postalCodes = [\r",
													"  \"01001000\", \"20010001\", \"30110012\", \"80020000\", \"40010903\", \"60110000\", \"70040010\", \"90010000\", \"88010200\", \"74000001\",\r",
													"  \"13010000\", \"59010000\", \"50010902\", \"69010020\", \"66010080\", \"65010100\", \"79002123\", \"29010200\", \"57010000\"\r",
													"];\r",
													"\r",
													"const selectedCity = cities[Math.floor(Math.random() * cities.length)];\r",
													"const selectedState = states[Math.floor(Math.random() * states.length)];\r",
													"const selectedCountry = countries[Math.floor(Math.random() * countries.length)];\r",
													"const selectedPostalCode = postalCodes[Math.floor(Math.random() * postalCodes.length)];\r",
													"\r",
													"pm.variables.set(\"city\", selectedCity);\r",
													"pm.variables.set(\"state\", selectedState);\r",
													"pm.variables.set(\"country\", selectedCountry);\r",
													"pm.variables.set(\"postalCode\", selectedPostalCode);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code é 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													" \r",
													"pm.test(\"Erro de validação\", () => {\r",
													"       pm.expect(pm.response.json().error).to.be.an('array');\r",
													"    pm.expect(pm.response.json().error).to.include(\"O campo 'cidade' só pode conter letras e os caracteres especiais 'ª', 'º', '‘' e '-'.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"corporateName\": \"{{corporateName}}\",\r\n    \"registerCompany\": \"{{registerCompany}}\",\r\n    \"mail\": \"{{mail}}\",\r\n    \"matriz\": \"{{matriz}}\",\r\n    \"responsibleContact\": \"{{responsibleContact}}\",\r\n    \"telephone\": \"{{telephone}}\",\r\n    \"serviceDescription\": \"{{serviceDescription}}\",\r\n    \"address\": [\r\n        {\r\n            \"zipCode\": \"{{postalCode}}\",\r\n            \"city\": \"Curitiba123\",\r\n            \"state\": \"{{state}}\",\r\n            \"district\": \"{{district}}\",\r\n            \"street\": \"{{street}}\",\r\n            \"number\": \"{{number}}\",\r\n            \"complement\": \"{{complement}}\",\r\n            \"country\": \"{{country}}\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/company",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"company"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cidade com mais de 50 caracteres",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Array com valores diferentes para \"Razão Social\"\r",
													"const corporateNames = [\"Camila Santos company\", \"TechNova Ltda\", \"Alfa Beta Corp\", \"Zeta Solutions\", \"InovaServiços\", \"Empresa Exemplo 001\", \"Startup do Bem\", \"GlobalTrade BR\", \"Serviços Rápidos\", \"MaxTI Soluções\", \"Empresa do Norte\", \"Consultoria XP\", \"AutoMarket Brasil\", \"CloudX Serviços\", \"FutureWave Ltda\", \"Rede Smart Business\", \"DevGroup Solutions\", \"HighData Inc\", \"Infinity Tech BR\"];\r",
													"\r",
													"// Seleciona um nome aleatório\r",
													"const selectedCorporateName = corporateNames[Math.floor(Math.random() * corporateNames.length)];\r",
													"\r",
													"// Define como variável para reutilizar\r",
													"pm.variables.set(\"corporateName\", selectedCorporateName);\r",
													"\r",
													"// Array com CNPJs fictícios válidos (sem máscara, como esperado no backend)\r",
													"const registerCompanies = [\r",
													"  \"12345678000195\", \"98765432000109\", \"11222333000181\", \"99887766000144\",\r",
													"  \"55667788000122\", \"33445566000177\", \"10203040000166\", \"11223344000100\",\r",
													"  \"66778899000188\", \"12312312300012\", \"44112233000155\", \"55443322000133\",\r",
													"  \"77665544000177\", \"88990011000100\", \"10111213000122\", \"15161718000190\",\r",
													"  \"19202122000101\", \"24252627000144\", \"28293031000188\"\r",
													"];\r",
													"\r",
													"// Seleciona um CNPJ aleatório\r",
													"const selectedCNPJ = registerCompanies[Math.floor(Math.random() * registerCompanies.length)];\r",
													"\r",
													"// Define como variável reutilizável\r",
													"pm.variables.set(\"registerCompany\", selectedCNPJ);\r",
													"\r",
													"\r",
													"// Array com e-mails válidos e variados\r",
													"const companyMails = [\r",
													"  \"empresa01@empresa.com.br\", \"contato@techsolucoes.com\", \"suporte@alfa.com.br\", \"info@betacorp.io\",\r",
													"  \"vendas@exemplo.org\", \"atendimento@cloudx.com\", \"diretoria@startupltda.com\", \"camila.santos@empresa.com\",\r",
													"  \"admin@inovabr.com\", \"noreply@negocios.com\", \"helpdesk@redesmart.com\", \"contato@consultoriaxp.com\",\r",
													"  \"rh@futurewave.com.br\", \"sac@automarket.com\", \"financeiro@globaltrade.com.br\", \"ti@highdata.org\",\r",
													"  \"comercial@maxsolucoes.com\", \"equipe@servicosbr.net\", \"gerencia@empresaxpto.com\"\r",
													"];\r",
													"\r",
													"// Seleciona um e-mail aleatório\r",
													"const selectedMail = companyMails[Math.floor(Math.random() * companyMails.length)];\r",
													"\r",
													"// Define como variável reutilizável\r",
													"pm.variables.set(\"mail\", selectedMail);\r",
													"\r",
													"// nomes fantasia diferentes (matriz)\r",
													"const matrizNames = [\r",
													"  \"Nuvem Computing\", \"Alpha Sistemas\", \"BetaTech\", \"ZetaCorp\", \"Smart Solutions\",\r",
													"  \"InovaTech\", \"TI Pro Business\", \"CloudWave\", \"MaxData\", \"DataSafe\",\r",
													"  \"NextGen Tech\", \"ServTI Brasil\", \"Grupo Digital\", \"NeoInfra\", \"SoftMind\",\r",
													"  \"Connect Plus\", \"FusionTI\", \"GlobalNet\", \"CyberWave\"\r",
													"];\r",
													"\r",
													"// descrições de serviços/negócio\r",
													"const serviceDescriptions = [\r",
													"  \"Desenvolvimento Personalizado\", \"Consultoria em TI\", \"Soluções em Nuvem\", \"Infraestrutura de Redes\",\r",
													"  \"Automação Comercial\", \"Plataformas Digitais\", \"Serviços de Hosting\", \"Suporte Técnico Especializado\",\r",
													"  \"Análise de Dados\", \"Desenvolvimento Web\", \"Sistemas Empresariais\", \"Segurança da Informação\",\r",
													"  \"Treinamento Corporativo\", \"Integração de Sistemas\", \"Consultoria Ágil\", \"Migração para Nuvem\",\r",
													"  \"Gestão de TI\", \"Gerenciamento de Servidores\", \"Tecnologia Educacional\"\r",
													"];\r",
													"\r",
													"// Seleção aleatória\r",
													"const selectedMatrizName = matrizNames[Math.floor(Math.random() * matrizNames.length)];\r",
													"const selectedServiceDesc = serviceDescriptions[Math.floor(Math.random() * serviceDescriptions.length)];\r",
													"\r",
													"// Armazenar como variáveis para uso no body\r",
													"pm.variables.set(\"matriz\", selectedMatrizName);\r",
													"pm.variables.set(\"serviceDescription\", selectedServiceDesc);\r",
													"\r",
													"// nomes compostos (apenas letras, com ao menos duas palavras)\r",
													"const responsibleContacts = [\r",
													"  \"Camila Santos\", \"João Pedro\", \"Ana Beatriz\", \"Carlos Eduardo\", \"Fernanda Lima\",\r",
													"  \"Rafael Borges\", \"Juliana Costa\", \"Marcelo Henrique\", \"Bruna Silva\", \"Felipe Oliveira\",\r",
													"  \"Daniela Marques\", \"Luana Ferreira\", \"Ricardo Matos\", \"Patrícia Andrade\", \"Gabriel Souza\",\r",
													"  \"Larissa Cunha\", \"Renato Castro\", \"Amanda Prado\", \"Lucas Almeida\"\r",
													"];\r",
													"\r",
													"// telefones brasileiros com máscara (máx. 15 caracteres)\r",
													"const telephones = [\r",
													"  \"11981123456789\", \"21982234567890\", \"31983345678901\", \"41984456789012\", \"51985567890123\", \"61986678901234\", \"71987789012345\", \"81988890123456\", \"91989901234567\", \"31997345671234\", \"51991567896789\", \"11992112234455\", \"21994556678899\", \"61995667789900\", \"71996778890011\", \"41998889901122\", \"81999990012233\", \"91980101123344\", \"11987111223333\"\r",
													"];\r",
													"\r",
													"// Seleção aleatória\r",
													"const selectedContact = responsibleContacts[Math.floor(Math.random() * responsibleContacts.length)];\r",
													"const selectedPhone = telephones[Math.floor(Math.random() * telephones.length)];\r",
													"\r",
													"// Setar variáveis\r",
													"pm.variables.set(\"responsibleContact\", selectedContact);\r",
													"pm.variables.set(\"telephone\", selectedPhone);\r",
													"\r",
													"// logradouros (alfanuméricos, até 50 caracteres, com caracteres especiais permitidos)\r",
													"const streets = [\r",
													"  \"Rua das Palmeiras\", \"Av. Brasil\", \"Rua 1ª de Maio\", \"Travessa do Comércio\", \"Alameda das Águias\",\r",
													"  \"Rua São João\", \"Av. Getúlio Vargas\", \"Rua dos Lírios\", \"Rua Coronel 2º Batista\", \"Rua Alfredo 'Silva'\",\r",
													"  \"Estrada do Sol\", \"Rua João 1º Neto\", \"Rua Principal - Leste\", \"Rua Vitória-Régia\", \"Alameda 5ª Norte\",\r",
													"  \"Praça Central\", \"Rua Júlio de Castro\", \"Rua Dr. Carlos 1º Martins\", \"Rua Dom Pedro II\"\r",
													"];\r",
													"\r",
													"// números (apenas dígitos, até 10 caracteres)\r",
													"const numbers = [\r",
													"  \"1010000000\", \"2020000000\", \"3030000000\", \"4040000000\", \"5050000000\", \"6060000000\", \"7070000000\", \"8080000000\", \"9090000000\", \"1001000000\",\r",
													"  \"1102000000\", \"1203000000\", \"1304000000\", \"1405000000\", \"1506000000\", \"1607000000\", \"1708000000\", \"1809000000\", \"1900000000\"\r",
													"];\r",
													"\r",
													"// complementos (alfanuméricos, com especiais permitidos, até 80 caracteres)\r",
													"const complements = [\r",
													"  \"Fundos\", \"Casa 1\", \"Apto 202\", \"Bloco B\", \"Sala 3\", \"Cobertura\", \"Térreo\", \"Galpão 2\", \"Loja 'A'\", \"Anexo 1\",\r",
													"  \"Ed. Central\", \"Torre Sul\", \"Prédio 1º\", \"Sobreloja\", \"Loja B\", \"Sala Comercial 7\", \"2º Andar\", \"Área 3\", \"Estacionamento\"\r",
													"];\r",
													"\r",
													"// bairros (alfanuméricos com especiais permitidos, até 50 caracteres)\r",
													"const districts = [\r",
													"  \"Centro\", \"Jardim das Flores\", \"Vila Nova\", \"Parque 1ª Esperança\", \"Bairro Alto\",\r",
													"  \"Residencial Alfa\", \"Jardim São João\", \"Nova 'Vida'\", \"Lagoa Azul\", \"Industrial Oeste\",\r",
													"  \"Bairro Santo André\", \"Vila Mariana\", \"Parque das Árvores\", \"Santa Luzia\", \"Água Verde\",\r",
													"  \"Vila Operária\", \"Jardim Central\", \"Colinas do Sol\", \"Residencial Leste\"\r",
													"];\r",
													"\r",
													"// Seleciona valores aleatórios\r",
													"const selectedStreet = streets[Math.floor(Math.random() * streets.length)];\r",
													"const selectedNumber = numbers[Math.floor(Math.random() * numbers.length)];\r",
													"const selectedComplement = complements[Math.floor(Math.random() * complements.length)];\r",
													"const selectedDistrict = districts[Math.floor(Math.random() * districts.length)];\r",
													"\r",
													"pm.variables.set(\"street\", selectedStreet);\r",
													"pm.variables.set(\"number\", selectedNumber);\r",
													"pm.variables.set(\"complement\", selectedComplement);\r",
													"pm.variables.set(\"district\", selectedDistrict);\r",
													"\r",
													"// cidades (somente letras, com caracteres especiais permitidos, até 50 caracteres)\r",
													"const cities = [\r",
													"  \"São Paulo\", \"Rio de Janeiro\", \"Belo Horizonte\", \"Curitiba\", \"Salvador\",\r",
													"  \"Fortaleza\", \"Brasília\", \"Porto Alegre\", \"Florianópolis\", \"Goiânia\",\r",
													"  \"Campinas\", \"Natal\", \"Recife\", \"Manaus\", \"Belém\",\r",
													"  \"São Luís\", \"Campo Grande\", \"Vitória\", \"Maceió\"\r",
													"];\r",
													"\r",
													"// estados (apenas letras, com 2 caracteres obrigatórios - sigla)\r",
													"const states = [\r",
													"  \"SP\", \"RJ\", \"MG\", \"PR\", \"BA\", \"CE\", \"DF\", \"RS\", \"SC\", \"GO\",\r",
													"  \"PA\", \"PE\", \"AM\", \"MA\", \"RN\", \"AL\", \"MS\", \"ES\", \"PB\"\r",
													"];\r",
													"\r",
													"// países (somente letras, até 50 caracteres)\r",
													"const countries = [\r",
													"  \"Brasil\", \"Argentina\", \"Portugal\", \"México\", \"Espanha\",\r",
													"  \"Chile\", \"Uruguai\", \"Peru\", \"Colômbia\", \"Canadá\",\r",
													"  \"França\", \"Itália\", \"Alemanha\", \"Suíça\", \"Japão\",\r",
													"  \"Coreia\", \"Austrália\", \"Noruega\", \"Dinamarca\"\r",
													"];\r",
													"\r",
													"// CEPs válidos com máscara (somente números, no formato #####-###)\r",
													"const postalCodes = [\r",
													"  \"01001000\", \"20010001\", \"30110012\", \"80020000\", \"40010903\", \"60110000\", \"70040010\", \"90010000\", \"88010200\", \"74000001\",\r",
													"  \"13010000\", \"59010000\", \"50010902\", \"69010020\", \"66010080\", \"65010100\", \"79002123\", \"29010200\", \"57010000\"\r",
													"];\r",
													"\r",
													"const selectedCity = cities[Math.floor(Math.random() * cities.length)];\r",
													"const selectedState = states[Math.floor(Math.random() * states.length)];\r",
													"const selectedCountry = countries[Math.floor(Math.random() * countries.length)];\r",
													"const selectedPostalCode = postalCodes[Math.floor(Math.random() * postalCodes.length)];\r",
													"\r",
													"pm.variables.set(\"city\", selectedCity);\r",
													"pm.variables.set(\"state\", selectedState);\r",
													"pm.variables.set(\"country\", selectedCountry);\r",
													"pm.variables.set(\"postalCode\", selectedPostalCode);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code é 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													" \r",
													"pm.test(\"Erro de validação\", () => {\r",
													"       pm.expect(pm.response.json().error).to.be.an('array');\r",
													"    pm.expect(pm.response.json().error).to.include(\"O campo 'cidade' deve possuir no máximo 50 caracteres.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"corporateName\": \"{{corporateName}}\",\r\n    \"registerCompany\": \"{{registerCompany}}\",\r\n    \"mail\": \"{{mail}}\",\r\n    \"matriz\": \"{{matriz}}\",\r\n    \"responsibleContact\": \"{{responsibleContact}}\",\r\n    \"telephone\": \"{{telephone}}\",\r\n    \"serviceDescription\": \"{{serviceDescription}}\",\r\n    \"address\": [\r\n        {\r\n            \"zipCode\": \"{{postalCode}}\",\r\n            \"city\": \"qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbn\",\r\n            \"state\": \"{{state}}\",\r\n            \"district\": \"{{district}}\",\r\n            \"street\": \"{{street}}\",\r\n            \"number\": \"{{number}}\",\r\n            \"complement\": \"{{complement}}\",\r\n            \"country\": \"{{country}}\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/company",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"company"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Estado",
							"item": [
								{
									"name": "Estado com mais de 2 caracteres",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Array com valores diferentes para \"Razão Social\"\r",
													"const corporateNames = [\"Camila Santos company\", \"TechNova Ltda\", \"Alfa Beta Corp\", \"Zeta Solutions\", \"InovaServiços\", \"Empresa Exemplo 001\", \"Startup do Bem\", \"GlobalTrade BR\", \"Serviços Rápidos\", \"MaxTI Soluções\", \"Empresa do Norte\", \"Consultoria XP\", \"AutoMarket Brasil\", \"CloudX Serviços\", \"FutureWave Ltda\", \"Rede Smart Business\", \"DevGroup Solutions\", \"HighData Inc\", \"Infinity Tech BR\"];\r",
													"\r",
													"// Seleciona um nome aleatório\r",
													"const selectedCorporateName = corporateNames[Math.floor(Math.random() * corporateNames.length)];\r",
													"\r",
													"// Define como variável para reutilizar\r",
													"pm.variables.set(\"corporateName\", selectedCorporateName);\r",
													"\r",
													"// Array com CNPJs fictícios válidos (sem máscara, como esperado no backend)\r",
													"const registerCompanies = [\r",
													"  \"12345678000195\", \"98765432000109\", \"11222333000181\", \"99887766000144\",\r",
													"  \"55667788000122\", \"33445566000177\", \"10203040000166\", \"11223344000100\",\r",
													"  \"66778899000188\", \"12312312300012\", \"44112233000155\", \"55443322000133\",\r",
													"  \"77665544000177\", \"88990011000100\", \"10111213000122\", \"15161718000190\",\r",
													"  \"19202122000101\", \"24252627000144\", \"28293031000188\"\r",
													"];\r",
													"\r",
													"// Seleciona um CNPJ aleatório\r",
													"const selectedCNPJ = registerCompanies[Math.floor(Math.random() * registerCompanies.length)];\r",
													"\r",
													"// Define como variável reutilizável\r",
													"pm.variables.set(\"registerCompany\", selectedCNPJ);\r",
													"\r",
													"\r",
													"// Array com e-mails válidos e variados\r",
													"const companyMails = [\r",
													"  \"empresa01@empresa.com.br\", \"contato@techsolucoes.com\", \"suporte@alfa.com.br\", \"info@betacorp.io\",\r",
													"  \"vendas@exemplo.org\", \"atendimento@cloudx.com\", \"diretoria@startupltda.com\", \"camila.santos@empresa.com\",\r",
													"  \"admin@inovabr.com\", \"noreply@negocios.com\", \"helpdesk@redesmart.com\", \"contato@consultoriaxp.com\",\r",
													"  \"rh@futurewave.com.br\", \"sac@automarket.com\", \"financeiro@globaltrade.com.br\", \"ti@highdata.org\",\r",
													"  \"comercial@maxsolucoes.com\", \"equipe@servicosbr.net\", \"gerencia@empresaxpto.com\"\r",
													"];\r",
													"\r",
													"// Seleciona um e-mail aleatório\r",
													"const selectedMail = companyMails[Math.floor(Math.random() * companyMails.length)];\r",
													"\r",
													"// Define como variável reutilizável\r",
													"pm.variables.set(\"mail\", selectedMail);\r",
													"\r",
													"// nomes fantasia diferentes (matriz)\r",
													"const matrizNames = [\r",
													"  \"Nuvem Computing\", \"Alpha Sistemas\", \"BetaTech\", \"ZetaCorp\", \"Smart Solutions\",\r",
													"  \"InovaTech\", \"TI Pro Business\", \"CloudWave\", \"MaxData\", \"DataSafe\",\r",
													"  \"NextGen Tech\", \"ServTI Brasil\", \"Grupo Digital\", \"NeoInfra\", \"SoftMind\",\r",
													"  \"Connect Plus\", \"FusionTI\", \"GlobalNet\", \"CyberWave\"\r",
													"];\r",
													"\r",
													"// descrições de serviços/negócio\r",
													"const serviceDescriptions = [\r",
													"  \"Desenvolvimento Personalizado\", \"Consultoria em TI\", \"Soluções em Nuvem\", \"Infraestrutura de Redes\",\r",
													"  \"Automação Comercial\", \"Plataformas Digitais\", \"Serviços de Hosting\", \"Suporte Técnico Especializado\",\r",
													"  \"Análise de Dados\", \"Desenvolvimento Web\", \"Sistemas Empresariais\", \"Segurança da Informação\",\r",
													"  \"Treinamento Corporativo\", \"Integração de Sistemas\", \"Consultoria Ágil\", \"Migração para Nuvem\",\r",
													"  \"Gestão de TI\", \"Gerenciamento de Servidores\", \"Tecnologia Educacional\"\r",
													"];\r",
													"\r",
													"// Seleção aleatória\r",
													"const selectedMatrizName = matrizNames[Math.floor(Math.random() * matrizNames.length)];\r",
													"const selectedServiceDesc = serviceDescriptions[Math.floor(Math.random() * serviceDescriptions.length)];\r",
													"\r",
													"// Armazenar como variáveis para uso no body\r",
													"pm.variables.set(\"matriz\", selectedMatrizName);\r",
													"pm.variables.set(\"serviceDescription\", selectedServiceDesc);\r",
													"\r",
													"// nomes compostos (apenas letras, com ao menos duas palavras)\r",
													"const responsibleContacts = [\r",
													"  \"Camila Santos\", \"João Pedro\", \"Ana Beatriz\", \"Carlos Eduardo\", \"Fernanda Lima\",\r",
													"  \"Rafael Borges\", \"Juliana Costa\", \"Marcelo Henrique\", \"Bruna Silva\", \"Felipe Oliveira\",\r",
													"  \"Daniela Marques\", \"Luana Ferreira\", \"Ricardo Matos\", \"Patrícia Andrade\", \"Gabriel Souza\",\r",
													"  \"Larissa Cunha\", \"Renato Castro\", \"Amanda Prado\", \"Lucas Almeida\"\r",
													"];\r",
													"\r",
													"// telefones brasileiros com máscara (máx. 15 caracteres)\r",
													"const telephones = [\r",
													"  \"11981123456789\", \"21982234567890\", \"31983345678901\", \"41984456789012\", \"51985567890123\", \"61986678901234\", \"71987789012345\", \"81988890123456\", \"91989901234567\", \"31997345671234\", \"51991567896789\", \"11992112234455\", \"21994556678899\", \"61995667789900\", \"71996778890011\", \"41998889901122\", \"81999990012233\", \"91980101123344\", \"11987111223333\"\r",
													"];\r",
													"\r",
													"// Seleção aleatória\r",
													"const selectedContact = responsibleContacts[Math.floor(Math.random() * responsibleContacts.length)];\r",
													"const selectedPhone = telephones[Math.floor(Math.random() * telephones.length)];\r",
													"\r",
													"// Setar variáveis\r",
													"pm.variables.set(\"responsibleContact\", selectedContact);\r",
													"pm.variables.set(\"telephone\", selectedPhone);\r",
													"\r",
													"// logradouros (alfanuméricos, até 50 caracteres, com caracteres especiais permitidos)\r",
													"const streets = [\r",
													"  \"Rua das Palmeiras\", \"Av. Brasil\", \"Rua 1ª de Maio\", \"Travessa do Comércio\", \"Alameda das Águias\",\r",
													"  \"Rua São João\", \"Av. Getúlio Vargas\", \"Rua dos Lírios\", \"Rua Coronel 2º Batista\", \"Rua Alfredo 'Silva'\",\r",
													"  \"Estrada do Sol\", \"Rua João 1º Neto\", \"Rua Principal - Leste\", \"Rua Vitória-Régia\", \"Alameda 5ª Norte\",\r",
													"  \"Praça Central\", \"Rua Júlio de Castro\", \"Rua Dr. Carlos 1º Martins\", \"Rua Dom Pedro II\"\r",
													"];\r",
													"\r",
													"// números (apenas dígitos, até 10 caracteres)\r",
													"const numbers = [\r",
													"  \"1010000000\", \"2020000000\", \"3030000000\", \"4040000000\", \"5050000000\", \"6060000000\", \"7070000000\", \"8080000000\", \"9090000000\", \"1001000000\",\r",
													"  \"1102000000\", \"1203000000\", \"1304000000\", \"1405000000\", \"1506000000\", \"1607000000\", \"1708000000\", \"1809000000\", \"1900000000\"\r",
													"];\r",
													"\r",
													"// complementos (alfanuméricos, com especiais permitidos, até 80 caracteres)\r",
													"const complements = [\r",
													"  \"Fundos\", \"Casa 1\", \"Apto 202\", \"Bloco B\", \"Sala 3\", \"Cobertura\", \"Térreo\", \"Galpão 2\", \"Loja 'A'\", \"Anexo 1\",\r",
													"  \"Ed. Central\", \"Torre Sul\", \"Prédio 1º\", \"Sobreloja\", \"Loja B\", \"Sala Comercial 7\", \"2º Andar\", \"Área 3\", \"Estacionamento\"\r",
													"];\r",
													"\r",
													"// bairros (alfanuméricos com especiais permitidos, até 50 caracteres)\r",
													"const districts = [\r",
													"  \"Centro\", \"Jardim das Flores\", \"Vila Nova\", \"Parque 1ª Esperança\", \"Bairro Alto\",\r",
													"  \"Residencial Alfa\", \"Jardim São João\", \"Nova 'Vida'\", \"Lagoa Azul\", \"Industrial Oeste\",\r",
													"  \"Bairro Santo André\", \"Vila Mariana\", \"Parque das Árvores\", \"Santa Luzia\", \"Água Verde\",\r",
													"  \"Vila Operária\", \"Jardim Central\", \"Colinas do Sol\", \"Residencial Leste\"\r",
													"];\r",
													"\r",
													"// Seleciona valores aleatórios\r",
													"const selectedStreet = streets[Math.floor(Math.random() * streets.length)];\r",
													"const selectedNumber = numbers[Math.floor(Math.random() * numbers.length)];\r",
													"const selectedComplement = complements[Math.floor(Math.random() * complements.length)];\r",
													"const selectedDistrict = districts[Math.floor(Math.random() * districts.length)];\r",
													"\r",
													"pm.variables.set(\"street\", selectedStreet);\r",
													"pm.variables.set(\"number\", selectedNumber);\r",
													"pm.variables.set(\"complement\", selectedComplement);\r",
													"pm.variables.set(\"district\", selectedDistrict);\r",
													"\r",
													"// cidades (somente letras, com caracteres especiais permitidos, até 50 caracteres)\r",
													"const cities = [\r",
													"  \"São Paulo\", \"Rio de Janeiro\", \"Belo Horizonte\", \"Curitiba\", \"Salvador\",\r",
													"  \"Fortaleza\", \"Brasília\", \"Porto Alegre\", \"Florianópolis\", \"Goiânia\",\r",
													"  \"Campinas\", \"Natal\", \"Recife\", \"Manaus\", \"Belém\",\r",
													"  \"São Luís\", \"Campo Grande\", \"Vitória\", \"Maceió\"\r",
													"];\r",
													"\r",
													"// estados (apenas letras, com 2 caracteres obrigatórios - sigla)\r",
													"const states = [\r",
													"  \"SP\", \"RJ\", \"MG\", \"PR\", \"BA\", \"CE\", \"DF\", \"RS\", \"SC\", \"GO\",\r",
													"  \"PA\", \"PE\", \"AM\", \"MA\", \"RN\", \"AL\", \"MS\", \"ES\", \"PB\"\r",
													"];\r",
													"\r",
													"// países (somente letras, até 50 caracteres)\r",
													"const countries = [\r",
													"  \"Brasil\", \"Argentina\", \"Portugal\", \"México\", \"Espanha\",\r",
													"  \"Chile\", \"Uruguai\", \"Peru\", \"Colômbia\", \"Canadá\",\r",
													"  \"França\", \"Itália\", \"Alemanha\", \"Suíça\", \"Japão\",\r",
													"  \"Coreia\", \"Austrália\", \"Noruega\", \"Dinamarca\"\r",
													"];\r",
													"\r",
													"// CEPs válidos com máscara (somente números, no formato #####-###)\r",
													"const postalCodes = [\r",
													"  \"01001000\", \"20010001\", \"30110012\", \"80020000\", \"40010903\", \"60110000\", \"70040010\", \"90010000\", \"88010200\", \"74000001\",\r",
													"  \"13010000\", \"59010000\", \"50010902\", \"69010020\", \"66010080\", \"65010100\", \"79002123\", \"29010200\", \"57010000\"\r",
													"];\r",
													"\r",
													"const selectedCity = cities[Math.floor(Math.random() * cities.length)];\r",
													"const selectedState = states[Math.floor(Math.random() * states.length)];\r",
													"const selectedCountry = countries[Math.floor(Math.random() * countries.length)];\r",
													"const selectedPostalCode = postalCodes[Math.floor(Math.random() * postalCodes.length)];\r",
													"\r",
													"pm.variables.set(\"city\", selectedCity);\r",
													"pm.variables.set(\"state\", selectedState);\r",
													"pm.variables.set(\"country\", selectedCountry);\r",
													"pm.variables.set(\"postalCode\", selectedPostalCode);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code é 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													" \r",
													"pm.test(\"Erro de validação\", () => {\r",
													"       pm.expect(pm.response.json().error).to.be.an('array');\r",
													"    pm.expect(pm.response.json().error).to.include(\"O campo 'estado' deve possuir 2 caracteres.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"corporateName\": \"{{corporateName}}\",\r\n    \"registerCompany\": \"{{registerCompany}}\",\r\n    \"mail\": \"{{mail}}\",\r\n    \"matriz\": \"{{matriz}}\",\r\n    \"responsibleContact\": \"{{responsibleContact}}\",\r\n    \"telephone\": \"{{telephone}}\",\r\n    \"serviceDescription\": \"{{serviceDescription}}\",\r\n    \"address\": [\r\n        {\r\n            \"zipCode\": \"{{postalCode}}\",\r\n            \"city\": \"{{city}}\",\r\n            \"state\": \"SPaulo\",\r\n            \"district\": \"{{district}}\",\r\n            \"street\": \"{{street}}\",\r\n            \"number\": \"{{number}}\",\r\n            \"complement\": \"{{complement}}\",\r\n            \"country\": \"{{country}}\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/company",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"company"
											]
										}
									},
									"response": []
								},
								{
									"name": "Estado com números(BUG)",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Array com valores diferentes para \"Razão Social\"\r",
													"const corporateNames = [\"Camila Santos company\", \"TechNova Ltda\", \"Alfa Beta Corp\", \"Zeta Solutions\", \"InovaServiços\", \"Empresa Exemplo 001\", \"Startup do Bem\", \"GlobalTrade BR\", \"Serviços Rápidos\", \"MaxTI Soluções\", \"Empresa do Norte\", \"Consultoria XP\", \"AutoMarket Brasil\", \"CloudX Serviços\", \"FutureWave Ltda\", \"Rede Smart Business\", \"DevGroup Solutions\", \"HighData Inc\", \"Infinity Tech BR\"];\r",
													"\r",
													"// Seleciona um nome aleatório\r",
													"const selectedCorporateName = corporateNames[Math.floor(Math.random() * corporateNames.length)];\r",
													"\r",
													"// Define como variável para reutilizar\r",
													"pm.variables.set(\"corporateName\", selectedCorporateName);\r",
													"\r",
													"// Array com CNPJs fictícios válidos (sem máscara, como esperado no backend)\r",
													"const registerCompanies = [\r",
													"  \"12345678000195\", \"98765432000109\", \"11222333000181\", \"99887766000144\",\r",
													"  \"55667788000122\", \"33445566000177\", \"10203040000166\", \"11223344000100\",\r",
													"  \"66778899000188\", \"12312312300012\", \"44112233000155\", \"55443322000133\",\r",
													"  \"77665544000177\", \"88990011000100\", \"10111213000122\", \"15161718000190\",\r",
													"  \"19202122000101\", \"24252627000144\", \"28293031000188\"\r",
													"];\r",
													"\r",
													"// Seleciona um CNPJ aleatório\r",
													"const selectedCNPJ = registerCompanies[Math.floor(Math.random() * registerCompanies.length)];\r",
													"\r",
													"// Define como variável reutilizável\r",
													"pm.variables.set(\"registerCompany\", selectedCNPJ);\r",
													"\r",
													"\r",
													"// Array com e-mails válidos e variados\r",
													"const companyMails = [\r",
													"  \"empresa01@empresa.com.br\", \"contato@techsolucoes.com\", \"suporte@alfa.com.br\", \"info@betacorp.io\",\r",
													"  \"vendas@exemplo.org\", \"atendimento@cloudx.com\", \"diretoria@startupltda.com\", \"camila.santos@empresa.com\",\r",
													"  \"admin@inovabr.com\", \"noreply@negocios.com\", \"helpdesk@redesmart.com\", \"contato@consultoriaxp.com\",\r",
													"  \"rh@futurewave.com.br\", \"sac@automarket.com\", \"financeiro@globaltrade.com.br\", \"ti@highdata.org\",\r",
													"  \"comercial@maxsolucoes.com\", \"equipe@servicosbr.net\", \"gerencia@empresaxpto.com\"\r",
													"];\r",
													"\r",
													"// Seleciona um e-mail aleatório\r",
													"const selectedMail = companyMails[Math.floor(Math.random() * companyMails.length)];\r",
													"\r",
													"// Define como variável reutilizável\r",
													"pm.variables.set(\"mail\", selectedMail);\r",
													"\r",
													"// nomes fantasia diferentes (matriz)\r",
													"const matrizNames = [\r",
													"  \"Nuvem Computing\", \"Alpha Sistemas\", \"BetaTech\", \"ZetaCorp\", \"Smart Solutions\",\r",
													"  \"InovaTech\", \"TI Pro Business\", \"CloudWave\", \"MaxData\", \"DataSafe\",\r",
													"  \"NextGen Tech\", \"ServTI Brasil\", \"Grupo Digital\", \"NeoInfra\", \"SoftMind\",\r",
													"  \"Connect Plus\", \"FusionTI\", \"GlobalNet\", \"CyberWave\"\r",
													"];\r",
													"\r",
													"// descrições de serviços/negócio\r",
													"const serviceDescriptions = [\r",
													"  \"Desenvolvimento Personalizado\", \"Consultoria em TI\", \"Soluções em Nuvem\", \"Infraestrutura de Redes\",\r",
													"  \"Automação Comercial\", \"Plataformas Digitais\", \"Serviços de Hosting\", \"Suporte Técnico Especializado\",\r",
													"  \"Análise de Dados\", \"Desenvolvimento Web\", \"Sistemas Empresariais\", \"Segurança da Informação\",\r",
													"  \"Treinamento Corporativo\", \"Integração de Sistemas\", \"Consultoria Ágil\", \"Migração para Nuvem\",\r",
													"  \"Gestão de TI\", \"Gerenciamento de Servidores\", \"Tecnologia Educacional\"\r",
													"];\r",
													"\r",
													"// Seleção aleatória\r",
													"const selectedMatrizName = matrizNames[Math.floor(Math.random() * matrizNames.length)];\r",
													"const selectedServiceDesc = serviceDescriptions[Math.floor(Math.random() * serviceDescriptions.length)];\r",
													"\r",
													"// Armazenar como variáveis para uso no body\r",
													"pm.variables.set(\"matriz\", selectedMatrizName);\r",
													"pm.variables.set(\"serviceDescription\", selectedServiceDesc);\r",
													"\r",
													"// nomes compostos (apenas letras, com ao menos duas palavras)\r",
													"const responsibleContacts = [\r",
													"  \"Camila Santos\", \"João Pedro\", \"Ana Beatriz\", \"Carlos Eduardo\", \"Fernanda Lima\",\r",
													"  \"Rafael Borges\", \"Juliana Costa\", \"Marcelo Henrique\", \"Bruna Silva\", \"Felipe Oliveira\",\r",
													"  \"Daniela Marques\", \"Luana Ferreira\", \"Ricardo Matos\", \"Patrícia Andrade\", \"Gabriel Souza\",\r",
													"  \"Larissa Cunha\", \"Renato Castro\", \"Amanda Prado\", \"Lucas Almeida\"\r",
													"];\r",
													"\r",
													"// telefones brasileiros com máscara (máx. 15 caracteres)\r",
													"const telephones = [\r",
													"  \"11981123456789\", \"21982234567890\", \"31983345678901\", \"41984456789012\", \"51985567890123\", \"61986678901234\", \"71987789012345\", \"81988890123456\", \"91989901234567\", \"31997345671234\", \"51991567896789\", \"11992112234455\", \"21994556678899\", \"61995667789900\", \"71996778890011\", \"41998889901122\", \"81999990012233\", \"91980101123344\", \"11987111223333\"\r",
													"];\r",
													"\r",
													"// Seleção aleatória\r",
													"const selectedContact = responsibleContacts[Math.floor(Math.random() * responsibleContacts.length)];\r",
													"const selectedPhone = telephones[Math.floor(Math.random() * telephones.length)];\r",
													"\r",
													"// Setar variáveis\r",
													"pm.variables.set(\"responsibleContact\", selectedContact);\r",
													"pm.variables.set(\"telephone\", selectedPhone);\r",
													"\r",
													"// logradouros (alfanuméricos, até 50 caracteres, com caracteres especiais permitidos)\r",
													"const streets = [\r",
													"  \"Rua das Palmeiras\", \"Av. Brasil\", \"Rua 1ª de Maio\", \"Travessa do Comércio\", \"Alameda das Águias\",\r",
													"  \"Rua São João\", \"Av. Getúlio Vargas\", \"Rua dos Lírios\", \"Rua Coronel 2º Batista\", \"Rua Alfredo 'Silva'\",\r",
													"  \"Estrada do Sol\", \"Rua João 1º Neto\", \"Rua Principal - Leste\", \"Rua Vitória-Régia\", \"Alameda 5ª Norte\",\r",
													"  \"Praça Central\", \"Rua Júlio de Castro\", \"Rua Dr. Carlos 1º Martins\", \"Rua Dom Pedro II\"\r",
													"];\r",
													"\r",
													"// números (apenas dígitos, até 10 caracteres)\r",
													"const numbers = [\r",
													"  \"1010000000\", \"2020000000\", \"3030000000\", \"4040000000\", \"5050000000\", \"6060000000\", \"7070000000\", \"8080000000\", \"9090000000\", \"1001000000\",\r",
													"  \"1102000000\", \"1203000000\", \"1304000000\", \"1405000000\", \"1506000000\", \"1607000000\", \"1708000000\", \"1809000000\", \"1900000000\"\r",
													"];\r",
													"\r",
													"// complementos (alfanuméricos, com especiais permitidos, até 80 caracteres)\r",
													"const complements = [\r",
													"  \"Fundos\", \"Casa 1\", \"Apto 202\", \"Bloco B\", \"Sala 3\", \"Cobertura\", \"Térreo\", \"Galpão 2\", \"Loja 'A'\", \"Anexo 1\",\r",
													"  \"Ed. Central\", \"Torre Sul\", \"Prédio 1º\", \"Sobreloja\", \"Loja B\", \"Sala Comercial 7\", \"2º Andar\", \"Área 3\", \"Estacionamento\"\r",
													"];\r",
													"\r",
													"// bairros (alfanuméricos com especiais permitidos, até 50 caracteres)\r",
													"const districts = [\r",
													"  \"Centro\", \"Jardim das Flores\", \"Vila Nova\", \"Parque 1ª Esperança\", \"Bairro Alto\",\r",
													"  \"Residencial Alfa\", \"Jardim São João\", \"Nova 'Vida'\", \"Lagoa Azul\", \"Industrial Oeste\",\r",
													"  \"Bairro Santo André\", \"Vila Mariana\", \"Parque das Árvores\", \"Santa Luzia\", \"Água Verde\",\r",
													"  \"Vila Operária\", \"Jardim Central\", \"Colinas do Sol\", \"Residencial Leste\"\r",
													"];\r",
													"\r",
													"// Seleciona valores aleatórios\r",
													"const selectedStreet = streets[Math.floor(Math.random() * streets.length)];\r",
													"const selectedNumber = numbers[Math.floor(Math.random() * numbers.length)];\r",
													"const selectedComplement = complements[Math.floor(Math.random() * complements.length)];\r",
													"const selectedDistrict = districts[Math.floor(Math.random() * districts.length)];\r",
													"\r",
													"pm.variables.set(\"street\", selectedStreet);\r",
													"pm.variables.set(\"number\", selectedNumber);\r",
													"pm.variables.set(\"complement\", selectedComplement);\r",
													"pm.variables.set(\"district\", selectedDistrict);\r",
													"\r",
													"// cidades (somente letras, com caracteres especiais permitidos, até 50 caracteres)\r",
													"const cities = [\r",
													"  \"São Paulo\", \"Rio de Janeiro\", \"Belo Horizonte\", \"Curitiba\", \"Salvador\",\r",
													"  \"Fortaleza\", \"Brasília\", \"Porto Alegre\", \"Florianópolis\", \"Goiânia\",\r",
													"  \"Campinas\", \"Natal\", \"Recife\", \"Manaus\", \"Belém\",\r",
													"  \"São Luís\", \"Campo Grande\", \"Vitória\", \"Maceió\"\r",
													"];\r",
													"\r",
													"// estados (apenas letras, com 2 caracteres obrigatórios - sigla)\r",
													"const states = [\r",
													"  \"SP\", \"RJ\", \"MG\", \"PR\", \"BA\", \"CE\", \"DF\", \"RS\", \"SC\", \"GO\",\r",
													"  \"PA\", \"PE\", \"AM\", \"MA\", \"RN\", \"AL\", \"MS\", \"ES\", \"PB\"\r",
													"];\r",
													"\r",
													"// países (somente letras, até 50 caracteres)\r",
													"const countries = [\r",
													"  \"Brasil\", \"Argentina\", \"Portugal\", \"México\", \"Espanha\",\r",
													"  \"Chile\", \"Uruguai\", \"Peru\", \"Colômbia\", \"Canadá\",\r",
													"  \"França\", \"Itália\", \"Alemanha\", \"Suíça\", \"Japão\",\r",
													"  \"Coreia\", \"Austrália\", \"Noruega\", \"Dinamarca\"\r",
													"];\r",
													"\r",
													"// CEPs válidos com máscara (somente números, no formato #####-###)\r",
													"const postalCodes = [\r",
													"  \"01001000\", \"20010001\", \"30110012\", \"80020000\", \"40010903\", \"60110000\", \"70040010\", \"90010000\", \"88010200\", \"74000001\",\r",
													"  \"13010000\", \"59010000\", \"50010902\", \"69010020\", \"66010080\", \"65010100\", \"79002123\", \"29010200\", \"57010000\"\r",
													"];\r",
													"\r",
													"const selectedCity = cities[Math.floor(Math.random() * cities.length)];\r",
													"const selectedState = states[Math.floor(Math.random() * states.length)];\r",
													"const selectedCountry = countries[Math.floor(Math.random() * countries.length)];\r",
													"const selectedPostalCode = postalCodes[Math.floor(Math.random() * postalCodes.length)];\r",
													"\r",
													"pm.variables.set(\"city\", selectedCity);\r",
													"pm.variables.set(\"state\", selectedState);\r",
													"pm.variables.set(\"country\", selectedCountry);\r",
													"pm.variables.set(\"postalCode\", selectedPostalCode);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code é 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													" \r",
													"pm.test(\"Erro de validação\", () => {\r",
													"       pm.expect(pm.response.json().error).to.be.an('array');\r",
													"    pm.expect(pm.response.json().error).to.include(\"\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"corporateName\": \"{{corporateName}}\",\r\n    \"registerCompany\": \"{{registerCompany}}\",\r\n    \"mail\": \"{{mail}}\",\r\n    \"matriz\": \"{{matriz}}\",\r\n    \"responsibleContact\": \"{{responsibleContact}}\",\r\n    \"telephone\": \"{{telephone}}\",\r\n    \"serviceDescription\": \"{{serviceDescription}}\",\r\n    \"address\": [\r\n        {\r\n            \"zipCode\": \"{{postalCode}}\",\r\n            \"city\": \"{{city}}\",\r\n            \"state\": \"ES\",\r\n            \"district\": \"{{district}}\",\r\n            \"street\": \"{{street}}\",\r\n            \"number\": \"{{number}}\",\r\n            \"complement\": \"{{complement}}\",\r\n            \"country\": \"{{country}}\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/company",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"company"
											]
										}
									},
									"response": []
								},
								{
									"name": "Estado vazio",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Array com valores diferentes para \"Razão Social\"\r",
													"const corporateNames = [\"Camila Santos company\", \"TechNova Ltda\", \"Alfa Beta Corp\", \"Zeta Solutions\", \"InovaServiços\", \"Empresa Exemplo 001\", \"Startup do Bem\", \"GlobalTrade BR\", \"Serviços Rápidos\", \"MaxTI Soluções\", \"Empresa do Norte\", \"Consultoria XP\", \"AutoMarket Brasil\", \"CloudX Serviços\", \"FutureWave Ltda\", \"Rede Smart Business\", \"DevGroup Solutions\", \"HighData Inc\", \"Infinity Tech BR\"];\r",
													"\r",
													"// Seleciona um nome aleatório\r",
													"const selectedCorporateName = corporateNames[Math.floor(Math.random() * corporateNames.length)];\r",
													"\r",
													"// Define como variável para reutilizar\r",
													"pm.variables.set(\"corporateName\", selectedCorporateName);\r",
													"\r",
													"// Array com CNPJs fictícios válidos (sem máscara, como esperado no backend)\r",
													"const registerCompanies = [\r",
													"  \"12345678000195\", \"98765432000109\", \"11222333000181\", \"99887766000144\",\r",
													"  \"55667788000122\", \"33445566000177\", \"10203040000166\", \"11223344000100\",\r",
													"  \"66778899000188\", \"12312312300012\", \"44112233000155\", \"55443322000133\",\r",
													"  \"77665544000177\", \"88990011000100\", \"10111213000122\", \"15161718000190\",\r",
													"  \"19202122000101\", \"24252627000144\", \"28293031000188\"\r",
													"];\r",
													"\r",
													"// Seleciona um CNPJ aleatório\r",
													"const selectedCNPJ = registerCompanies[Math.floor(Math.random() * registerCompanies.length)];\r",
													"\r",
													"// Define como variável reutilizável\r",
													"pm.variables.set(\"registerCompany\", selectedCNPJ);\r",
													"\r",
													"\r",
													"// Array com e-mails válidos e variados\r",
													"const companyMails = [\r",
													"  \"empresa01@empresa.com.br\", \"contato@techsolucoes.com\", \"suporte@alfa.com.br\", \"info@betacorp.io\",\r",
													"  \"vendas@exemplo.org\", \"atendimento@cloudx.com\", \"diretoria@startupltda.com\", \"camila.santos@empresa.com\",\r",
													"  \"admin@inovabr.com\", \"noreply@negocios.com\", \"helpdesk@redesmart.com\", \"contato@consultoriaxp.com\",\r",
													"  \"rh@futurewave.com.br\", \"sac@automarket.com\", \"financeiro@globaltrade.com.br\", \"ti@highdata.org\",\r",
													"  \"comercial@maxsolucoes.com\", \"equipe@servicosbr.net\", \"gerencia@empresaxpto.com\"\r",
													"];\r",
													"\r",
													"// Seleciona um e-mail aleatório\r",
													"const selectedMail = companyMails[Math.floor(Math.random() * companyMails.length)];\r",
													"\r",
													"// Define como variável reutilizável\r",
													"pm.variables.set(\"mail\", selectedMail);\r",
													"\r",
													"// nomes fantasia diferentes (matriz)\r",
													"const matrizNames = [\r",
													"  \"Nuvem Computing\", \"Alpha Sistemas\", \"BetaTech\", \"ZetaCorp\", \"Smart Solutions\",\r",
													"  \"InovaTech\", \"TI Pro Business\", \"CloudWave\", \"MaxData\", \"DataSafe\",\r",
													"  \"NextGen Tech\", \"ServTI Brasil\", \"Grupo Digital\", \"NeoInfra\", \"SoftMind\",\r",
													"  \"Connect Plus\", \"FusionTI\", \"GlobalNet\", \"CyberWave\"\r",
													"];\r",
													"\r",
													"// descrições de serviços/negócio\r",
													"const serviceDescriptions = [\r",
													"  \"Desenvolvimento Personalizado\", \"Consultoria em TI\", \"Soluções em Nuvem\", \"Infraestrutura de Redes\",\r",
													"  \"Automação Comercial\", \"Plataformas Digitais\", \"Serviços de Hosting\", \"Suporte Técnico Especializado\",\r",
													"  \"Análise de Dados\", \"Desenvolvimento Web\", \"Sistemas Empresariais\", \"Segurança da Informação\",\r",
													"  \"Treinamento Corporativo\", \"Integração de Sistemas\", \"Consultoria Ágil\", \"Migração para Nuvem\",\r",
													"  \"Gestão de TI\", \"Gerenciamento de Servidores\", \"Tecnologia Educacional\"\r",
													"];\r",
													"\r",
													"// Seleção aleatória\r",
													"const selectedMatrizName = matrizNames[Math.floor(Math.random() * matrizNames.length)];\r",
													"const selectedServiceDesc = serviceDescriptions[Math.floor(Math.random() * serviceDescriptions.length)];\r",
													"\r",
													"// Armazenar como variáveis para uso no body\r",
													"pm.variables.set(\"matriz\", selectedMatrizName);\r",
													"pm.variables.set(\"serviceDescription\", selectedServiceDesc);\r",
													"\r",
													"// nomes compostos (apenas letras, com ao menos duas palavras)\r",
													"const responsibleContacts = [\r",
													"  \"Camila Santos\", \"João Pedro\", \"Ana Beatriz\", \"Carlos Eduardo\", \"Fernanda Lima\",\r",
													"  \"Rafael Borges\", \"Juliana Costa\", \"Marcelo Henrique\", \"Bruna Silva\", \"Felipe Oliveira\",\r",
													"  \"Daniela Marques\", \"Luana Ferreira\", \"Ricardo Matos\", \"Patrícia Andrade\", \"Gabriel Souza\",\r",
													"  \"Larissa Cunha\", \"Renato Castro\", \"Amanda Prado\", \"Lucas Almeida\"\r",
													"];\r",
													"\r",
													"// telefones brasileiros com máscara (máx. 15 caracteres)\r",
													"const telephones = [\r",
													"  \"11981123456789\", \"21982234567890\", \"31983345678901\", \"41984456789012\", \"51985567890123\", \"61986678901234\", \"71987789012345\", \"81988890123456\", \"91989901234567\", \"31997345671234\", \"51991567896789\", \"11992112234455\", \"21994556678899\", \"61995667789900\", \"71996778890011\", \"41998889901122\", \"81999990012233\", \"91980101123344\", \"11987111223333\"\r",
													"];\r",
													"\r",
													"// Seleção aleatória\r",
													"const selectedContact = responsibleContacts[Math.floor(Math.random() * responsibleContacts.length)];\r",
													"const selectedPhone = telephones[Math.floor(Math.random() * telephones.length)];\r",
													"\r",
													"// Setar variáveis\r",
													"pm.variables.set(\"responsibleContact\", selectedContact);\r",
													"pm.variables.set(\"telephone\", selectedPhone);\r",
													"\r",
													"// logradouros (alfanuméricos, até 50 caracteres, com caracteres especiais permitidos)\r",
													"const streets = [\r",
													"  \"Rua das Palmeiras\", \"Av. Brasil\", \"Rua 1ª de Maio\", \"Travessa do Comércio\", \"Alameda das Águias\",\r",
													"  \"Rua São João\", \"Av. Getúlio Vargas\", \"Rua dos Lírios\", \"Rua Coronel 2º Batista\", \"Rua Alfredo 'Silva'\",\r",
													"  \"Estrada do Sol\", \"Rua João 1º Neto\", \"Rua Principal - Leste\", \"Rua Vitória-Régia\", \"Alameda 5ª Norte\",\r",
													"  \"Praça Central\", \"Rua Júlio de Castro\", \"Rua Dr. Carlos 1º Martins\", \"Rua Dom Pedro II\"\r",
													"];\r",
													"\r",
													"// números (apenas dígitos, até 10 caracteres)\r",
													"const numbers = [\r",
													"  \"1010000000\", \"2020000000\", \"3030000000\", \"4040000000\", \"5050000000\", \"6060000000\", \"7070000000\", \"8080000000\", \"9090000000\", \"1001000000\",\r",
													"  \"1102000000\", \"1203000000\", \"1304000000\", \"1405000000\", \"1506000000\", \"1607000000\", \"1708000000\", \"1809000000\", \"1900000000\"\r",
													"];\r",
													"\r",
													"// complementos (alfanuméricos, com especiais permitidos, até 80 caracteres)\r",
													"const complements = [\r",
													"  \"Fundos\", \"Casa 1\", \"Apto 202\", \"Bloco B\", \"Sala 3\", \"Cobertura\", \"Térreo\", \"Galpão 2\", \"Loja 'A'\", \"Anexo 1\",\r",
													"  \"Ed. Central\", \"Torre Sul\", \"Prédio 1º\", \"Sobreloja\", \"Loja B\", \"Sala Comercial 7\", \"2º Andar\", \"Área 3\", \"Estacionamento\"\r",
													"];\r",
													"\r",
													"// bairros (alfanuméricos com especiais permitidos, até 50 caracteres)\r",
													"const districts = [\r",
													"  \"Centro\", \"Jardim das Flores\", \"Vila Nova\", \"Parque 1ª Esperança\", \"Bairro Alto\",\r",
													"  \"Residencial Alfa\", \"Jardim São João\", \"Nova 'Vida'\", \"Lagoa Azul\", \"Industrial Oeste\",\r",
													"  \"Bairro Santo André\", \"Vila Mariana\", \"Parque das Árvores\", \"Santa Luzia\", \"Água Verde\",\r",
													"  \"Vila Operária\", \"Jardim Central\", \"Colinas do Sol\", \"Residencial Leste\"\r",
													"];\r",
													"\r",
													"// Seleciona valores aleatórios\r",
													"const selectedStreet = streets[Math.floor(Math.random() * streets.length)];\r",
													"const selectedNumber = numbers[Math.floor(Math.random() * numbers.length)];\r",
													"const selectedComplement = complements[Math.floor(Math.random() * complements.length)];\r",
													"const selectedDistrict = districts[Math.floor(Math.random() * districts.length)];\r",
													"\r",
													"pm.variables.set(\"street\", selectedStreet);\r",
													"pm.variables.set(\"number\", selectedNumber);\r",
													"pm.variables.set(\"complement\", selectedComplement);\r",
													"pm.variables.set(\"district\", selectedDistrict);\r",
													"\r",
													"// cidades (somente letras, com caracteres especiais permitidos, até 50 caracteres)\r",
													"const cities = [\r",
													"  \"São Paulo\", \"Rio de Janeiro\", \"Belo Horizonte\", \"Curitiba\", \"Salvador\",\r",
													"  \"Fortaleza\", \"Brasília\", \"Porto Alegre\", \"Florianópolis\", \"Goiânia\",\r",
													"  \"Campinas\", \"Natal\", \"Recife\", \"Manaus\", \"Belém\",\r",
													"  \"São Luís\", \"Campo Grande\", \"Vitória\", \"Maceió\"\r",
													"];\r",
													"\r",
													"// estados (apenas letras, com 2 caracteres obrigatórios - sigla)\r",
													"const states = [\r",
													"  \"SP\", \"RJ\", \"MG\", \"PR\", \"BA\", \"CE\", \"DF\", \"RS\", \"SC\", \"GO\",\r",
													"  \"PA\", \"PE\", \"AM\", \"MA\", \"RN\", \"AL\", \"MS\", \"ES\", \"PB\"\r",
													"];\r",
													"\r",
													"// países (somente letras, até 50 caracteres)\r",
													"const countries = [\r",
													"  \"Brasil\", \"Argentina\", \"Portugal\", \"México\", \"Espanha\",\r",
													"  \"Chile\", \"Uruguai\", \"Peru\", \"Colômbia\", \"Canadá\",\r",
													"  \"França\", \"Itália\", \"Alemanha\", \"Suíça\", \"Japão\",\r",
													"  \"Coreia\", \"Austrália\", \"Noruega\", \"Dinamarca\"\r",
													"];\r",
													"\r",
													"// CEPs válidos com máscara (somente números, no formato #####-###)\r",
													"const postalCodes = [\r",
													"  \"01001000\", \"20010001\", \"30110012\", \"80020000\", \"40010903\", \"60110000\", \"70040010\", \"90010000\", \"88010200\", \"74000001\",\r",
													"  \"13010000\", \"59010000\", \"50010902\", \"69010020\", \"66010080\", \"65010100\", \"79002123\", \"29010200\", \"57010000\"\r",
													"];\r",
													"\r",
													"const selectedCity = cities[Math.floor(Math.random() * cities.length)];\r",
													"const selectedState = states[Math.floor(Math.random() * states.length)];\r",
													"const selectedCountry = countries[Math.floor(Math.random() * countries.length)];\r",
													"const selectedPostalCode = postalCodes[Math.floor(Math.random() * postalCodes.length)];\r",
													"\r",
													"pm.variables.set(\"city\", selectedCity);\r",
													"pm.variables.set(\"state\", selectedState);\r",
													"pm.variables.set(\"country\", selectedCountry);\r",
													"pm.variables.set(\"postalCode\", selectedPostalCode);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code é 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													" \r",
													"pm.test(\"Erro de validação\", () => {\r",
													"       pm.expect(pm.response.json().error).to.be.an('array');\r",
													"    pm.expect(pm.response.json().error).to.include(\"O campo 'estado' é obrigatório.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"corporateName\": \"{{corporateName}}\",\r\n    \"registerCompany\": \"{{registerCompany}}\",\r\n    \"mail\": \"{{mail}}\",\r\n    \"matriz\": \"{{matriz}}\",\r\n    \"responsibleContact\": \"{{responsibleContact}}\",\r\n    \"telephone\": \"{{telephone}}\",\r\n    \"serviceDescription\": \"{{serviceDescription}}\",\r\n    \"address\": [\r\n        {\r\n            \"zipCode\": \"{{postalCode}}\",\r\n            \"city\": \"{{city}}\",\r\n            \"state\": \"\",\r\n            \"district\": \"{{district}}\",\r\n            \"street\": \"{{street}}\",\r\n            \"number\": \"{{number}}\",\r\n            \"complement\": \"{{complement}}\",\r\n            \"country\": \"{{country}}\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/company",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"company"
											]
										}
									},
									"response": []
								},
								{
									"name": "Estado em minúsculas",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Array com valores diferentes para \"Razão Social\"\r",
													"const corporateNames = [\"Camila Santos company\", \"TechNova Ltda\", \"Alfa Beta Corp\", \"Zeta Solutions\", \"InovaServiços\", \"Empresa Exemplo 001\", \"Startup do Bem\", \"GlobalTrade BR\", \"Serviços Rápidos\", \"MaxTI Soluções\", \"Empresa do Norte\", \"Consultoria XP\", \"AutoMarket Brasil\", \"CloudX Serviços\", \"FutureWave Ltda\", \"Rede Smart Business\", \"DevGroup Solutions\", \"HighData Inc\", \"Infinity Tech BR\"];\r",
													"\r",
													"// Seleciona um nome aleatório\r",
													"const selectedCorporateName = corporateNames[Math.floor(Math.random() * corporateNames.length)];\r",
													"\r",
													"// Define como variável para reutilizar\r",
													"pm.variables.set(\"corporateName\", selectedCorporateName);\r",
													"\r",
													"// Array com CNPJs fictícios válidos (sem máscara, como esperado no backend)\r",
													"const registerCompanies = [\r",
													"  \"12345678000195\", \"98765432000109\", \"11222333000181\", \"99887766000144\",\r",
													"  \"55667788000122\", \"33445566000177\", \"10203040000166\", \"11223344000100\",\r",
													"  \"66778899000188\", \"12312312300012\", \"44112233000155\", \"55443322000133\",\r",
													"  \"77665544000177\", \"88990011000100\", \"10111213000122\", \"15161718000190\",\r",
													"  \"19202122000101\", \"24252627000144\", \"28293031000188\"\r",
													"];\r",
													"\r",
													"// Seleciona um CNPJ aleatório\r",
													"const selectedCNPJ = registerCompanies[Math.floor(Math.random() * registerCompanies.length)];\r",
													"\r",
													"// Define como variável reutilizável\r",
													"pm.variables.set(\"registerCompany\", selectedCNPJ);\r",
													"\r",
													"\r",
													"// Array com e-mails válidos e variados\r",
													"const companyMails = [\r",
													"  \"empresa01@empresa.com.br\", \"contato@techsolucoes.com\", \"suporte@alfa.com.br\", \"info@betacorp.io\",\r",
													"  \"vendas@exemplo.org\", \"atendimento@cloudx.com\", \"diretoria@startupltda.com\", \"camila.santos@empresa.com\",\r",
													"  \"admin@inovabr.com\", \"noreply@negocios.com\", \"helpdesk@redesmart.com\", \"contato@consultoriaxp.com\",\r",
													"  \"rh@futurewave.com.br\", \"sac@automarket.com\", \"financeiro@globaltrade.com.br\", \"ti@highdata.org\",\r",
													"  \"comercial@maxsolucoes.com\", \"equipe@servicosbr.net\", \"gerencia@empresaxpto.com\"\r",
													"];\r",
													"\r",
													"// Seleciona um e-mail aleatório\r",
													"const selectedMail = companyMails[Math.floor(Math.random() * companyMails.length)];\r",
													"\r",
													"// Define como variável reutilizável\r",
													"pm.variables.set(\"mail\", selectedMail);\r",
													"\r",
													"// nomes fantasia diferentes (matriz)\r",
													"const matrizNames = [\r",
													"  \"Nuvem Computing\", \"Alpha Sistemas\", \"BetaTech\", \"ZetaCorp\", \"Smart Solutions\",\r",
													"  \"InovaTech\", \"TI Pro Business\", \"CloudWave\", \"MaxData\", \"DataSafe\",\r",
													"  \"NextGen Tech\", \"ServTI Brasil\", \"Grupo Digital\", \"NeoInfra\", \"SoftMind\",\r",
													"  \"Connect Plus\", \"FusionTI\", \"GlobalNet\", \"CyberWave\"\r",
													"];\r",
													"\r",
													"// descrições de serviços/negócio\r",
													"const serviceDescriptions = [\r",
													"  \"Desenvolvimento Personalizado\", \"Consultoria em TI\", \"Soluções em Nuvem\", \"Infraestrutura de Redes\",\r",
													"  \"Automação Comercial\", \"Plataformas Digitais\", \"Serviços de Hosting\", \"Suporte Técnico Especializado\",\r",
													"  \"Análise de Dados\", \"Desenvolvimento Web\", \"Sistemas Empresariais\", \"Segurança da Informação\",\r",
													"  \"Treinamento Corporativo\", \"Integração de Sistemas\", \"Consultoria Ágil\", \"Migração para Nuvem\",\r",
													"  \"Gestão de TI\", \"Gerenciamento de Servidores\", \"Tecnologia Educacional\"\r",
													"];\r",
													"\r",
													"// Seleção aleatória\r",
													"const selectedMatrizName = matrizNames[Math.floor(Math.random() * matrizNames.length)];\r",
													"const selectedServiceDesc = serviceDescriptions[Math.floor(Math.random() * serviceDescriptions.length)];\r",
													"\r",
													"// Armazenar como variáveis para uso no body\r",
													"pm.variables.set(\"matriz\", selectedMatrizName);\r",
													"pm.variables.set(\"serviceDescription\", selectedServiceDesc);\r",
													"\r",
													"// nomes compostos (apenas letras, com ao menos duas palavras)\r",
													"const responsibleContacts = [\r",
													"  \"Camila Santos\", \"João Pedro\", \"Ana Beatriz\", \"Carlos Eduardo\", \"Fernanda Lima\",\r",
													"  \"Rafael Borges\", \"Juliana Costa\", \"Marcelo Henrique\", \"Bruna Silva\", \"Felipe Oliveira\",\r",
													"  \"Daniela Marques\", \"Luana Ferreira\", \"Ricardo Matos\", \"Patrícia Andrade\", \"Gabriel Souza\",\r",
													"  \"Larissa Cunha\", \"Renato Castro\", \"Amanda Prado\", \"Lucas Almeida\"\r",
													"];\r",
													"\r",
													"// telefones brasileiros com máscara (máx. 15 caracteres)\r",
													"const telephones = [\r",
													"  \"11981123456789\", \"21982234567890\", \"31983345678901\", \"41984456789012\", \"51985567890123\", \"61986678901234\", \"71987789012345\", \"81988890123456\", \"91989901234567\", \"31997345671234\", \"51991567896789\", \"11992112234455\", \"21994556678899\", \"61995667789900\", \"71996778890011\", \"41998889901122\", \"81999990012233\", \"91980101123344\", \"11987111223333\"\r",
													"];\r",
													"\r",
													"// Seleção aleatória\r",
													"const selectedContact = responsibleContacts[Math.floor(Math.random() * responsibleContacts.length)];\r",
													"const selectedPhone = telephones[Math.floor(Math.random() * telephones.length)];\r",
													"\r",
													"// Setar variáveis\r",
													"pm.variables.set(\"responsibleContact\", selectedContact);\r",
													"pm.variables.set(\"telephone\", selectedPhone);\r",
													"\r",
													"// logradouros (alfanuméricos, até 50 caracteres, com caracteres especiais permitidos)\r",
													"const streets = [\r",
													"  \"Rua das Palmeiras\", \"Av. Brasil\", \"Rua 1ª de Maio\", \"Travessa do Comércio\", \"Alameda das Águias\",\r",
													"  \"Rua São João\", \"Av. Getúlio Vargas\", \"Rua dos Lírios\", \"Rua Coronel 2º Batista\", \"Rua Alfredo 'Silva'\",\r",
													"  \"Estrada do Sol\", \"Rua João 1º Neto\", \"Rua Principal - Leste\", \"Rua Vitória-Régia\", \"Alameda 5ª Norte\",\r",
													"  \"Praça Central\", \"Rua Júlio de Castro\", \"Rua Dr. Carlos 1º Martins\", \"Rua Dom Pedro II\"\r",
													"];\r",
													"\r",
													"// números (apenas dígitos, até 10 caracteres)\r",
													"const numbers = [\r",
													"  \"1010000000\", \"2020000000\", \"3030000000\", \"4040000000\", \"5050000000\", \"6060000000\", \"7070000000\", \"8080000000\", \"9090000000\", \"1001000000\",\r",
													"  \"1102000000\", \"1203000000\", \"1304000000\", \"1405000000\", \"1506000000\", \"1607000000\", \"1708000000\", \"1809000000\", \"1900000000\"\r",
													"];\r",
													"\r",
													"// complementos (alfanuméricos, com especiais permitidos, até 80 caracteres)\r",
													"const complements = [\r",
													"  \"Fundos\", \"Casa 1\", \"Apto 202\", \"Bloco B\", \"Sala 3\", \"Cobertura\", \"Térreo\", \"Galpão 2\", \"Loja 'A'\", \"Anexo 1\",\r",
													"  \"Ed. Central\", \"Torre Sul\", \"Prédio 1º\", \"Sobreloja\", \"Loja B\", \"Sala Comercial 7\", \"2º Andar\", \"Área 3\", \"Estacionamento\"\r",
													"];\r",
													"\r",
													"// bairros (alfanuméricos com especiais permitidos, até 50 caracteres)\r",
													"const districts = [\r",
													"  \"Centro\", \"Jardim das Flores\", \"Vila Nova\", \"Parque 1ª Esperança\", \"Bairro Alto\",\r",
													"  \"Residencial Alfa\", \"Jardim São João\", \"Nova 'Vida'\", \"Lagoa Azul\", \"Industrial Oeste\",\r",
													"  \"Bairro Santo André\", \"Vila Mariana\", \"Parque das Árvores\", \"Santa Luzia\", \"Água Verde\",\r",
													"  \"Vila Operária\", \"Jardim Central\", \"Colinas do Sol\", \"Residencial Leste\"\r",
													"];\r",
													"\r",
													"// Seleciona valores aleatórios\r",
													"const selectedStreet = streets[Math.floor(Math.random() * streets.length)];\r",
													"const selectedNumber = numbers[Math.floor(Math.random() * numbers.length)];\r",
													"const selectedComplement = complements[Math.floor(Math.random() * complements.length)];\r",
													"const selectedDistrict = districts[Math.floor(Math.random() * districts.length)];\r",
													"\r",
													"pm.variables.set(\"street\", selectedStreet);\r",
													"pm.variables.set(\"number\", selectedNumber);\r",
													"pm.variables.set(\"complement\", selectedComplement);\r",
													"pm.variables.set(\"district\", selectedDistrict);\r",
													"\r",
													"// cidades (somente letras, com caracteres especiais permitidos, até 50 caracteres)\r",
													"const cities = [\r",
													"  \"São Paulo\", \"Rio de Janeiro\", \"Belo Horizonte\", \"Curitiba\", \"Salvador\",\r",
													"  \"Fortaleza\", \"Brasília\", \"Porto Alegre\", \"Florianópolis\", \"Goiânia\",\r",
													"  \"Campinas\", \"Natal\", \"Recife\", \"Manaus\", \"Belém\",\r",
													"  \"São Luís\", \"Campo Grande\", \"Vitória\", \"Maceió\"\r",
													"];\r",
													"\r",
													"// estados (apenas letras, com 2 caracteres obrigatórios - sigla)\r",
													"const states = [\r",
													"  \"SP\", \"RJ\", \"MG\", \"PR\", \"BA\", \"CE\", \"DF\", \"RS\", \"SC\", \"GO\",\r",
													"  \"PA\", \"PE\", \"AM\", \"MA\", \"RN\", \"AL\", \"MS\", \"ES\", \"PB\"\r",
													"];\r",
													"\r",
													"// países (somente letras, até 50 caracteres)\r",
													"const countries = [\r",
													"  \"Brasil\", \"Argentina\", \"Portugal\", \"México\", \"Espanha\",\r",
													"  \"Chile\", \"Uruguai\", \"Peru\", \"Colômbia\", \"Canadá\",\r",
													"  \"França\", \"Itália\", \"Alemanha\", \"Suíça\", \"Japão\",\r",
													"  \"Coreia\", \"Austrália\", \"Noruega\", \"Dinamarca\"\r",
													"];\r",
													"\r",
													"// CEPs válidos com máscara (somente números, no formato #####-###)\r",
													"const postalCodes = [\r",
													"  \"01001000\", \"20010001\", \"30110012\", \"80020000\", \"40010903\", \"60110000\", \"70040010\", \"90010000\", \"88010200\", \"74000001\",\r",
													"  \"13010000\", \"59010000\", \"50010902\", \"69010020\", \"66010080\", \"65010100\", \"79002123\", \"29010200\", \"57010000\"\r",
													"];\r",
													"\r",
													"const selectedCity = cities[Math.floor(Math.random() * cities.length)];\r",
													"const selectedState = states[Math.floor(Math.random() * states.length)];\r",
													"const selectedCountry = countries[Math.floor(Math.random() * countries.length)];\r",
													"const selectedPostalCode = postalCodes[Math.floor(Math.random() * postalCodes.length)];\r",
													"\r",
													"pm.variables.set(\"city\", selectedCity);\r",
													"pm.variables.set(\"state\", selectedState);\r",
													"pm.variables.set(\"country\", selectedCountry);\r",
													"pm.variables.set(\"postalCode\", selectedPostalCode);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code é 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													" \r",
													"pm.test(\"Erro de validação\", () => {\r",
													"       pm.expect(pm.response.json().error).to.be.an('array');\r",
													"    pm.expect(pm.response.json().error).to.include(\"O campo 'estado' só pode conter letras maiúsculas\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"corporateName\": \"{{corporateName}}\",\r\n    \"registerCompany\": \"{{registerCompany}}\",\r\n    \"mail\": \"{{mail}}\",\r\n    \"matriz\": \"{{matriz}}\",\r\n    \"responsibleContact\": \"{{responsibleContact}}\",\r\n    \"telephone\": \"{{telephone}}\",\r\n    \"serviceDescription\": \"{{serviceDescription}}\",\r\n    \"address\": [\r\n        {\r\n            \"zipCode\": \"{{postalCode}}\",\r\n            \"city\": \"{{city}}\",\r\n            \"state\": \"sp\",\r\n            \"district\": \"{{district}}\",\r\n            \"street\": \"{{street}}\",\r\n            \"number\": \"{{number}}\",\r\n            \"complement\": \"{{complement}}\",\r\n            \"country\": \"{{country}}\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/company",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"company"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "País",
							"item": [
								{
									"name": "País com números",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Array com valores diferentes para \"Razão Social\"\r",
													"const corporateNames = [\"Camila Santos company\", \"TechNova Ltda\", \"Alfa Beta Corp\", \"Zeta Solutions\", \"InovaServiços\", \"Empresa Exemplo 001\", \"Startup do Bem\", \"GlobalTrade BR\", \"Serviços Rápidos\", \"MaxTI Soluções\", \"Empresa do Norte\", \"Consultoria XP\", \"AutoMarket Brasil\", \"CloudX Serviços\", \"FutureWave Ltda\", \"Rede Smart Business\", \"DevGroup Solutions\", \"HighData Inc\", \"Infinity Tech BR\"];\r",
													"\r",
													"// Seleciona um nome aleatório\r",
													"const selectedCorporateName = corporateNames[Math.floor(Math.random() * corporateNames.length)];\r",
													"\r",
													"// Define como variável para reutilizar\r",
													"pm.variables.set(\"corporateName\", selectedCorporateName);\r",
													"\r",
													"// Array com CNPJs fictícios válidos (sem máscara, como esperado no backend)\r",
													"const registerCompanies = [\r",
													"  \"12345678000195\", \"98765432000109\", \"11222333000181\", \"99887766000144\",\r",
													"  \"55667788000122\", \"33445566000177\", \"10203040000166\", \"11223344000100\",\r",
													"  \"66778899000188\", \"12312312300012\", \"44112233000155\", \"55443322000133\",\r",
													"  \"77665544000177\", \"88990011000100\", \"10111213000122\", \"15161718000190\",\r",
													"  \"19202122000101\", \"24252627000144\", \"28293031000188\"\r",
													"];\r",
													"\r",
													"// Seleciona um CNPJ aleatório\r",
													"const selectedCNPJ = registerCompanies[Math.floor(Math.random() * registerCompanies.length)];\r",
													"\r",
													"// Define como variável reutilizável\r",
													"pm.variables.set(\"registerCompany\", selectedCNPJ);\r",
													"\r",
													"\r",
													"// Array com e-mails válidos e variados\r",
													"const companyMails = [\r",
													"  \"empresa01@empresa.com.br\", \"contato@techsolucoes.com\", \"suporte@alfa.com.br\", \"info@betacorp.io\",\r",
													"  \"vendas@exemplo.org\", \"atendimento@cloudx.com\", \"diretoria@startupltda.com\", \"camila.santos@empresa.com\",\r",
													"  \"admin@inovabr.com\", \"noreply@negocios.com\", \"helpdesk@redesmart.com\", \"contato@consultoriaxp.com\",\r",
													"  \"rh@futurewave.com.br\", \"sac@automarket.com\", \"financeiro@globaltrade.com.br\", \"ti@highdata.org\",\r",
													"  \"comercial@maxsolucoes.com\", \"equipe@servicosbr.net\", \"gerencia@empresaxpto.com\"\r",
													"];\r",
													"\r",
													"// Seleciona um e-mail aleatório\r",
													"const selectedMail = companyMails[Math.floor(Math.random() * companyMails.length)];\r",
													"\r",
													"// Define como variável reutilizável\r",
													"pm.variables.set(\"mail\", selectedMail);\r",
													"\r",
													"// nomes fantasia diferentes (matriz)\r",
													"const matrizNames = [\r",
													"  \"Nuvem Computing\", \"Alpha Sistemas\", \"BetaTech\", \"ZetaCorp\", \"Smart Solutions\",\r",
													"  \"InovaTech\", \"TI Pro Business\", \"CloudWave\", \"MaxData\", \"DataSafe\",\r",
													"  \"NextGen Tech\", \"ServTI Brasil\", \"Grupo Digital\", \"NeoInfra\", \"SoftMind\",\r",
													"  \"Connect Plus\", \"FusionTI\", \"GlobalNet\", \"CyberWave\"\r",
													"];\r",
													"\r",
													"// descrições de serviços/negócio\r",
													"const serviceDescriptions = [\r",
													"  \"Desenvolvimento Personalizado\", \"Consultoria em TI\", \"Soluções em Nuvem\", \"Infraestrutura de Redes\",\r",
													"  \"Automação Comercial\", \"Plataformas Digitais\", \"Serviços de Hosting\", \"Suporte Técnico Especializado\",\r",
													"  \"Análise de Dados\", \"Desenvolvimento Web\", \"Sistemas Empresariais\", \"Segurança da Informação\",\r",
													"  \"Treinamento Corporativo\", \"Integração de Sistemas\", \"Consultoria Ágil\", \"Migração para Nuvem\",\r",
													"  \"Gestão de TI\", \"Gerenciamento de Servidores\", \"Tecnologia Educacional\"\r",
													"];\r",
													"\r",
													"// Seleção aleatória\r",
													"const selectedMatrizName = matrizNames[Math.floor(Math.random() * matrizNames.length)];\r",
													"const selectedServiceDesc = serviceDescriptions[Math.floor(Math.random() * serviceDescriptions.length)];\r",
													"\r",
													"// Armazenar como variáveis para uso no body\r",
													"pm.variables.set(\"matriz\", selectedMatrizName);\r",
													"pm.variables.set(\"serviceDescription\", selectedServiceDesc);\r",
													"\r",
													"// nomes compostos (apenas letras, com ao menos duas palavras)\r",
													"const responsibleContacts = [\r",
													"  \"Camila Santos\", \"João Pedro\", \"Ana Beatriz\", \"Carlos Eduardo\", \"Fernanda Lima\",\r",
													"  \"Rafael Borges\", \"Juliana Costa\", \"Marcelo Henrique\", \"Bruna Silva\", \"Felipe Oliveira\",\r",
													"  \"Daniela Marques\", \"Luana Ferreira\", \"Ricardo Matos\", \"Patrícia Andrade\", \"Gabriel Souza\",\r",
													"  \"Larissa Cunha\", \"Renato Castro\", \"Amanda Prado\", \"Lucas Almeida\"\r",
													"];\r",
													"\r",
													"// telefones brasileiros com máscara (máx. 15 caracteres)\r",
													"const telephones = [\r",
													"  \"11981123456789\", \"21982234567890\", \"31983345678901\", \"41984456789012\", \"51985567890123\", \"61986678901234\", \"71987789012345\", \"81988890123456\", \"91989901234567\", \"31997345671234\", \"51991567896789\", \"11992112234455\", \"21994556678899\", \"61995667789900\", \"71996778890011\", \"41998889901122\", \"81999990012233\", \"91980101123344\", \"11987111223333\"\r",
													"];\r",
													"\r",
													"// Seleção aleatória\r",
													"const selectedContact = responsibleContacts[Math.floor(Math.random() * responsibleContacts.length)];\r",
													"const selectedPhone = telephones[Math.floor(Math.random() * telephones.length)];\r",
													"\r",
													"// Setar variáveis\r",
													"pm.variables.set(\"responsibleContact\", selectedContact);\r",
													"pm.variables.set(\"telephone\", selectedPhone);\r",
													"\r",
													"// logradouros (alfanuméricos, até 50 caracteres, com caracteres especiais permitidos)\r",
													"const streets = [\r",
													"  \"Rua das Palmeiras\", \"Av. Brasil\", \"Rua 1ª de Maio\", \"Travessa do Comércio\", \"Alameda das Águias\",\r",
													"  \"Rua São João\", \"Av. Getúlio Vargas\", \"Rua dos Lírios\", \"Rua Coronel 2º Batista\", \"Rua Alfredo 'Silva'\",\r",
													"  \"Estrada do Sol\", \"Rua João 1º Neto\", \"Rua Principal - Leste\", \"Rua Vitória-Régia\", \"Alameda 5ª Norte\",\r",
													"  \"Praça Central\", \"Rua Júlio de Castro\", \"Rua Dr. Carlos 1º Martins\", \"Rua Dom Pedro II\"\r",
													"];\r",
													"\r",
													"// números (apenas dígitos, até 10 caracteres)\r",
													"const numbers = [\r",
													"  \"1010000000\", \"2020000000\", \"3030000000\", \"4040000000\", \"5050000000\", \"6060000000\", \"7070000000\", \"8080000000\", \"9090000000\", \"1001000000\",\r",
													"  \"1102000000\", \"1203000000\", \"1304000000\", \"1405000000\", \"1506000000\", \"1607000000\", \"1708000000\", \"1809000000\", \"1900000000\"\r",
													"];\r",
													"\r",
													"// complementos (alfanuméricos, com especiais permitidos, até 80 caracteres)\r",
													"const complements = [\r",
													"  \"Fundos\", \"Casa 1\", \"Apto 202\", \"Bloco B\", \"Sala 3\", \"Cobertura\", \"Térreo\", \"Galpão 2\", \"Loja 'A'\", \"Anexo 1\",\r",
													"  \"Ed. Central\", \"Torre Sul\", \"Prédio 1º\", \"Sobreloja\", \"Loja B\", \"Sala Comercial 7\", \"2º Andar\", \"Área 3\", \"Estacionamento\"\r",
													"];\r",
													"\r",
													"// bairros (alfanuméricos com especiais permitidos, até 50 caracteres)\r",
													"const districts = [\r",
													"  \"Centro\", \"Jardim das Flores\", \"Vila Nova\", \"Parque 1ª Esperança\", \"Bairro Alto\",\r",
													"  \"Residencial Alfa\", \"Jardim São João\", \"Nova 'Vida'\", \"Lagoa Azul\", \"Industrial Oeste\",\r",
													"  \"Bairro Santo André\", \"Vila Mariana\", \"Parque das Árvores\", \"Santa Luzia\", \"Água Verde\",\r",
													"  \"Vila Operária\", \"Jardim Central\", \"Colinas do Sol\", \"Residencial Leste\"\r",
													"];\r",
													"\r",
													"// Seleciona valores aleatórios\r",
													"const selectedStreet = streets[Math.floor(Math.random() * streets.length)];\r",
													"const selectedNumber = numbers[Math.floor(Math.random() * numbers.length)];\r",
													"const selectedComplement = complements[Math.floor(Math.random() * complements.length)];\r",
													"const selectedDistrict = districts[Math.floor(Math.random() * districts.length)];\r",
													"\r",
													"pm.variables.set(\"street\", selectedStreet);\r",
													"pm.variables.set(\"number\", selectedNumber);\r",
													"pm.variables.set(\"complement\", selectedComplement);\r",
													"pm.variables.set(\"district\", selectedDistrict);\r",
													"\r",
													"// cidades (somente letras, com caracteres especiais permitidos, até 50 caracteres)\r",
													"const cities = [\r",
													"  \"São Paulo\", \"Rio de Janeiro\", \"Belo Horizonte\", \"Curitiba\", \"Salvador\",\r",
													"  \"Fortaleza\", \"Brasília\", \"Porto Alegre\", \"Florianópolis\", \"Goiânia\",\r",
													"  \"Campinas\", \"Natal\", \"Recife\", \"Manaus\", \"Belém\",\r",
													"  \"São Luís\", \"Campo Grande\", \"Vitória\", \"Maceió\"\r",
													"];\r",
													"\r",
													"// estados (apenas letras, com 2 caracteres obrigatórios - sigla)\r",
													"const states = [\r",
													"  \"SP\", \"RJ\", \"MG\", \"PR\", \"BA\", \"CE\", \"DF\", \"RS\", \"SC\", \"GO\",\r",
													"  \"PA\", \"PE\", \"AM\", \"MA\", \"RN\", \"AL\", \"MS\", \"ES\", \"PB\"\r",
													"];\r",
													"\r",
													"// países (somente letras, até 50 caracteres)\r",
													"const countries = [\r",
													"  \"Brasil\", \"Argentina\", \"Portugal\", \"México\", \"Espanha\",\r",
													"  \"Chile\", \"Uruguai\", \"Peru\", \"Colômbia\", \"Canadá\",\r",
													"  \"França\", \"Itália\", \"Alemanha\", \"Suíça\", \"Japão\",\r",
													"  \"Coreia\", \"Austrália\", \"Noruega\", \"Dinamarca\"\r",
													"];\r",
													"\r",
													"// CEPs válidos com máscara (somente números, no formato #####-###)\r",
													"const postalCodes = [\r",
													"  \"01001000\", \"20010001\", \"30110012\", \"80020000\", \"40010903\", \"60110000\", \"70040010\", \"90010000\", \"88010200\", \"74000001\",\r",
													"  \"13010000\", \"59010000\", \"50010902\", \"69010020\", \"66010080\", \"65010100\", \"79002123\", \"29010200\", \"57010000\"\r",
													"];\r",
													"\r",
													"const selectedCity = cities[Math.floor(Math.random() * cities.length)];\r",
													"const selectedState = states[Math.floor(Math.random() * states.length)];\r",
													"const selectedCountry = countries[Math.floor(Math.random() * countries.length)];\r",
													"const selectedPostalCode = postalCodes[Math.floor(Math.random() * postalCodes.length)];\r",
													"\r",
													"pm.variables.set(\"city\", selectedCity);\r",
													"pm.variables.set(\"state\", selectedState);\r",
													"pm.variables.set(\"country\", selectedCountry);\r",
													"pm.variables.set(\"postalCode\", selectedPostalCode);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code é 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													" \r",
													"pm.test(\"Erro de validação\", () => {\r",
													"       pm.expect(pm.response.json().error).to.be.an('array');\r",
													"    pm.expect(pm.response.json().error).to.include(\"O campo 'País' só pode conter apenas letras.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"corporateName\": \"{{corporateName}}\",\r\n    \"registerCompany\": \"{{registerCompany}}\",\r\n    \"mail\": \"{{mail}}\",\r\n    \"matriz\": \"{{matriz}}\",\r\n    \"responsibleContact\": \"{{responsibleContact}}\",\r\n    \"telephone\": \"{{telephone}}\",\r\n    \"serviceDescription\": \"{{serviceDescription}}\",\r\n    \"address\": [\r\n        {\r\n            \"zipCode\": \"{{postalCode}}\",\r\n            \"city\": \"{{city}}\",\r\n            \"state\": \"{{state}}\",\r\n            \"district\": \"{{district}}\",\r\n            \"street\": \"{{street}}\",\r\n            \"number\": \"{{number}}\",\r\n            \"complement\": \"{{complement}}\",\r\n            \"country\": \"Brasil123\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/company",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"company"
											]
										}
									},
									"response": []
								},
								{
									"name": "País com mais de 50 caracteres",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Array com valores diferentes para \"Razão Social\"\r",
													"const corporateNames = [\"Camila Santos company\", \"TechNova Ltda\", \"Alfa Beta Corp\", \"Zeta Solutions\", \"InovaServiços\", \"Empresa Exemplo 001\", \"Startup do Bem\", \"GlobalTrade BR\", \"Serviços Rápidos\", \"MaxTI Soluções\", \"Empresa do Norte\", \"Consultoria XP\", \"AutoMarket Brasil\", \"CloudX Serviços\", \"FutureWave Ltda\", \"Rede Smart Business\", \"DevGroup Solutions\", \"HighData Inc\", \"Infinity Tech BR\"];\r",
													"\r",
													"// Seleciona um nome aleatório\r",
													"const selectedCorporateName = corporateNames[Math.floor(Math.random() * corporateNames.length)];\r",
													"\r",
													"// Define como variável para reutilizar\r",
													"pm.variables.set(\"corporateName\", selectedCorporateName);\r",
													"\r",
													"// Array com CNPJs fictícios válidos (sem máscara, como esperado no backend)\r",
													"const registerCompanies = [\r",
													"  \"12345678000195\", \"98765432000109\", \"11222333000181\", \"99887766000144\",\r",
													"  \"55667788000122\", \"33445566000177\", \"10203040000166\", \"11223344000100\",\r",
													"  \"66778899000188\", \"12312312300012\", \"44112233000155\", \"55443322000133\",\r",
													"  \"77665544000177\", \"88990011000100\", \"10111213000122\", \"15161718000190\",\r",
													"  \"19202122000101\", \"24252627000144\", \"28293031000188\"\r",
													"];\r",
													"\r",
													"// Seleciona um CNPJ aleatório\r",
													"const selectedCNPJ = registerCompanies[Math.floor(Math.random() * registerCompanies.length)];\r",
													"\r",
													"// Define como variável reutilizável\r",
													"pm.variables.set(\"registerCompany\", selectedCNPJ);\r",
													"\r",
													"\r",
													"// Array com e-mails válidos e variados\r",
													"const companyMails = [\r",
													"  \"empresa01@empresa.com.br\", \"contato@techsolucoes.com\", \"suporte@alfa.com.br\", \"info@betacorp.io\",\r",
													"  \"vendas@exemplo.org\", \"atendimento@cloudx.com\", \"diretoria@startupltda.com\", \"camila.santos@empresa.com\",\r",
													"  \"admin@inovabr.com\", \"noreply@negocios.com\", \"helpdesk@redesmart.com\", \"contato@consultoriaxp.com\",\r",
													"  \"rh@futurewave.com.br\", \"sac@automarket.com\", \"financeiro@globaltrade.com.br\", \"ti@highdata.org\",\r",
													"  \"comercial@maxsolucoes.com\", \"equipe@servicosbr.net\", \"gerencia@empresaxpto.com\"\r",
													"];\r",
													"\r",
													"// Seleciona um e-mail aleatório\r",
													"const selectedMail = companyMails[Math.floor(Math.random() * companyMails.length)];\r",
													"\r",
													"// Define como variável reutilizável\r",
													"pm.variables.set(\"mail\", selectedMail);\r",
													"\r",
													"// nomes fantasia diferentes (matriz)\r",
													"const matrizNames = [\r",
													"  \"Nuvem Computing\", \"Alpha Sistemas\", \"BetaTech\", \"ZetaCorp\", \"Smart Solutions\",\r",
													"  \"InovaTech\", \"TI Pro Business\", \"CloudWave\", \"MaxData\", \"DataSafe\",\r",
													"  \"NextGen Tech\", \"ServTI Brasil\", \"Grupo Digital\", \"NeoInfra\", \"SoftMind\",\r",
													"  \"Connect Plus\", \"FusionTI\", \"GlobalNet\", \"CyberWave\"\r",
													"];\r",
													"\r",
													"// descrições de serviços/negócio\r",
													"const serviceDescriptions = [\r",
													"  \"Desenvolvimento Personalizado\", \"Consultoria em TI\", \"Soluções em Nuvem\", \"Infraestrutura de Redes\",\r",
													"  \"Automação Comercial\", \"Plataformas Digitais\", \"Serviços de Hosting\", \"Suporte Técnico Especializado\",\r",
													"  \"Análise de Dados\", \"Desenvolvimento Web\", \"Sistemas Empresariais\", \"Segurança da Informação\",\r",
													"  \"Treinamento Corporativo\", \"Integração de Sistemas\", \"Consultoria Ágil\", \"Migração para Nuvem\",\r",
													"  \"Gestão de TI\", \"Gerenciamento de Servidores\", \"Tecnologia Educacional\"\r",
													"];\r",
													"\r",
													"// Seleção aleatória\r",
													"const selectedMatrizName = matrizNames[Math.floor(Math.random() * matrizNames.length)];\r",
													"const selectedServiceDesc = serviceDescriptions[Math.floor(Math.random() * serviceDescriptions.length)];\r",
													"\r",
													"// Armazenar como variáveis para uso no body\r",
													"pm.variables.set(\"matriz\", selectedMatrizName);\r",
													"pm.variables.set(\"serviceDescription\", selectedServiceDesc);\r",
													"\r",
													"// nomes compostos (apenas letras, com ao menos duas palavras)\r",
													"const responsibleContacts = [\r",
													"  \"Camila Santos\", \"João Pedro\", \"Ana Beatriz\", \"Carlos Eduardo\", \"Fernanda Lima\",\r",
													"  \"Rafael Borges\", \"Juliana Costa\", \"Marcelo Henrique\", \"Bruna Silva\", \"Felipe Oliveira\",\r",
													"  \"Daniela Marques\", \"Luana Ferreira\", \"Ricardo Matos\", \"Patrícia Andrade\", \"Gabriel Souza\",\r",
													"  \"Larissa Cunha\", \"Renato Castro\", \"Amanda Prado\", \"Lucas Almeida\"\r",
													"];\r",
													"\r",
													"// telefones brasileiros com máscara (máx. 15 caracteres)\r",
													"const telephones = [\r",
													"  \"11981123456789\", \"21982234567890\", \"31983345678901\", \"41984456789012\", \"51985567890123\", \"61986678901234\", \"71987789012345\", \"81988890123456\", \"91989901234567\", \"31997345671234\", \"51991567896789\", \"11992112234455\", \"21994556678899\", \"61995667789900\", \"71996778890011\", \"41998889901122\", \"81999990012233\", \"91980101123344\", \"11987111223333\"\r",
													"];\r",
													"\r",
													"// Seleção aleatória\r",
													"const selectedContact = responsibleContacts[Math.floor(Math.random() * responsibleContacts.length)];\r",
													"const selectedPhone = telephones[Math.floor(Math.random() * telephones.length)];\r",
													"\r",
													"// Setar variáveis\r",
													"pm.variables.set(\"responsibleContact\", selectedContact);\r",
													"pm.variables.set(\"telephone\", selectedPhone);\r",
													"\r",
													"// logradouros (alfanuméricos, até 50 caracteres, com caracteres especiais permitidos)\r",
													"const streets = [\r",
													"  \"Rua das Palmeiras\", \"Av. Brasil\", \"Rua 1ª de Maio\", \"Travessa do Comércio\", \"Alameda das Águias\",\r",
													"  \"Rua São João\", \"Av. Getúlio Vargas\", \"Rua dos Lírios\", \"Rua Coronel 2º Batista\", \"Rua Alfredo 'Silva'\",\r",
													"  \"Estrada do Sol\", \"Rua João 1º Neto\", \"Rua Principal - Leste\", \"Rua Vitória-Régia\", \"Alameda 5ª Norte\",\r",
													"  \"Praça Central\", \"Rua Júlio de Castro\", \"Rua Dr. Carlos 1º Martins\", \"Rua Dom Pedro II\"\r",
													"];\r",
													"\r",
													"// números (apenas dígitos, até 10 caracteres)\r",
													"const numbers = [\r",
													"  \"1010000000\", \"2020000000\", \"3030000000\", \"4040000000\", \"5050000000\", \"6060000000\", \"7070000000\", \"8080000000\", \"9090000000\", \"1001000000\",\r",
													"  \"1102000000\", \"1203000000\", \"1304000000\", \"1405000000\", \"1506000000\", \"1607000000\", \"1708000000\", \"1809000000\", \"1900000000\"\r",
													"];\r",
													"\r",
													"// complementos (alfanuméricos, com especiais permitidos, até 80 caracteres)\r",
													"const complements = [\r",
													"  \"Fundos\", \"Casa 1\", \"Apto 202\", \"Bloco B\", \"Sala 3\", \"Cobertura\", \"Térreo\", \"Galpão 2\", \"Loja 'A'\", \"Anexo 1\",\r",
													"  \"Ed. Central\", \"Torre Sul\", \"Prédio 1º\", \"Sobreloja\", \"Loja B\", \"Sala Comercial 7\", \"2º Andar\", \"Área 3\", \"Estacionamento\"\r",
													"];\r",
													"\r",
													"// bairros (alfanuméricos com especiais permitidos, até 50 caracteres)\r",
													"const districts = [\r",
													"  \"Centro\", \"Jardim das Flores\", \"Vila Nova\", \"Parque 1ª Esperança\", \"Bairro Alto\",\r",
													"  \"Residencial Alfa\", \"Jardim São João\", \"Nova 'Vida'\", \"Lagoa Azul\", \"Industrial Oeste\",\r",
													"  \"Bairro Santo André\", \"Vila Mariana\", \"Parque das Árvores\", \"Santa Luzia\", \"Água Verde\",\r",
													"  \"Vila Operária\", \"Jardim Central\", \"Colinas do Sol\", \"Residencial Leste\"\r",
													"];\r",
													"\r",
													"// Seleciona valores aleatórios\r",
													"const selectedStreet = streets[Math.floor(Math.random() * streets.length)];\r",
													"const selectedNumber = numbers[Math.floor(Math.random() * numbers.length)];\r",
													"const selectedComplement = complements[Math.floor(Math.random() * complements.length)];\r",
													"const selectedDistrict = districts[Math.floor(Math.random() * districts.length)];\r",
													"\r",
													"pm.variables.set(\"street\", selectedStreet);\r",
													"pm.variables.set(\"number\", selectedNumber);\r",
													"pm.variables.set(\"complement\", selectedComplement);\r",
													"pm.variables.set(\"district\", selectedDistrict);\r",
													"\r",
													"// cidades (somente letras, com caracteres especiais permitidos, até 50 caracteres)\r",
													"const cities = [\r",
													"  \"São Paulo\", \"Rio de Janeiro\", \"Belo Horizonte\", \"Curitiba\", \"Salvador\",\r",
													"  \"Fortaleza\", \"Brasília\", \"Porto Alegre\", \"Florianópolis\", \"Goiânia\",\r",
													"  \"Campinas\", \"Natal\", \"Recife\", \"Manaus\", \"Belém\",\r",
													"  \"São Luís\", \"Campo Grande\", \"Vitória\", \"Maceió\"\r",
													"];\r",
													"\r",
													"// estados (apenas letras, com 2 caracteres obrigatórios - sigla)\r",
													"const states = [\r",
													"  \"SP\", \"RJ\", \"MG\", \"PR\", \"BA\", \"CE\", \"DF\", \"RS\", \"SC\", \"GO\",\r",
													"  \"PA\", \"PE\", \"AM\", \"MA\", \"RN\", \"AL\", \"MS\", \"ES\", \"PB\"\r",
													"];\r",
													"\r",
													"// países (somente letras, até 50 caracteres)\r",
													"const countries = [\r",
													"  \"Brasil\", \"Argentina\", \"Portugal\", \"México\", \"Espanha\",\r",
													"  \"Chile\", \"Uruguai\", \"Peru\", \"Colômbia\", \"Canadá\",\r",
													"  \"França\", \"Itália\", \"Alemanha\", \"Suíça\", \"Japão\",\r",
													"  \"Coreia\", \"Austrália\", \"Noruega\", \"Dinamarca\"\r",
													"];\r",
													"\r",
													"// CEPs válidos com máscara (somente números, no formato #####-###)\r",
													"const postalCodes = [\r",
													"  \"01001000\", \"20010001\", \"30110012\", \"80020000\", \"40010903\", \"60110000\", \"70040010\", \"90010000\", \"88010200\", \"74000001\",\r",
													"  \"13010000\", \"59010000\", \"50010902\", \"69010020\", \"66010080\", \"65010100\", \"79002123\", \"29010200\", \"57010000\"\r",
													"];\r",
													"\r",
													"const selectedCity = cities[Math.floor(Math.random() * cities.length)];\r",
													"const selectedState = states[Math.floor(Math.random() * states.length)];\r",
													"const selectedCountry = countries[Math.floor(Math.random() * countries.length)];\r",
													"const selectedPostalCode = postalCodes[Math.floor(Math.random() * postalCodes.length)];\r",
													"\r",
													"pm.variables.set(\"city\", selectedCity);\r",
													"pm.variables.set(\"state\", selectedState);\r",
													"pm.variables.set(\"country\", selectedCountry);\r",
													"pm.variables.set(\"postalCode\", selectedPostalCode);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code é 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													" \r",
													"pm.test(\"Erro de validação\", () => {\r",
													"       pm.expect(pm.response.json().error).to.be.an('array');\r",
													"    pm.expect(pm.response.json().error).to.include(\"O campo País permite até 50 caracteres.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"corporateName\": \"{{corporateName}}\",\r\n    \"registerCompany\": \"{{registerCompany}}\",\r\n    \"mail\": \"{{mail}}\",\r\n    \"matriz\": \"{{matriz}}\",\r\n    \"responsibleContact\": \"{{responsibleContact}}\",\r\n    \"telephone\": \"{{telephone}}\",\r\n    \"serviceDescription\": \"{{serviceDescription}}\",\r\n    \"address\": [\r\n        {\r\n            \"zipCode\": \"{{postalCode}}\",\r\n            \"city\": \"{{city}}\",\r\n            \"state\": \"{{state}}\",\r\n            \"district\": \"{{district}}\",\r\n            \"street\": \"{{street}}\",\r\n            \"number\": \"{{number}}\",\r\n            \"complement\": \"{{complement}}\",\r\n            \"country\": \"qwertyuiopasdfghjklzxcvbnmqwertyuiopasdfghjklzxcvbn\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/company",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"company"
											]
										}
									},
									"response": []
								},
								{
									"name": "Campo País vazio",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Array com valores diferentes para \"Razão Social\"\r",
													"const corporateNames = [\"Camila Santos company\", \"TechNova Ltda\", \"Alfa Beta Corp\", \"Zeta Solutions\", \"InovaServiços\", \"Empresa Exemplo 001\", \"Startup do Bem\", \"GlobalTrade BR\", \"Serviços Rápidos\", \"MaxTI Soluções\", \"Empresa do Norte\", \"Consultoria XP\", \"AutoMarket Brasil\", \"CloudX Serviços\", \"FutureWave Ltda\", \"Rede Smart Business\", \"DevGroup Solutions\", \"HighData Inc\", \"Infinity Tech BR\"];\r",
													"\r",
													"// Seleciona um nome aleatório\r",
													"const selectedCorporateName = corporateNames[Math.floor(Math.random() * corporateNames.length)];\r",
													"\r",
													"// Define como variável para reutilizar\r",
													"pm.variables.set(\"corporateName\", selectedCorporateName);\r",
													"\r",
													"// Array com CNPJs fictícios válidos (sem máscara, como esperado no backend)\r",
													"const registerCompanies = [\r",
													"  \"12345678000195\", \"98765432000109\", \"11222333000181\", \"99887766000144\",\r",
													"  \"55667788000122\", \"33445566000177\", \"10203040000166\", \"11223344000100\",\r",
													"  \"66778899000188\", \"12312312300012\", \"44112233000155\", \"55443322000133\",\r",
													"  \"77665544000177\", \"88990011000100\", \"10111213000122\", \"15161718000190\",\r",
													"  \"19202122000101\", \"24252627000144\", \"28293031000188\"\r",
													"];\r",
													"\r",
													"// Seleciona um CNPJ aleatório\r",
													"const selectedCNPJ = registerCompanies[Math.floor(Math.random() * registerCompanies.length)];\r",
													"\r",
													"// Define como variável reutilizável\r",
													"pm.variables.set(\"registerCompany\", selectedCNPJ);\r",
													"\r",
													"\r",
													"// Array com e-mails válidos e variados\r",
													"const companyMails = [\r",
													"  \"empresa01@empresa.com.br\", \"contato@techsolucoes.com\", \"suporte@alfa.com.br\", \"info@betacorp.io\",\r",
													"  \"vendas@exemplo.org\", \"atendimento@cloudx.com\", \"diretoria@startupltda.com\", \"camila.santos@empresa.com\",\r",
													"  \"admin@inovabr.com\", \"noreply@negocios.com\", \"helpdesk@redesmart.com\", \"contato@consultoriaxp.com\",\r",
													"  \"rh@futurewave.com.br\", \"sac@automarket.com\", \"financeiro@globaltrade.com.br\", \"ti@highdata.org\",\r",
													"  \"comercial@maxsolucoes.com\", \"equipe@servicosbr.net\", \"gerencia@empresaxpto.com\"\r",
													"];\r",
													"\r",
													"// Seleciona um e-mail aleatório\r",
													"const selectedMail = companyMails[Math.floor(Math.random() * companyMails.length)];\r",
													"\r",
													"// Define como variável reutilizável\r",
													"pm.variables.set(\"mail\", selectedMail);\r",
													"\r",
													"// nomes fantasia diferentes (matriz)\r",
													"const matrizNames = [\r",
													"  \"Nuvem Computing\", \"Alpha Sistemas\", \"BetaTech\", \"ZetaCorp\", \"Smart Solutions\",\r",
													"  \"InovaTech\", \"TI Pro Business\", \"CloudWave\", \"MaxData\", \"DataSafe\",\r",
													"  \"NextGen Tech\", \"ServTI Brasil\", \"Grupo Digital\", \"NeoInfra\", \"SoftMind\",\r",
													"  \"Connect Plus\", \"FusionTI\", \"GlobalNet\", \"CyberWave\"\r",
													"];\r",
													"\r",
													"// descrições de serviços/negócio\r",
													"const serviceDescriptions = [\r",
													"  \"Desenvolvimento Personalizado\", \"Consultoria em TI\", \"Soluções em Nuvem\", \"Infraestrutura de Redes\",\r",
													"  \"Automação Comercial\", \"Plataformas Digitais\", \"Serviços de Hosting\", \"Suporte Técnico Especializado\",\r",
													"  \"Análise de Dados\", \"Desenvolvimento Web\", \"Sistemas Empresariais\", \"Segurança da Informação\",\r",
													"  \"Treinamento Corporativo\", \"Integração de Sistemas\", \"Consultoria Ágil\", \"Migração para Nuvem\",\r",
													"  \"Gestão de TI\", \"Gerenciamento de Servidores\", \"Tecnologia Educacional\"\r",
													"];\r",
													"\r",
													"// Seleção aleatória\r",
													"const selectedMatrizName = matrizNames[Math.floor(Math.random() * matrizNames.length)];\r",
													"const selectedServiceDesc = serviceDescriptions[Math.floor(Math.random() * serviceDescriptions.length)];\r",
													"\r",
													"// Armazenar como variáveis para uso no body\r",
													"pm.variables.set(\"matriz\", selectedMatrizName);\r",
													"pm.variables.set(\"serviceDescription\", selectedServiceDesc);\r",
													"\r",
													"// nomes compostos (apenas letras, com ao menos duas palavras)\r",
													"const responsibleContacts = [\r",
													"  \"Camila Santos\", \"João Pedro\", \"Ana Beatriz\", \"Carlos Eduardo\", \"Fernanda Lima\",\r",
													"  \"Rafael Borges\", \"Juliana Costa\", \"Marcelo Henrique\", \"Bruna Silva\", \"Felipe Oliveira\",\r",
													"  \"Daniela Marques\", \"Luana Ferreira\", \"Ricardo Matos\", \"Patrícia Andrade\", \"Gabriel Souza\",\r",
													"  \"Larissa Cunha\", \"Renato Castro\", \"Amanda Prado\", \"Lucas Almeida\"\r",
													"];\r",
													"\r",
													"// telefones brasileiros com máscara (máx. 15 caracteres)\r",
													"const telephones = [\r",
													"  \"11981123456789\", \"21982234567890\", \"31983345678901\", \"41984456789012\", \"51985567890123\", \"61986678901234\", \"71987789012345\", \"81988890123456\", \"91989901234567\", \"31997345671234\", \"51991567896789\", \"11992112234455\", \"21994556678899\", \"61995667789900\", \"71996778890011\", \"41998889901122\", \"81999990012233\", \"91980101123344\", \"11987111223333\"\r",
													"];\r",
													"\r",
													"// Seleção aleatória\r",
													"const selectedContact = responsibleContacts[Math.floor(Math.random() * responsibleContacts.length)];\r",
													"const selectedPhone = telephones[Math.floor(Math.random() * telephones.length)];\r",
													"\r",
													"// Setar variáveis\r",
													"pm.variables.set(\"responsibleContact\", selectedContact);\r",
													"pm.variables.set(\"telephone\", selectedPhone);\r",
													"\r",
													"// logradouros (alfanuméricos, até 50 caracteres, com caracteres especiais permitidos)\r",
													"const streets = [\r",
													"  \"Rua das Palmeiras\", \"Av. Brasil\", \"Rua 1ª de Maio\", \"Travessa do Comércio\", \"Alameda das Águias\",\r",
													"  \"Rua São João\", \"Av. Getúlio Vargas\", \"Rua dos Lírios\", \"Rua Coronel 2º Batista\", \"Rua Alfredo 'Silva'\",\r",
													"  \"Estrada do Sol\", \"Rua João 1º Neto\", \"Rua Principal - Leste\", \"Rua Vitória-Régia\", \"Alameda 5ª Norte\",\r",
													"  \"Praça Central\", \"Rua Júlio de Castro\", \"Rua Dr. Carlos 1º Martins\", \"Rua Dom Pedro II\"\r",
													"];\r",
													"\r",
													"// números (apenas dígitos, até 10 caracteres)\r",
													"const numbers = [\r",
													"  \"1010000000\", \"2020000000\", \"3030000000\", \"4040000000\", \"5050000000\", \"6060000000\", \"7070000000\", \"8080000000\", \"9090000000\", \"1001000000\",\r",
													"  \"1102000000\", \"1203000000\", \"1304000000\", \"1405000000\", \"1506000000\", \"1607000000\", \"1708000000\", \"1809000000\", \"1900000000\"\r",
													"];\r",
													"\r",
													"// complementos (alfanuméricos, com especiais permitidos, até 80 caracteres)\r",
													"const complements = [\r",
													"  \"Fundos\", \"Casa 1\", \"Apto 202\", \"Bloco B\", \"Sala 3\", \"Cobertura\", \"Térreo\", \"Galpão 2\", \"Loja 'A'\", \"Anexo 1\",\r",
													"  \"Ed. Central\", \"Torre Sul\", \"Prédio 1º\", \"Sobreloja\", \"Loja B\", \"Sala Comercial 7\", \"2º Andar\", \"Área 3\", \"Estacionamento\"\r",
													"];\r",
													"\r",
													"// bairros (alfanuméricos com especiais permitidos, até 50 caracteres)\r",
													"const districts = [\r",
													"  \"Centro\", \"Jardim das Flores\", \"Vila Nova\", \"Parque 1ª Esperança\", \"Bairro Alto\",\r",
													"  \"Residencial Alfa\", \"Jardim São João\", \"Nova 'Vida'\", \"Lagoa Azul\", \"Industrial Oeste\",\r",
													"  \"Bairro Santo André\", \"Vila Mariana\", \"Parque das Árvores\", \"Santa Luzia\", \"Água Verde\",\r",
													"  \"Vila Operária\", \"Jardim Central\", \"Colinas do Sol\", \"Residencial Leste\"\r",
													"];\r",
													"\r",
													"// Seleciona valores aleatórios\r",
													"const selectedStreet = streets[Math.floor(Math.random() * streets.length)];\r",
													"const selectedNumber = numbers[Math.floor(Math.random() * numbers.length)];\r",
													"const selectedComplement = complements[Math.floor(Math.random() * complements.length)];\r",
													"const selectedDistrict = districts[Math.floor(Math.random() * districts.length)];\r",
													"\r",
													"pm.variables.set(\"street\", selectedStreet);\r",
													"pm.variables.set(\"number\", selectedNumber);\r",
													"pm.variables.set(\"complement\", selectedComplement);\r",
													"pm.variables.set(\"district\", selectedDistrict);\r",
													"\r",
													"// cidades (somente letras, com caracteres especiais permitidos, até 50 caracteres)\r",
													"const cities = [\r",
													"  \"São Paulo\", \"Rio de Janeiro\", \"Belo Horizonte\", \"Curitiba\", \"Salvador\",\r",
													"  \"Fortaleza\", \"Brasília\", \"Porto Alegre\", \"Florianópolis\", \"Goiânia\",\r",
													"  \"Campinas\", \"Natal\", \"Recife\", \"Manaus\", \"Belém\",\r",
													"  \"São Luís\", \"Campo Grande\", \"Vitória\", \"Maceió\"\r",
													"];\r",
													"\r",
													"// estados (apenas letras, com 2 caracteres obrigatórios - sigla)\r",
													"const states = [\r",
													"  \"SP\", \"RJ\", \"MG\", \"PR\", \"BA\", \"CE\", \"DF\", \"RS\", \"SC\", \"GO\",\r",
													"  \"PA\", \"PE\", \"AM\", \"MA\", \"RN\", \"AL\", \"MS\", \"ES\", \"PB\"\r",
													"];\r",
													"\r",
													"// países (somente letras, até 50 caracteres)\r",
													"const countries = [\r",
													"  \"Brasil\", \"Argentina\", \"Portugal\", \"México\", \"Espanha\",\r",
													"  \"Chile\", \"Uruguai\", \"Peru\", \"Colômbia\", \"Canadá\",\r",
													"  \"França\", \"Itália\", \"Alemanha\", \"Suíça\", \"Japão\",\r",
													"  \"Coreia\", \"Austrália\", \"Noruega\", \"Dinamarca\"\r",
													"];\r",
													"\r",
													"// CEPs válidos com máscara (somente números, no formato #####-###)\r",
													"const postalCodes = [\r",
													"  \"01001000\", \"20010001\", \"30110012\", \"80020000\", \"40010903\", \"60110000\", \"70040010\", \"90010000\", \"88010200\", \"74000001\",\r",
													"  \"13010000\", \"59010000\", \"50010902\", \"69010020\", \"66010080\", \"65010100\", \"79002123\", \"29010200\", \"57010000\"\r",
													"];\r",
													"\r",
													"const selectedCity = cities[Math.floor(Math.random() * cities.length)];\r",
													"const selectedState = states[Math.floor(Math.random() * states.length)];\r",
													"const selectedCountry = countries[Math.floor(Math.random() * countries.length)];\r",
													"const selectedPostalCode = postalCodes[Math.floor(Math.random() * postalCodes.length)];\r",
													"\r",
													"pm.variables.set(\"city\", selectedCity);\r",
													"pm.variables.set(\"state\", selectedState);\r",
													"pm.variables.set(\"country\", selectedCountry);\r",
													"pm.variables.set(\"postalCode\", selectedPostalCode);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code é 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													" \r",
													"pm.test(\"Erro de validação\", () => {\r",
													"       pm.expect(pm.response.json().error).to.be.an('array');\r",
													"    pm.expect(pm.response.json().error).to.include(\"O campo País é obrigatório.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"corporateName\": \"{{corporateName}}\",\r\n    \"registerCompany\": \"{{registerCompany}}\",\r\n    \"mail\": \"{{mail}}\",\r\n    \"matriz\": \"{{matriz}}\",\r\n    \"responsibleContact\": \"{{responsibleContact}}\",\r\n    \"telephone\": \"{{telephone}}\",\r\n    \"serviceDescription\": \"{{serviceDescription}}\",\r\n    \"address\": [\r\n        {\r\n            \"zipCode\": \"{{postalCode}}\",\r\n            \"city\": \"{{city}}\",\r\n            \"state\": \"{{state}}\",\r\n            \"district\": \"{{district}}\",\r\n            \"street\": \"{{street}}\",\r\n            \"number\": \"{{number}}\",\r\n            \"complement\": \"{{complement}}\",\r\n            \"country\": \"\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/company",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"company"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "CEP",
							"item": [
								{
									"name": "CEP com menos de 8 dígitos",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Array com valores diferentes para \"Razão Social\"\r",
													"const corporateNames = [\"Camila Santos company\", \"TechNova Ltda\", \"Alfa Beta Corp\", \"Zeta Solutions\", \"InovaServiços\", \"Empresa Exemplo 001\", \"Startup do Bem\", \"GlobalTrade BR\", \"Serviços Rápidos\", \"MaxTI Soluções\", \"Empresa do Norte\", \"Consultoria XP\", \"AutoMarket Brasil\", \"CloudX Serviços\", \"FutureWave Ltda\", \"Rede Smart Business\", \"DevGroup Solutions\", \"HighData Inc\", \"Infinity Tech BR\"];\r",
													"\r",
													"// Seleciona um nome aleatório\r",
													"const selectedCorporateName = corporateNames[Math.floor(Math.random() * corporateNames.length)];\r",
													"\r",
													"// Define como variável para reutilizar\r",
													"pm.variables.set(\"corporateName\", selectedCorporateName);\r",
													"\r",
													"// Array com CNPJs fictícios válidos (sem máscara, como esperado no backend)\r",
													"const registerCompanies = [\r",
													"  \"12345678000195\", \"98765432000109\", \"11222333000181\", \"99887766000144\",\r",
													"  \"55667788000122\", \"33445566000177\", \"10203040000166\", \"11223344000100\",\r",
													"  \"66778899000188\", \"12312312300012\", \"44112233000155\", \"55443322000133\",\r",
													"  \"77665544000177\", \"88990011000100\", \"10111213000122\", \"15161718000190\",\r",
													"  \"19202122000101\", \"24252627000144\", \"28293031000188\"\r",
													"];\r",
													"\r",
													"// Seleciona um CNPJ aleatório\r",
													"const selectedCNPJ = registerCompanies[Math.floor(Math.random() * registerCompanies.length)];\r",
													"\r",
													"// Define como variável reutilizável\r",
													"pm.variables.set(\"registerCompany\", selectedCNPJ);\r",
													"\r",
													"\r",
													"// Array com e-mails válidos e variados\r",
													"const companyMails = [\r",
													"  \"empresa01@empresa.com.br\", \"contato@techsolucoes.com\", \"suporte@alfa.com.br\", \"info@betacorp.io\",\r",
													"  \"vendas@exemplo.org\", \"atendimento@cloudx.com\", \"diretoria@startupltda.com\", \"camila.santos@empresa.com\",\r",
													"  \"admin@inovabr.com\", \"noreply@negocios.com\", \"helpdesk@redesmart.com\", \"contato@consultoriaxp.com\",\r",
													"  \"rh@futurewave.com.br\", \"sac@automarket.com\", \"financeiro@globaltrade.com.br\", \"ti@highdata.org\",\r",
													"  \"comercial@maxsolucoes.com\", \"equipe@servicosbr.net\", \"gerencia@empresaxpto.com\"\r",
													"];\r",
													"\r",
													"// Seleciona um e-mail aleatório\r",
													"const selectedMail = companyMails[Math.floor(Math.random() * companyMails.length)];\r",
													"\r",
													"// Define como variável reutilizável\r",
													"pm.variables.set(\"mail\", selectedMail);\r",
													"\r",
													"// nomes fantasia diferentes (matriz)\r",
													"const matrizNames = [\r",
													"  \"Nuvem Computing\", \"Alpha Sistemas\", \"BetaTech\", \"ZetaCorp\", \"Smart Solutions\",\r",
													"  \"InovaTech\", \"TI Pro Business\", \"CloudWave\", \"MaxData\", \"DataSafe\",\r",
													"  \"NextGen Tech\", \"ServTI Brasil\", \"Grupo Digital\", \"NeoInfra\", \"SoftMind\",\r",
													"  \"Connect Plus\", \"FusionTI\", \"GlobalNet\", \"CyberWave\"\r",
													"];\r",
													"\r",
													"// descrições de serviços/negócio\r",
													"const serviceDescriptions = [\r",
													"  \"Desenvolvimento Personalizado\", \"Consultoria em TI\", \"Soluções em Nuvem\", \"Infraestrutura de Redes\",\r",
													"  \"Automação Comercial\", \"Plataformas Digitais\", \"Serviços de Hosting\", \"Suporte Técnico Especializado\",\r",
													"  \"Análise de Dados\", \"Desenvolvimento Web\", \"Sistemas Empresariais\", \"Segurança da Informação\",\r",
													"  \"Treinamento Corporativo\", \"Integração de Sistemas\", \"Consultoria Ágil\", \"Migração para Nuvem\",\r",
													"  \"Gestão de TI\", \"Gerenciamento de Servidores\", \"Tecnologia Educacional\"\r",
													"];\r",
													"\r",
													"// Seleção aleatória\r",
													"const selectedMatrizName = matrizNames[Math.floor(Math.random() * matrizNames.length)];\r",
													"const selectedServiceDesc = serviceDescriptions[Math.floor(Math.random() * serviceDescriptions.length)];\r",
													"\r",
													"// Armazenar como variáveis para uso no body\r",
													"pm.variables.set(\"matriz\", selectedMatrizName);\r",
													"pm.variables.set(\"serviceDescription\", selectedServiceDesc);\r",
													"\r",
													"// nomes compostos (apenas letras, com ao menos duas palavras)\r",
													"const responsibleContacts = [\r",
													"  \"Camila Santos\", \"João Pedro\", \"Ana Beatriz\", \"Carlos Eduardo\", \"Fernanda Lima\",\r",
													"  \"Rafael Borges\", \"Juliana Costa\", \"Marcelo Henrique\", \"Bruna Silva\", \"Felipe Oliveira\",\r",
													"  \"Daniela Marques\", \"Luana Ferreira\", \"Ricardo Matos\", \"Patrícia Andrade\", \"Gabriel Souza\",\r",
													"  \"Larissa Cunha\", \"Renato Castro\", \"Amanda Prado\", \"Lucas Almeida\"\r",
													"];\r",
													"\r",
													"// telefones brasileiros com máscara (máx. 15 caracteres)\r",
													"const telephones = [\r",
													"  \"11981123456789\", \"21982234567890\", \"31983345678901\", \"41984456789012\", \"51985567890123\", \"61986678901234\", \"71987789012345\", \"81988890123456\", \"91989901234567\", \"31997345671234\", \"51991567896789\", \"11992112234455\", \"21994556678899\", \"61995667789900\", \"71996778890011\", \"41998889901122\", \"81999990012233\", \"91980101123344\", \"11987111223333\"\r",
													"];\r",
													"\r",
													"// Seleção aleatória\r",
													"const selectedContact = responsibleContacts[Math.floor(Math.random() * responsibleContacts.length)];\r",
													"const selectedPhone = telephones[Math.floor(Math.random() * telephones.length)];\r",
													"\r",
													"// Setar variáveis\r",
													"pm.variables.set(\"responsibleContact\", selectedContact);\r",
													"pm.variables.set(\"telephone\", selectedPhone);\r",
													"\r",
													"// logradouros (alfanuméricos, até 50 caracteres, com caracteres especiais permitidos)\r",
													"const streets = [\r",
													"  \"Rua das Palmeiras\", \"Av. Brasil\", \"Rua 1ª de Maio\", \"Travessa do Comércio\", \"Alameda das Águias\",\r",
													"  \"Rua São João\", \"Av. Getúlio Vargas\", \"Rua dos Lírios\", \"Rua Coronel 2º Batista\", \"Rua Alfredo 'Silva'\",\r",
													"  \"Estrada do Sol\", \"Rua João 1º Neto\", \"Rua Principal - Leste\", \"Rua Vitória-Régia\", \"Alameda 5ª Norte\",\r",
													"  \"Praça Central\", \"Rua Júlio de Castro\", \"Rua Dr. Carlos 1º Martins\", \"Rua Dom Pedro II\"\r",
													"];\r",
													"\r",
													"// números (apenas dígitos, até 10 caracteres)\r",
													"const numbers = [\r",
													"  \"1010000000\", \"2020000000\", \"3030000000\", \"4040000000\", \"5050000000\", \"6060000000\", \"7070000000\", \"8080000000\", \"9090000000\", \"1001000000\",\r",
													"  \"1102000000\", \"1203000000\", \"1304000000\", \"1405000000\", \"1506000000\", \"1607000000\", \"1708000000\", \"1809000000\", \"1900000000\"\r",
													"];\r",
													"\r",
													"// complementos (alfanuméricos, com especiais permitidos, até 80 caracteres)\r",
													"const complements = [\r",
													"  \"Fundos\", \"Casa 1\", \"Apto 202\", \"Bloco B\", \"Sala 3\", \"Cobertura\", \"Térreo\", \"Galpão 2\", \"Loja 'A'\", \"Anexo 1\",\r",
													"  \"Ed. Central\", \"Torre Sul\", \"Prédio 1º\", \"Sobreloja\", \"Loja B\", \"Sala Comercial 7\", \"2º Andar\", \"Área 3\", \"Estacionamento\"\r",
													"];\r",
													"\r",
													"// bairros (alfanuméricos com especiais permitidos, até 50 caracteres)\r",
													"const districts = [\r",
													"  \"Centro\", \"Jardim das Flores\", \"Vila Nova\", \"Parque 1ª Esperança\", \"Bairro Alto\",\r",
													"  \"Residencial Alfa\", \"Jardim São João\", \"Nova 'Vida'\", \"Lagoa Azul\", \"Industrial Oeste\",\r",
													"  \"Bairro Santo André\", \"Vila Mariana\", \"Parque das Árvores\", \"Santa Luzia\", \"Água Verde\",\r",
													"  \"Vila Operária\", \"Jardim Central\", \"Colinas do Sol\", \"Residencial Leste\"\r",
													"];\r",
													"\r",
													"// Seleciona valores aleatórios\r",
													"const selectedStreet = streets[Math.floor(Math.random() * streets.length)];\r",
													"const selectedNumber = numbers[Math.floor(Math.random() * numbers.length)];\r",
													"const selectedComplement = complements[Math.floor(Math.random() * complements.length)];\r",
													"const selectedDistrict = districts[Math.floor(Math.random() * districts.length)];\r",
													"\r",
													"pm.variables.set(\"street\", selectedStreet);\r",
													"pm.variables.set(\"number\", selectedNumber);\r",
													"pm.variables.set(\"complement\", selectedComplement);\r",
													"pm.variables.set(\"district\", selectedDistrict);\r",
													"\r",
													"// cidades (somente letras, com caracteres especiais permitidos, até 50 caracteres)\r",
													"const cities = [\r",
													"  \"São Paulo\", \"Rio de Janeiro\", \"Belo Horizonte\", \"Curitiba\", \"Salvador\",\r",
													"  \"Fortaleza\", \"Brasília\", \"Porto Alegre\", \"Florianópolis\", \"Goiânia\",\r",
													"  \"Campinas\", \"Natal\", \"Recife\", \"Manaus\", \"Belém\",\r",
													"  \"São Luís\", \"Campo Grande\", \"Vitória\", \"Maceió\"\r",
													"];\r",
													"\r",
													"// estados (apenas letras, com 2 caracteres obrigatórios - sigla)\r",
													"const states = [\r",
													"  \"SP\", \"RJ\", \"MG\", \"PR\", \"BA\", \"CE\", \"DF\", \"RS\", \"SC\", \"GO\",\r",
													"  \"PA\", \"PE\", \"AM\", \"MA\", \"RN\", \"AL\", \"MS\", \"ES\", \"PB\"\r",
													"];\r",
													"\r",
													"// países (somente letras, até 50 caracteres)\r",
													"const countries = [\r",
													"  \"Brasil\", \"Argentina\", \"Portugal\", \"México\", \"Espanha\",\r",
													"  \"Chile\", \"Uruguai\", \"Peru\", \"Colômbia\", \"Canadá\",\r",
													"  \"França\", \"Itália\", \"Alemanha\", \"Suíça\", \"Japão\",\r",
													"  \"Coreia\", \"Austrália\", \"Noruega\", \"Dinamarca\"\r",
													"];\r",
													"\r",
													"// CEPs válidos com máscara (somente números, no formato #####-###)\r",
													"const postalCodes = [\r",
													"  \"01001000\", \"20010001\", \"30110012\", \"80020000\", \"40010903\", \"60110000\", \"70040010\", \"90010000\", \"88010200\", \"74000001\",\r",
													"  \"13010000\", \"59010000\", \"50010902\", \"69010020\", \"66010080\", \"65010100\", \"79002123\", \"29010200\", \"57010000\"\r",
													"];\r",
													"\r",
													"const selectedCity = cities[Math.floor(Math.random() * cities.length)];\r",
													"const selectedState = states[Math.floor(Math.random() * states.length)];\r",
													"const selectedCountry = countries[Math.floor(Math.random() * countries.length)];\r",
													"const selectedPostalCode = postalCodes[Math.floor(Math.random() * postalCodes.length)];\r",
													"\r",
													"pm.variables.set(\"city\", selectedCity);\r",
													"pm.variables.set(\"state\", selectedState);\r",
													"pm.variables.set(\"country\", selectedCountry);\r",
													"pm.variables.set(\"postalCode\", selectedPostalCode);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code é 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													" \r",
													"pm.test(\"Erro de validação\", () => {\r",
													"       pm.expect(pm.response.json().error).to.be.an('array');\r",
													"    pm.expect(pm.response.json().error).to.include(\"O campo 'CEP' deve conter 8 dígitos\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"corporateName\": \"{{corporateName}}\",\r\n    \"registerCompany\": \"{{registerCompany}}\",\r\n    \"mail\": \"{{mail}}\",\r\n    \"matriz\": \"{{matriz}}\",\r\n    \"responsibleContact\": \"{{responsibleContact}}\",\r\n    \"telephone\": \"{{telephone}}\",\r\n    \"serviceDescription\": \"{{serviceDescription}}\",\r\n    \"address\": [\r\n        {\r\n            \"zipCode\": \"0214547\",\r\n            \"city\": \"{{city}}\",\r\n            \"state\": \"{{state}}\",\r\n            \"district\": \"{{district}}\",\r\n            \"street\": \"{{street}}\",\r\n            \"number\": \"{{number}}\",\r\n            \"complement\": \"{{complement}}\",\r\n            \"country\": \"{{country}}\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/company",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"company"
											]
										}
									},
									"response": []
								},
								{
									"name": "CEP com caracteres inválidos",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Array com valores diferentes para \"Razão Social\"\r",
													"const corporateNames = [\"Camila Santos company\", \"TechNova Ltda\", \"Alfa Beta Corp\", \"Zeta Solutions\", \"InovaServiços\", \"Empresa Exemplo 001\", \"Startup do Bem\", \"GlobalTrade BR\", \"Serviços Rápidos\", \"MaxTI Soluções\", \"Empresa do Norte\", \"Consultoria XP\", \"AutoMarket Brasil\", \"CloudX Serviços\", \"FutureWave Ltda\", \"Rede Smart Business\", \"DevGroup Solutions\", \"HighData Inc\", \"Infinity Tech BR\"];\r",
													"\r",
													"// Seleciona um nome aleatório\r",
													"const selectedCorporateName = corporateNames[Math.floor(Math.random() * corporateNames.length)];\r",
													"\r",
													"// Define como variável para reutilizar\r",
													"pm.variables.set(\"corporateName\", selectedCorporateName);\r",
													"\r",
													"// Array com CNPJs fictícios válidos (sem máscara, como esperado no backend)\r",
													"const registerCompanies = [\r",
													"  \"12345678000195\", \"98765432000109\", \"11222333000181\", \"99887766000144\",\r",
													"  \"55667788000122\", \"33445566000177\", \"10203040000166\", \"11223344000100\",\r",
													"  \"66778899000188\", \"12312312300012\", \"44112233000155\", \"55443322000133\",\r",
													"  \"77665544000177\", \"88990011000100\", \"10111213000122\", \"15161718000190\",\r",
													"  \"19202122000101\", \"24252627000144\", \"28293031000188\"\r",
													"];\r",
													"\r",
													"// Seleciona um CNPJ aleatório\r",
													"const selectedCNPJ = registerCompanies[Math.floor(Math.random() * registerCompanies.length)];\r",
													"\r",
													"// Define como variável reutilizável\r",
													"pm.variables.set(\"registerCompany\", selectedCNPJ);\r",
													"\r",
													"\r",
													"// Array com e-mails válidos e variados\r",
													"const companyMails = [\r",
													"  \"empresa01@empresa.com.br\", \"contato@techsolucoes.com\", \"suporte@alfa.com.br\", \"info@betacorp.io\",\r",
													"  \"vendas@exemplo.org\", \"atendimento@cloudx.com\", \"diretoria@startupltda.com\", \"camila.santos@empresa.com\",\r",
													"  \"admin@inovabr.com\", \"noreply@negocios.com\", \"helpdesk@redesmart.com\", \"contato@consultoriaxp.com\",\r",
													"  \"rh@futurewave.com.br\", \"sac@automarket.com\", \"financeiro@globaltrade.com.br\", \"ti@highdata.org\",\r",
													"  \"comercial@maxsolucoes.com\", \"equipe@servicosbr.net\", \"gerencia@empresaxpto.com\"\r",
													"];\r",
													"\r",
													"// Seleciona um e-mail aleatório\r",
													"const selectedMail = companyMails[Math.floor(Math.random() * companyMails.length)];\r",
													"\r",
													"// Define como variável reutilizável\r",
													"pm.variables.set(\"mail\", selectedMail);\r",
													"\r",
													"// nomes fantasia diferentes (matriz)\r",
													"const matrizNames = [\r",
													"  \"Nuvem Computing\", \"Alpha Sistemas\", \"BetaTech\", \"ZetaCorp\", \"Smart Solutions\",\r",
													"  \"InovaTech\", \"TI Pro Business\", \"CloudWave\", \"MaxData\", \"DataSafe\",\r",
													"  \"NextGen Tech\", \"ServTI Brasil\", \"Grupo Digital\", \"NeoInfra\", \"SoftMind\",\r",
													"  \"Connect Plus\", \"FusionTI\", \"GlobalNet\", \"CyberWave\"\r",
													"];\r",
													"\r",
													"// descrições de serviços/negócio\r",
													"const serviceDescriptions = [\r",
													"  \"Desenvolvimento Personalizado\", \"Consultoria em TI\", \"Soluções em Nuvem\", \"Infraestrutura de Redes\",\r",
													"  \"Automação Comercial\", \"Plataformas Digitais\", \"Serviços de Hosting\", \"Suporte Técnico Especializado\",\r",
													"  \"Análise de Dados\", \"Desenvolvimento Web\", \"Sistemas Empresariais\", \"Segurança da Informação\",\r",
													"  \"Treinamento Corporativo\", \"Integração de Sistemas\", \"Consultoria Ágil\", \"Migração para Nuvem\",\r",
													"  \"Gestão de TI\", \"Gerenciamento de Servidores\", \"Tecnologia Educacional\"\r",
													"];\r",
													"\r",
													"// Seleção aleatória\r",
													"const selectedMatrizName = matrizNames[Math.floor(Math.random() * matrizNames.length)];\r",
													"const selectedServiceDesc = serviceDescriptions[Math.floor(Math.random() * serviceDescriptions.length)];\r",
													"\r",
													"// Armazenar como variáveis para uso no body\r",
													"pm.variables.set(\"matriz\", selectedMatrizName);\r",
													"pm.variables.set(\"serviceDescription\", selectedServiceDesc);\r",
													"\r",
													"// nomes compostos (apenas letras, com ao menos duas palavras)\r",
													"const responsibleContacts = [\r",
													"  \"Camila Santos\", \"João Pedro\", \"Ana Beatriz\", \"Carlos Eduardo\", \"Fernanda Lima\",\r",
													"  \"Rafael Borges\", \"Juliana Costa\", \"Marcelo Henrique\", \"Bruna Silva\", \"Felipe Oliveira\",\r",
													"  \"Daniela Marques\", \"Luana Ferreira\", \"Ricardo Matos\", \"Patrícia Andrade\", \"Gabriel Souza\",\r",
													"  \"Larissa Cunha\", \"Renato Castro\", \"Amanda Prado\", \"Lucas Almeida\"\r",
													"];\r",
													"\r",
													"// telefones brasileiros com máscara (máx. 15 caracteres)\r",
													"const telephones = [\r",
													"  \"11981123456789\", \"21982234567890\", \"31983345678901\", \"41984456789012\", \"51985567890123\", \"61986678901234\", \"71987789012345\", \"81988890123456\", \"91989901234567\", \"31997345671234\", \"51991567896789\", \"11992112234455\", \"21994556678899\", \"61995667789900\", \"71996778890011\", \"41998889901122\", \"81999990012233\", \"91980101123344\", \"11987111223333\"\r",
													"];\r",
													"\r",
													"// Seleção aleatória\r",
													"const selectedContact = responsibleContacts[Math.floor(Math.random() * responsibleContacts.length)];\r",
													"const selectedPhone = telephones[Math.floor(Math.random() * telephones.length)];\r",
													"\r",
													"// Setar variáveis\r",
													"pm.variables.set(\"responsibleContact\", selectedContact);\r",
													"pm.variables.set(\"telephone\", selectedPhone);\r",
													"\r",
													"// logradouros (alfanuméricos, até 50 caracteres, com caracteres especiais permitidos)\r",
													"const streets = [\r",
													"  \"Rua das Palmeiras\", \"Av. Brasil\", \"Rua 1ª de Maio\", \"Travessa do Comércio\", \"Alameda das Águias\",\r",
													"  \"Rua São João\", \"Av. Getúlio Vargas\", \"Rua dos Lírios\", \"Rua Coronel 2º Batista\", \"Rua Alfredo 'Silva'\",\r",
													"  \"Estrada do Sol\", \"Rua João 1º Neto\", \"Rua Principal - Leste\", \"Rua Vitória-Régia\", \"Alameda 5ª Norte\",\r",
													"  \"Praça Central\", \"Rua Júlio de Castro\", \"Rua Dr. Carlos 1º Martins\", \"Rua Dom Pedro II\"\r",
													"];\r",
													"\r",
													"// números (apenas dígitos, até 10 caracteres)\r",
													"const numbers = [\r",
													"  \"1010000000\", \"2020000000\", \"3030000000\", \"4040000000\", \"5050000000\", \"6060000000\", \"7070000000\", \"8080000000\", \"9090000000\", \"1001000000\",\r",
													"  \"1102000000\", \"1203000000\", \"1304000000\", \"1405000000\", \"1506000000\", \"1607000000\", \"1708000000\", \"1809000000\", \"1900000000\"\r",
													"];\r",
													"\r",
													"// complementos (alfanuméricos, com especiais permitidos, até 80 caracteres)\r",
													"const complements = [\r",
													"  \"Fundos\", \"Casa 1\", \"Apto 202\", \"Bloco B\", \"Sala 3\", \"Cobertura\", \"Térreo\", \"Galpão 2\", \"Loja 'A'\", \"Anexo 1\",\r",
													"  \"Ed. Central\", \"Torre Sul\", \"Prédio 1º\", \"Sobreloja\", \"Loja B\", \"Sala Comercial 7\", \"2º Andar\", \"Área 3\", \"Estacionamento\"\r",
													"];\r",
													"\r",
													"// bairros (alfanuméricos com especiais permitidos, até 50 caracteres)\r",
													"const districts = [\r",
													"  \"Centro\", \"Jardim das Flores\", \"Vila Nova\", \"Parque 1ª Esperança\", \"Bairro Alto\",\r",
													"  \"Residencial Alfa\", \"Jardim São João\", \"Nova 'Vida'\", \"Lagoa Azul\", \"Industrial Oeste\",\r",
													"  \"Bairro Santo André\", \"Vila Mariana\", \"Parque das Árvores\", \"Santa Luzia\", \"Água Verde\",\r",
													"  \"Vila Operária\", \"Jardim Central\", \"Colinas do Sol\", \"Residencial Leste\"\r",
													"];\r",
													"\r",
													"// Seleciona valores aleatórios\r",
													"const selectedStreet = streets[Math.floor(Math.random() * streets.length)];\r",
													"const selectedNumber = numbers[Math.floor(Math.random() * numbers.length)];\r",
													"const selectedComplement = complements[Math.floor(Math.random() * complements.length)];\r",
													"const selectedDistrict = districts[Math.floor(Math.random() * districts.length)];\r",
													"\r",
													"pm.variables.set(\"street\", selectedStreet);\r",
													"pm.variables.set(\"number\", selectedNumber);\r",
													"pm.variables.set(\"complement\", selectedComplement);\r",
													"pm.variables.set(\"district\", selectedDistrict);\r",
													"\r",
													"// cidades (somente letras, com caracteres especiais permitidos, até 50 caracteres)\r",
													"const cities = [\r",
													"  \"São Paulo\", \"Rio de Janeiro\", \"Belo Horizonte\", \"Curitiba\", \"Salvador\",\r",
													"  \"Fortaleza\", \"Brasília\", \"Porto Alegre\", \"Florianópolis\", \"Goiânia\",\r",
													"  \"Campinas\", \"Natal\", \"Recife\", \"Manaus\", \"Belém\",\r",
													"  \"São Luís\", \"Campo Grande\", \"Vitória\", \"Maceió\"\r",
													"];\r",
													"\r",
													"// estados (apenas letras, com 2 caracteres obrigatórios - sigla)\r",
													"const states = [\r",
													"  \"SP\", \"RJ\", \"MG\", \"PR\", \"BA\", \"CE\", \"DF\", \"RS\", \"SC\", \"GO\",\r",
													"  \"PA\", \"PE\", \"AM\", \"MA\", \"RN\", \"AL\", \"MS\", \"ES\", \"PB\"\r",
													"];\r",
													"\r",
													"// países (somente letras, até 50 caracteres)\r",
													"const countries = [\r",
													"  \"Brasil\", \"Argentina\", \"Portugal\", \"México\", \"Espanha\",\r",
													"  \"Chile\", \"Uruguai\", \"Peru\", \"Colômbia\", \"Canadá\",\r",
													"  \"França\", \"Itália\", \"Alemanha\", \"Suíça\", \"Japão\",\r",
													"  \"Coreia\", \"Austrália\", \"Noruega\", \"Dinamarca\"\r",
													"];\r",
													"\r",
													"// CEPs válidos com máscara (somente números, no formato #####-###)\r",
													"const postalCodes = [\r",
													"  \"01001000\", \"20010001\", \"30110012\", \"80020000\", \"40010903\", \"60110000\", \"70040010\", \"90010000\", \"88010200\", \"74000001\",\r",
													"  \"13010000\", \"59010000\", \"50010902\", \"69010020\", \"66010080\", \"65010100\", \"79002123\", \"29010200\", \"57010000\"\r",
													"];\r",
													"\r",
													"const selectedCity = cities[Math.floor(Math.random() * cities.length)];\r",
													"const selectedState = states[Math.floor(Math.random() * states.length)];\r",
													"const selectedCountry = countries[Math.floor(Math.random() * countries.length)];\r",
													"const selectedPostalCode = postalCodes[Math.floor(Math.random() * postalCodes.length)];\r",
													"\r",
													"pm.variables.set(\"city\", selectedCity);\r",
													"pm.variables.set(\"state\", selectedState);\r",
													"pm.variables.set(\"country\", selectedCountry);\r",
													"pm.variables.set(\"postalCode\", selectedPostalCode);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code é 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													" \r",
													"pm.test(\"Erro de validação\", () => {\r",
													"       pm.expect(pm.response.json().error).to.be.an('array');\r",
													"    pm.expect(pm.response.json().error).to.include(\"O campo 'CEP' só pode conter números\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"corporateName\": \"{{corporateName}}\",\r\n    \"registerCompany\": \"{{registerCompany}}\",\r\n    \"mail\": \"{{mail}}\",\r\n    \"matriz\": \"{{matriz}}\",\r\n    \"responsibleContact\": \"{{responsibleContact}}\",\r\n    \"telephone\": \"{{telephone}}\",\r\n    \"serviceDescription\": \"{{serviceDescription}}\",\r\n    \"address\": [\r\n        {\r\n            \"zipCode\": \"01A01-B0\",\r\n            \"city\": \"{{city}}\",\r\n            \"state\": \"{{state}}\",\r\n            \"district\": \"{{district}}\",\r\n            \"street\": \"{{street}}\",\r\n            \"number\": \"{{number}}\",\r\n            \"complement\": \"{{complement}}\",\r\n            \"country\": \"{{country}}\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/company",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"company"
											]
										}
									},
									"response": []
								},
								{
									"name": "Campo CEP vazio",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													"// Array com valores diferentes para \"Razão Social\"\r",
													"const corporateNames = [\"Camila Santos company\", \"TechNova Ltda\", \"Alfa Beta Corp\", \"Zeta Solutions\", \"InovaServiços\", \"Empresa Exemplo 001\", \"Startup do Bem\", \"GlobalTrade BR\", \"Serviços Rápidos\", \"MaxTI Soluções\", \"Empresa do Norte\", \"Consultoria XP\", \"AutoMarket Brasil\", \"CloudX Serviços\", \"FutureWave Ltda\", \"Rede Smart Business\", \"DevGroup Solutions\", \"HighData Inc\", \"Infinity Tech BR\"];\r",
													"\r",
													"// Seleciona um nome aleatório\r",
													"const selectedCorporateName = corporateNames[Math.floor(Math.random() * corporateNames.length)];\r",
													"\r",
													"// Define como variável para reutilizar\r",
													"pm.variables.set(\"corporateName\", selectedCorporateName);\r",
													"\r",
													"// Array com CNPJs fictícios válidos (sem máscara, como esperado no backend)\r",
													"const registerCompanies = [\r",
													"  \"12345678000195\", \"98765432000109\", \"11222333000181\", \"99887766000144\",\r",
													"  \"55667788000122\", \"33445566000177\", \"10203040000166\", \"11223344000100\",\r",
													"  \"66778899000188\", \"12312312300012\", \"44112233000155\", \"55443322000133\",\r",
													"  \"77665544000177\", \"88990011000100\", \"10111213000122\", \"15161718000190\",\r",
													"  \"19202122000101\", \"24252627000144\", \"28293031000188\"\r",
													"];\r",
													"\r",
													"// Seleciona um CNPJ aleatório\r",
													"const selectedCNPJ = registerCompanies[Math.floor(Math.random() * registerCompanies.length)];\r",
													"\r",
													"// Define como variável reutilizável\r",
													"pm.variables.set(\"registerCompany\", selectedCNPJ);\r",
													"\r",
													"\r",
													"// Array com e-mails válidos e variados\r",
													"const companyMails = [\r",
													"  \"empresa01@empresa.com.br\", \"contato@techsolucoes.com\", \"suporte@alfa.com.br\", \"info@betacorp.io\",\r",
													"  \"vendas@exemplo.org\", \"atendimento@cloudx.com\", \"diretoria@startupltda.com\", \"camila.santos@empresa.com\",\r",
													"  \"admin@inovabr.com\", \"noreply@negocios.com\", \"helpdesk@redesmart.com\", \"contato@consultoriaxp.com\",\r",
													"  \"rh@futurewave.com.br\", \"sac@automarket.com\", \"financeiro@globaltrade.com.br\", \"ti@highdata.org\",\r",
													"  \"comercial@maxsolucoes.com\", \"equipe@servicosbr.net\", \"gerencia@empresaxpto.com\"\r",
													"];\r",
													"\r",
													"// Seleciona um e-mail aleatório\r",
													"const selectedMail = companyMails[Math.floor(Math.random() * companyMails.length)];\r",
													"\r",
													"// Define como variável reutilizável\r",
													"pm.variables.set(\"mail\", selectedMail);\r",
													"\r",
													"// nomes fantasia diferentes (matriz)\r",
													"const matrizNames = [\r",
													"  \"Nuvem Computing\", \"Alpha Sistemas\", \"BetaTech\", \"ZetaCorp\", \"Smart Solutions\",\r",
													"  \"InovaTech\", \"TI Pro Business\", \"CloudWave\", \"MaxData\", \"DataSafe\",\r",
													"  \"NextGen Tech\", \"ServTI Brasil\", \"Grupo Digital\", \"NeoInfra\", \"SoftMind\",\r",
													"  \"Connect Plus\", \"FusionTI\", \"GlobalNet\", \"CyberWave\"\r",
													"];\r",
													"\r",
													"// descrições de serviços/negócio\r",
													"const serviceDescriptions = [\r",
													"  \"Desenvolvimento Personalizado\", \"Consultoria em TI\", \"Soluções em Nuvem\", \"Infraestrutura de Redes\",\r",
													"  \"Automação Comercial\", \"Plataformas Digitais\", \"Serviços de Hosting\", \"Suporte Técnico Especializado\",\r",
													"  \"Análise de Dados\", \"Desenvolvimento Web\", \"Sistemas Empresariais\", \"Segurança da Informação\",\r",
													"  \"Treinamento Corporativo\", \"Integração de Sistemas\", \"Consultoria Ágil\", \"Migração para Nuvem\",\r",
													"  \"Gestão de TI\", \"Gerenciamento de Servidores\", \"Tecnologia Educacional\"\r",
													"];\r",
													"\r",
													"// Seleção aleatória\r",
													"const selectedMatrizName = matrizNames[Math.floor(Math.random() * matrizNames.length)];\r",
													"const selectedServiceDesc = serviceDescriptions[Math.floor(Math.random() * serviceDescriptions.length)];\r",
													"\r",
													"// Armazenar como variáveis para uso no body\r",
													"pm.variables.set(\"matriz\", selectedMatrizName);\r",
													"pm.variables.set(\"serviceDescription\", selectedServiceDesc);\r",
													"\r",
													"// nomes compostos (apenas letras, com ao menos duas palavras)\r",
													"const responsibleContacts = [\r",
													"  \"Camila Santos\", \"João Pedro\", \"Ana Beatriz\", \"Carlos Eduardo\", \"Fernanda Lima\",\r",
													"  \"Rafael Borges\", \"Juliana Costa\", \"Marcelo Henrique\", \"Bruna Silva\", \"Felipe Oliveira\",\r",
													"  \"Daniela Marques\", \"Luana Ferreira\", \"Ricardo Matos\", \"Patrícia Andrade\", \"Gabriel Souza\",\r",
													"  \"Larissa Cunha\", \"Renato Castro\", \"Amanda Prado\", \"Lucas Almeida\"\r",
													"];\r",
													"\r",
													"// telefones brasileiros com máscara (máx. 15 caracteres)\r",
													"const telephones = [\r",
													"  \"11981123456789\", \"21982234567890\", \"31983345678901\", \"41984456789012\", \"51985567890123\", \"61986678901234\", \"71987789012345\", \"81988890123456\", \"91989901234567\", \"31997345671234\", \"51991567896789\", \"11992112234455\", \"21994556678899\", \"61995667789900\", \"71996778890011\", \"41998889901122\", \"81999990012233\", \"91980101123344\", \"11987111223333\"\r",
													"];\r",
													"\r",
													"// Seleção aleatória\r",
													"const selectedContact = responsibleContacts[Math.floor(Math.random() * responsibleContacts.length)];\r",
													"const selectedPhone = telephones[Math.floor(Math.random() * telephones.length)];\r",
													"\r",
													"// Setar variáveis\r",
													"pm.variables.set(\"responsibleContact\", selectedContact);\r",
													"pm.variables.set(\"telephone\", selectedPhone);\r",
													"\r",
													"// logradouros (alfanuméricos, até 50 caracteres, com caracteres especiais permitidos)\r",
													"const streets = [\r",
													"  \"Rua das Palmeiras\", \"Av. Brasil\", \"Rua 1ª de Maio\", \"Travessa do Comércio\", \"Alameda das Águias\",\r",
													"  \"Rua São João\", \"Av. Getúlio Vargas\", \"Rua dos Lírios\", \"Rua Coronel 2º Batista\", \"Rua Alfredo 'Silva'\",\r",
													"  \"Estrada do Sol\", \"Rua João 1º Neto\", \"Rua Principal - Leste\", \"Rua Vitória-Régia\", \"Alameda 5ª Norte\",\r",
													"  \"Praça Central\", \"Rua Júlio de Castro\", \"Rua Dr. Carlos 1º Martins\", \"Rua Dom Pedro II\"\r",
													"];\r",
													"\r",
													"// números (apenas dígitos, até 10 caracteres)\r",
													"const numbers = [\r",
													"  \"1010000000\", \"2020000000\", \"3030000000\", \"4040000000\", \"5050000000\", \"6060000000\", \"7070000000\", \"8080000000\", \"9090000000\", \"1001000000\",\r",
													"  \"1102000000\", \"1203000000\", \"1304000000\", \"1405000000\", \"1506000000\", \"1607000000\", \"1708000000\", \"1809000000\", \"1900000000\"\r",
													"];\r",
													"\r",
													"// complementos (alfanuméricos, com especiais permitidos, até 80 caracteres)\r",
													"const complements = [\r",
													"  \"Fundos\", \"Casa 1\", \"Apto 202\", \"Bloco B\", \"Sala 3\", \"Cobertura\", \"Térreo\", \"Galpão 2\", \"Loja 'A'\", \"Anexo 1\",\r",
													"  \"Ed. Central\", \"Torre Sul\", \"Prédio 1º\", \"Sobreloja\", \"Loja B\", \"Sala Comercial 7\", \"2º Andar\", \"Área 3\", \"Estacionamento\"\r",
													"];\r",
													"\r",
													"// bairros (alfanuméricos com especiais permitidos, até 50 caracteres)\r",
													"const districts = [\r",
													"  \"Centro\", \"Jardim das Flores\", \"Vila Nova\", \"Parque 1ª Esperança\", \"Bairro Alto\",\r",
													"  \"Residencial Alfa\", \"Jardim São João\", \"Nova 'Vida'\", \"Lagoa Azul\", \"Industrial Oeste\",\r",
													"  \"Bairro Santo André\", \"Vila Mariana\", \"Parque das Árvores\", \"Santa Luzia\", \"Água Verde\",\r",
													"  \"Vila Operária\", \"Jardim Central\", \"Colinas do Sol\", \"Residencial Leste\"\r",
													"];\r",
													"\r",
													"// Seleciona valores aleatórios\r",
													"const selectedStreet = streets[Math.floor(Math.random() * streets.length)];\r",
													"const selectedNumber = numbers[Math.floor(Math.random() * numbers.length)];\r",
													"const selectedComplement = complements[Math.floor(Math.random() * complements.length)];\r",
													"const selectedDistrict = districts[Math.floor(Math.random() * districts.length)];\r",
													"\r",
													"pm.variables.set(\"street\", selectedStreet);\r",
													"pm.variables.set(\"number\", selectedNumber);\r",
													"pm.variables.set(\"complement\", selectedComplement);\r",
													"pm.variables.set(\"district\", selectedDistrict);\r",
													"\r",
													"// cidades (somente letras, com caracteres especiais permitidos, até 50 caracteres)\r",
													"const cities = [\r",
													"  \"São Paulo\", \"Rio de Janeiro\", \"Belo Horizonte\", \"Curitiba\", \"Salvador\",\r",
													"  \"Fortaleza\", \"Brasília\", \"Porto Alegre\", \"Florianópolis\", \"Goiânia\",\r",
													"  \"Campinas\", \"Natal\", \"Recife\", \"Manaus\", \"Belém\",\r",
													"  \"São Luís\", \"Campo Grande\", \"Vitória\", \"Maceió\"\r",
													"];\r",
													"\r",
													"// estados (apenas letras, com 2 caracteres obrigatórios - sigla)\r",
													"const states = [\r",
													"  \"SP\", \"RJ\", \"MG\", \"PR\", \"BA\", \"CE\", \"DF\", \"RS\", \"SC\", \"GO\",\r",
													"  \"PA\", \"PE\", \"AM\", \"MA\", \"RN\", \"AL\", \"MS\", \"ES\", \"PB\"\r",
													"];\r",
													"\r",
													"// países (somente letras, até 50 caracteres)\r",
													"const countries = [\r",
													"  \"Brasil\", \"Argentina\", \"Portugal\", \"México\", \"Espanha\",\r",
													"  \"Chile\", \"Uruguai\", \"Peru\", \"Colômbia\", \"Canadá\",\r",
													"  \"França\", \"Itália\", \"Alemanha\", \"Suíça\", \"Japão\",\r",
													"  \"Coreia\", \"Austrália\", \"Noruega\", \"Dinamarca\"\r",
													"];\r",
													"\r",
													"// CEPs válidos com máscara (somente números, no formato #####-###)\r",
													"const postalCodes = [\r",
													"  \"01001000\", \"20010001\", \"30110012\", \"80020000\", \"40010903\", \"60110000\", \"70040010\", \"90010000\", \"88010200\", \"74000001\",\r",
													"  \"13010000\", \"59010000\", \"50010902\", \"69010020\", \"66010080\", \"65010100\", \"79002123\", \"29010200\", \"57010000\"\r",
													"];\r",
													"\r",
													"const selectedCity = cities[Math.floor(Math.random() * cities.length)];\r",
													"const selectedState = states[Math.floor(Math.random() * states.length)];\r",
													"const selectedCountry = countries[Math.floor(Math.random() * countries.length)];\r",
													"const selectedPostalCode = postalCodes[Math.floor(Math.random() * postalCodes.length)];\r",
													"\r",
													"pm.variables.set(\"city\", selectedCity);\r",
													"pm.variables.set(\"state\", selectedState);\r",
													"pm.variables.set(\"country\", selectedCountry);\r",
													"pm.variables.set(\"postalCode\", selectedPostalCode);\r",
													""
												],
												"type": "text/javascript",
												"packages": {}
											}
										},
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code é 400\", () => {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													" \r",
													"pm.test(\"Erro de validação\", () => {\r",
													"       pm.expect(pm.response.json().error).to.be.an('array');\r",
													"    pm.expect(pm.response.json().error).to.include(\"O campo 'CEP' é obrigatório.\");\r",
													"});"
												],
												"type": "text/javascript",
												"packages": {}
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n    \"corporateName\": \"{{corporateName}}\",\r\n    \"registerCompany\": \"{{registerCompany}}\",\r\n    \"mail\": \"{{mail}}\",\r\n    \"matriz\": \"{{matriz}}\",\r\n    \"responsibleContact\": \"{{responsibleContact}}\",\r\n    \"telephone\": \"{{telephone}}\",\r\n    \"serviceDescription\": \"{{serviceDescription}}\",\r\n    \"address\": [\r\n        {\r\n            \"zipCode\": \"\",\r\n            \"city\": \"{{city}}\",\r\n            \"state\": \"{{state}}\",\r\n            \"district\": \"{{district}}\",\r\n            \"street\": \"{{street}}\",\r\n            \"number\": \"{{number}}\",\r\n            \"complement\": \"{{complement}}\",\r\n            \"country\": \"{{country}}\"\r\n        }\r\n    ]\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{url}}/api/company",
											"host": [
												"{{url}}"
											],
											"path": [
												"api",
												"company"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Robot",
			"item": [
				{
					"name": "USER",
					"item": [
						{
							"name": "Login",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.globals.set(\"tokenAdmin\", pm.response.json().token)\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify token is valid\", function (){\r",
											"    pm.expect(pm.response.json().token).to.exist;\r",
											"});\r",
											"\r",
											"pm.test(\"Welcome Message\", function () {\r",
											"    pm.environment.set(\"msgAdmin\", pm.response.json().msg);\r",
											"});\r",
											"\r",
											"pm.test(\"Verify ID Admin\", function (){\r",
											"    pm.environment.set(\"IDAdmin\", pm.response.json().user._id);\r",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"mail\": \"{{mailAdmin}}\",\r\n    \"password\": \"{{passAdmin}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{url}}/api/login/",
									"host": [
										"{{url}}"
									],
									"path": [
										"api",
										"login",
										""
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "key",
				"value": "authorization",
				"type": "string"
			},
			{
				"key": "value",
				"value": "{{tokenAdmin}}",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}